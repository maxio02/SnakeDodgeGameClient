/*! For license information please see script.js.LICENSE.txt */
(()=>{"use strict";var t={"./src/ArcSegment.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>c});var i,o=n("./src/Drawer.ts"),s=n("./node_modules/vector2d/src/Vec2D.js"),r=n("./src/Segment.ts"),a=(i=function(t,e){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},i(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});const c=function(t){function e(e,n,i,o,s,r){var a=t.call(this)||this;return a.center=e,a.radius=n,a.startAngle=i,a.endAngle=o,a.counterClockwise=s,a.isCollidable=r,a}return a(e,t),e.prototype.draw=function(t,e){t.lineCap="round",t.strokeStyle=e,1==this.isCollidable&&(t.beginPath(),t.arc(this.center.x,this.center.y,this.radius,this.startAngle,this.endAngle,this.counterClockwise),t.stroke(),t.closePath())},e.prototype.drawDebug=function(t,e){var n=this.counterClockwise?-Math.PI:Math.PI;n+=this.endAngle,t.lineCap="round",(0,o.drawDot)(this.center.x,this.center.y,5,"#000000"),(0,o.drawArrow)(t,new s.Vector(this.endPoint.x,this.endPoint.y),new s.Vector(this.endPoint.x+this.radius*Math.cos(n),this.endPoint.y+this.radius*Math.sin(n)))},Object.defineProperty(e.prototype,"endPoint",{get:function(){return new s.Vector(this.center.x+this.radius*Math.cos(this.endAngle),this.center.y+this.radius*Math.sin(this.endAngle))},enumerable:!1,configurable:!0}),e.prototype.isCounterClockwise=function(){return this.counterClockwise},e}(r.default)},"./src/CollisionHandler.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>s});var i=n("./src/ArcSegment.ts"),o=n("./src/LineSegment.ts");const s=function(){function t(t){this.snakes=t}return t.prototype.checkCollisions=function(){var t=this;return this.snakes.forEach((function(e){e.isAlive&&e.head.isCollidable&&t.snakes.forEach((function(n){e.head instanceof o.default?n.segments.forEach((function(n){if(n.isCollidable&&n!==e.head)if(n instanceof o.default){if(t.checkLineToLineCollision(e.head,n))return void e.kill()}else n instanceof i.default&&t.checkLineToArcCollision(e.head,n)})):e.head instanceof i.default&&n.segments.forEach((function(n){n instanceof o.default?t.checkLineToArcCollision(n,e.head):n instanceof i.default&&t.checkArcToArcCollision(e.head,n)}))}))})),null},t.prototype.checkLineToLineCollision=function(t,e){var n=((e.endPoint.x-e.startPoint.x)*(t.startPoint.y-e.startPoint.y)-(e.endPoint.y-e.startPoint.y)*(t.startPoint.x-e.startPoint.x))/((e.endPoint.y-e.startPoint.y)*(t.endPoint.x-t.startPoint.x)-(e.endPoint.x-e.startPoint.x)*(t.endPoint.y-t.startPoint.y)),i=((t.endPoint.x-t.startPoint.x)*(t.startPoint.y-e.startPoint.y)-(t.endPoint.y-t.startPoint.y)*(t.startPoint.x-e.startPoint.x))/((e.endPoint.y-e.startPoint.y)*(t.endPoint.x-t.startPoint.x)-(e.endPoint.x-e.startPoint.x)*(t.endPoint.y-t.startPoint.y));return n>=0&&n<=1&&i>=0&&i<=1},t.prototype.checkLineToArcCollision=function(t,e){return!1},t.prototype.checkArcToArcCollision=function(t,e){return!1},t}()},"./src/Drawer.ts":(t,e,n)=>{n.r(e),n.d(e,{drawArrow:()=>a,drawDot:()=>r,drawGrid:()=>s});var i=n("./node_modules/vector2d/src/Vec2D.js"),o=n("./src/index.ts");function s(){o.backgroundCanvasCtx.clearRect(0,0,o.backgroundCanvas.width,o.backgroundCanvas.height),o.backgroundCanvasCtx.strokeStyle="rgba(0, 0, 0, 0.3)",o.backgroundCanvasCtx.lineWidth=2;for(var t=o.gridSize;t<o.backgroundCanvas.width;t+=o.gridSize)o.backgroundCanvasCtx.beginPath(),o.backgroundCanvasCtx.moveTo(t,0),o.backgroundCanvasCtx.lineTo(t,o.backgroundCanvas.height),o.backgroundCanvasCtx.stroke();for(var e=o.gridSize;e<o.backgroundCanvas.height;e+=o.gridSize)o.backgroundCanvasCtx.beginPath(),o.backgroundCanvasCtx.moveTo(0,e),o.backgroundCanvasCtx.lineTo(o.backgroundCanvas.width,e),o.backgroundCanvasCtx.stroke()}function r(t,e,n,i){o.backgroundCanvasCtx.beginPath(),o.backgroundCanvasCtx.arc(t,e,n,0,2*Math.PI,!1),o.backgroundCanvasCtx.fillStyle=i,o.backgroundCanvasCtx.fill(),o.backgroundCanvasCtx.closePath()}function a(t,e,n){if(e.x!=n.x&&e.y!=n.y){var o=Math.atan2(n.y-e.y,n.x-e.x),s=10,r=new i.Vector(n.x,n.y);r.x-=11.5*Math.cos(o),r.y-=11.5*Math.sin(o),t.beginPath(),t.moveTo(e.x,e.y),t.lineTo(r.x,r.y),t.strokeStyle="#bbbbbb",t.lineWidth=10,t.stroke(),t.beginPath(),t.moveTo(r.x,r.y),t.lineTo(r.x-s*Math.cos(o-Math.PI/7),r.y-s*Math.sin(o-Math.PI/7)),t.lineTo(r.x-s*Math.cos(o+Math.PI/7),r.y-s*Math.sin(o+Math.PI/7)),t.lineTo(r.x,r.y),t.lineTo(r.x-s*Math.cos(o-Math.PI/7),r.y-s*Math.sin(o-Math.PI/7)),t.strokeStyle="#bbbbbb",t.lineWidth=10,t.stroke(),t.fillStyle="#bbbbbb",t.fill(),t.closePath()}}},"./src/InputManager.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>r});var i=n("./node_modules/vector2d/src/Vec2D.js"),o=n("./src/ArcSegment.ts"),s=n("./src/LineSegment.ts");const r=function(){function t(t,e,n){this.keyMap={},window.addEventListener("keydown",this.onKeyDown.bind(this)),window.addEventListener("keyup",this.onKeyUp.bind(this)),this.snake=t,this.leftKey=e,this.rightKey=n}return t.prototype.onKeyDown=function(t){if(this.snake.isAlive){var e=t.key.toUpperCase();if(e==this.leftKey||e==this.rightKey){if(this.keyMap[this.rightKey]&&e==this.leftKey)this.keyMap[this.rightKey]=!1;else if(this.keyMap[this.leftKey]&&e==this.rightKey)this.keyMap[this.leftKey]=!1;else if(this.keyMap[e])return;this.keyMap[e]=!0;var n=this.snake.head,r=n.endPoint,a=0;n instanceof s.default?(a+=Math.PI/2,e==this.rightKey&&this.snake.addSegment(new o.default(new i.Vector(r.x+this.snake.turnRadius*Math.cos(this.snake.head.endAngle+a),r.y+this.snake.turnRadius*Math.sin(this.snake.head.endAngle+a)),this.snake.turnRadius,this.snake.head.endAngle-a,this.snake.head.endAngle-a,!1,n.isCollidable)),e==this.leftKey&&this.snake.addSegment(new o.default(new i.Vector(r.x+this.snake.turnRadius*Math.cos(this.snake.head.endAngle-a),r.y+this.snake.turnRadius*Math.sin(this.snake.head.endAngle-a)),this.snake.turnRadius,this.snake.head.endAngle+a,this.snake.head.endAngle+a,!0,n.isCollidable))):n instanceof o.default&&(a=n.isCounterClockwise?-Math.PI:Math.PI,e==this.rightKey&&this.snake.addSegment(new o.default(new i.Vector(r.x-this.snake.turnRadius*Math.cos(this.snake.head.endAngle+a),r.y-this.snake.turnRadius*Math.sin(this.snake.head.endAngle+a)),this.snake.turnRadius,this.snake.head.endAngle-a,this.snake.head.endAngle-a,!1,n.isCollidable)),e==this.leftKey&&this.snake.addSegment(new o.default(new i.Vector(r.x-this.snake.turnRadius*Math.cos(this.snake.head.endAngle-a),r.y-this.snake.turnRadius*Math.sin(this.snake.head.endAngle-a)),this.snake.turnRadius,this.snake.head.endAngle+a,this.snake.head.endAngle+a,!0,n.isCollidable)))}}},t.prototype.onKeyUp=function(t){if(this.snake.isAlive){var e=t.key.toUpperCase();if(this.keyMap[e]){this.keyMap[e]=!1,console.log(this.snake.head);var n=this.snake.head,r=n.endPoint,a=n.endAngle;e==this.leftKey&&n instanceof o.default&&n.isCounterClockwise()?a-=Math.PI/2:e==this.rightKey&&n instanceof o.default&&!n.isCounterClockwise()&&(a+=Math.PI/2),this.snake.addSegment(new s.default(r,new i.Vector(r.x+5*Math.cos(a),r.y+5*Math.sin(a)),n.isCollidable,a)),console.log(this.snake.head)}}},t.prototype.dispose=function(){window.removeEventListener("keydown",this.onKeyDown.bind(this)),window.removeEventListener("keyup",this.onKeyUp.bind(this))},t}()},"./src/LineSegment.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>r});var i,o=n("./src/Segment.ts"),s=(i=function(t,e){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},i(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});const r=function(t){function e(e,n,i,o){var s=t.call(this)||this;return s.isCollidable=!0,s.startPoint=e,s.endPoint=n,s.isCollidable=i,s.endAngle=o,s}return s(e,t),e.prototype.draw=function(t,e){t.strokeStyle=e,t.lineCap="round",1==this.isCollidable&&(t.beginPath(),t.moveTo(this.startPoint.x,this.startPoint.y),t.lineTo(this.endPoint.x,this.endPoint.y),t.stroke(),t.closePath())},e.prototype.calcEndAngle=function(){return Math.atan((this.endPoint.y-this.startPoint.y)/(this.endPoint.x-this.startPoint.x))},e}(o.default)},"./src/ParticleSystem/Emitter.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>r});var i=n("./src/ParticleSystem/Particle.ts"),o=n("./src/ParticleSystem/ParticleSystemUtils.ts"),s=function(){return s=Object.assign||function(t){for(var e,n=1,i=arguments.length;n<i;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t},s.apply(this,arguments)};const r=function(){function t(t,e,n,i,o,s,r,a,c,h,d){void 0===o&&(o="circle"),void 0===a&&(a=!0),void 0===c&&(c=!0),void 0===d&&(d=0),this.aliveParticles=[],this.ticks=0,this.position=t,this.emitTime=e,this.size=n,this.speed=i,this.shape=o,this.color=s,this.canvasCtx=r,this.fadeColor=a,this.fadeSize=c,this.particleMaxAge=h,this.emitTimeMillis=d}return t.prototype.tick=function(t){this.emitTimeMillis+this.particleMaxAge<0||(this.emitTimeMillis-=t,this.ticks%this.emitTime==0&&this.emitTimeMillis>0&&(this.aliveParticles.push(new i.default(this.position.clone(),(0,o.getRandomDirection)(),this.size,this.speed,this.shape,s({},this.color),this.canvasCtx,this.particleMaxAge,this.fadeColor,this.fadeSize)),this.aliveParticles.push(new i.default(this.position.clone(),(0,o.getRandomDirection)(),this.size,this.speed,this.shape,s({},this.color),this.canvasCtx,this.particleMaxAge,this.fadeColor,this.fadeSize)),this.aliveParticles.push(new i.default(this.position.clone(),(0,o.getRandomDirection)(),this.size,this.speed,this.shape,s({},this.color),this.canvasCtx,this.particleMaxAge,this.fadeColor,this.fadeSize))),this.aliveParticles.forEach((function(e){e.tick(t)})),this.aliveParticles=this.aliveParticles.filter((function(t){return t.age>0})),this.ticks++)},t.prototype.draw=function(){this.aliveParticles.forEach((function(t){t.draw()}))},t}()},"./src/ParticleSystem/Particle.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>i});const i=function(){function t(t,e,n,i,o,s,r,a,c,h){void 0===o&&(o="circle"),this.position=t,this.velocity=e,this.size=n,this.speed=i,this.shape=o,this.color=s,this.canvasCtx=r,this.fadeColor=c,this.fadeSize=h,this.age=a,this.colorFadeAmount=this.color.a/this.age,this.sizeFadeAmount=this.size/this.age}return t.prototype.tick=function(t){this.position.add(this.velocity.clone().multiplyByScalar(t*this.speed)),this.fadeColor&&(this.color.a-=this.colorFadeAmount),this.fadeSize&&(this.size-=this.sizeFadeAmount),this.age--},t.prototype.draw=function(){switch(this.canvasCtx.moveTo(this.position.x,this.position.y),this.canvasCtx.fillStyle="rgba(".concat(this.color.r,",").concat(this.color.g,", ").concat(this.color.b,", ").concat(this.color.a,")"),this.canvasCtx.beginPath(),this.shape){case"circle":this.canvasCtx.arc(this.position.x,this.position.y,this.size,0,2*Math.PI),this.canvasCtx.fill();break;case"square":this.canvasCtx.fillRect(this.position.x-this.size,this.position.y-this.size,2*this.size,2*this.size)}this.canvasCtx.closePath()},t}()},"./src/ParticleSystem/ParticleSystemUtils.ts":(t,e,n)=>{n.r(e),n.d(e,{getRandomDirection:()=>o,hexToRgb:()=>s});var i=n("./node_modules/vector2d/src/Vec2D.js");function o(){return new i.Vector(2*Math.random()-1,2*Math.random()-1)}function s(t){var e=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(t);return e?{r:parseInt(e[1],16),g:parseInt(e[2],16),b:parseInt(e[3],16)}:null}},"./src/Segment.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>i});const i=function(){}},"./src/Snake.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>h});var i=n("./node_modules/vector2d/src/Vec2D.js"),o=n("./src/ArcSegment.ts"),s=n("./src/LineSegment.ts"),r=n("./src/ParticleSystem/Emitter.ts"),a=n("./src/ParticleSystem/ParticleSystemUtils.ts"),c=function(){return c=Object.assign||function(t){for(var e,n=1,i=arguments.length;n<i;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t},c.apply(this,arguments)};const h=function(){function t(t,e,n){this.segments=[],this.isAlive=!0,this.turnRadius=130,this.emitter=null,this.addSegment(t),this.color=e,this.canvasCtx=n}return t.prototype.addSegment=function(t){this.segments.push(t)},Object.defineProperty(t.prototype,"head",{get:function(){return this.segments.slice(-1).pop()},enumerable:!1,configurable:!0}),t.prototype.draw=function(){var t=this;this.canvasCtx.lineWidth=12,this.segments.forEach((function(e,n){e.draw(t.canvasCtx,t.color),t.head==e&&(e instanceof o.default?(t.canvasCtx.beginPath(),t.canvasCtx.arc(e.center.x,e.center.y,e.radius,e.endAngle,e.endAngle,e.isCounterClockwise()),t.canvasCtx.stroke(),t.canvasCtx.closePath()):e instanceof s.default&&(t.canvasCtx.beginPath(),t.canvasCtx.moveTo(e.endPoint.x,e.endPoint.y),t.canvasCtx.lineTo(e.endPoint.x,e.endPoint.y),t.canvasCtx.stroke(),t.canvasCtx.closePath()))}))},t.prototype.move=function(t){if(this.isAlive){var e=this.head;if(e)if(e instanceof s.default){var n=t*Math.cos(e.endAngle),r=t*Math.sin(e.endAngle);if(e.isCollidable&&Math.random()>.99)return void this.addSegment(new s.default(e.endPoint,new i.Vector(e.endPoint.x+n,e.endPoint.y+r),!1,e.endAngle));if(!e.isCollidable&&Math.random()>.97)return void this.addSegment(new s.default(e.endPoint,new i.Vector(e.endPoint.x+n,e.endPoint.y+r),!0,e.endAngle));var a=new i.Vector(e.endPoint.x+n,e.endPoint.y+r);e.endPoint=a}else if(e instanceof o.default){var c=t/e.radius;if(e.isCollidable&&Math.random()>.99)return void this.addSegment(new o.default(e.center,e.radius,e.endAngle,e.endAngle,e.isCounterClockwise(),!1));if(!e.isCollidable&&Math.random()>.97)return void this.addSegment(new o.default(e.center,e.radius,e.endAngle,e.endAngle,e.isCounterClockwise(),!0));e.isCounterClockwise()?e.endAngle=e.endAngle-c:e.endAngle=e.endAngle+c}}},t.prototype.kill=function(){console.log("SNAKE DEAD"),this.isAlive=!1,this.emitter=new r.default(this.head.endPoint,1,7,2,"circle",c(c({},(0,a.hexToRgb)(this.color)),{a:1}),this.canvasCtx,!0,!0,70,4)},t.prototype.updateEmitter=function(t){this.emitter&&(this.emitter.tick(t),this.emitter.draw())},t}()},"./src/index.ts":(t,e,n)=>{n.r(e),n.d(e,{backgroundCanvas:()=>f,backgroundCanvasCtx:()=>y,fps:()=>d,gameCanvas:()=>l,gameCanvasCtx:()=>u,gridSize:()=>p});var i=n("./node_modules/vector2d/src/Vec2D.js"),o=n("./src/Drawer.ts"),s=n("./src/InputManager.ts"),r=n("./src/LineSegment.ts"),a=n("./src/Snake.ts"),c=n("./src/CollisionHandler.ts"),h=document.createElement("div");h.style.position="absolute",h.style.top="10px",h.style.left="10px",h.style.color="black",document.body.appendChild(h);var d=60,l=document.getElementById("game-canvas"),u=l.getContext("2d"),f=document.getElementById("background-canvas"),y=f.getContext("2d");f.width=f.getBoundingClientRect().width,f.height=f.getBoundingClientRect().height,l.width=l.getBoundingClientRect().width,l.height=l.getBoundingClientRect().height;var p=60,g=0,v=performance.now()/10;window.addEventListener("resize",(function(){l.width=l.getBoundingClientRect().width,l.height=l.getBoundingClientRect().height,f.width=f.getBoundingClientRect().width,f.height=f.getBoundingClientRect().height,(0,o.drawGrid)(),x.draw(),b.draw()})),(0,o.drawGrid)();var x=new a.default(new r.default(new i.Vector(100,100),new i.Vector(110,110),!0,Math.PI/4),"#ff0088",u),b=new a.default(new r.default(new i.Vector(300,300),new i.Vector(295,295),!0,Math.PI/4),"#33ee55",u),P=(new s.default(x,"A","D"),new s.default(b,"J","L"),new c.default([x,b]));x.draw(),b.draw(),requestAnimationFrame((function t(){++g%10==0&&(d=function(){var t=performance.now()/10,e=t-v,n=Math.round(1e3/e);return v=t,n}(),h.innerText="FPS: ".concat(d)),u.clearRect(0,0,l.width,l.height),x.draw(),x.move(2),b.draw(),b.move(2),x.updateEmitter(.3),b.updateEmitter(.3),P.checkCollisions(),requestAnimationFrame(t)}))},"./node_modules/vector2d/src/AbstractVector.js":(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=[1,10,100,1e3,1e4,1e5,1e6,1e7,1e8,1e9,1e10],i=function(){function t(t){this.ctor=t}return t.prototype.setAxes=function(t,e){return this.x=t,this.y=e,this},t.prototype.getX=function(){return this.x},t.prototype.setX=function(t){return this.x=t,this},t.prototype.getY=function(){return this.y},t.prototype.setY=function(t){return this.y=t,this},t.prototype.toString=function(t){return void 0===t&&(t=!1),t?"("+Math.round(this.x)+", "+Math.round(this.y)+")":"("+this.x+", "+this.y+")"},t.prototype.toArray=function(){return[this.x,this.y]},t.prototype.toObject=function(){return{x:this.x,y:this.y}},t.prototype.add=function(t){return this.x+=t.x,this.y+=t.y,this},t.prototype.subtract=function(t){return this.x-=t.x,this.y-=t.y,this},t.prototype.equals=function(t){return t.x===this.x&&t.y===this.y},t.prototype.multiplyByVector=function(t){return this.x*=t.x,this.y*=t.y,this},t.prototype.mulV=function(t){return this.multiplyByVector(t)},t.prototype.divideByVector=function(t){return this.x/=t.x,this.y/=t.y,this},t.prototype.divV=function(t){return this.divideByVector(t)},t.prototype.multiplyByScalar=function(t){return this.x*=t,this.y*=t,this},t.prototype.mulS=function(t){return this.multiplyByScalar(t)},t.prototype.divideByScalar=function(t){return this.x/=t,this.y/=t,this},t.prototype.divS=function(t){return this.divideByScalar(t)},t.prototype.normalise=function(){return this.divideByScalar(this.magnitude())},t.prototype.normalize=function(){return this.normalise()},t.prototype.unit=function(){return this.normalise()},t.prototype.magnitude=function(){var t=this.x,e=this.y;return Math.sqrt(t*t+e*e)},t.prototype.length=function(){return this.magnitude()},t.prototype.lengthSq=function(){var t=this.x,e=this.y;return t*t+e*e},t.prototype.dot=function(t){return t.x*this.x+t.y*this.y},t.prototype.cross=function(t){return this.x*t.y-this.y*t.x},t.prototype.reverse=function(){return this.x=-this.x,this.y=-this.y,this},t.prototype.abs=function(){return this.x=Math.abs(this.x),this.y=Math.abs(this.y),this},t.prototype.zero=function(){return this.x=this.y=0,this},t.prototype.distance=function(t){var e=this.x-t.x,n=this.y-t.y;return Math.sqrt(e*e+n*n)},t.prototype.rotate=function(t){var e=Math.cos(t),n=Math.sin(t),i=this.x,o=this.y;return this.x=i*e-o*n,this.y=i*n+o*e,this},t.prototype.round=function(t){void 0===t&&(t=2);var e=n[t];return this.x=(.5+this.x*e<<0)/e,this.y=(.5+this.y*e<<0)/e,this},t.prototype.clone=function(){return new this.ctor(this.x,this.y)},t}();e.AbstractVector=i},"./node_modules/vector2d/src/ArrayVector.js":function(t,e,n){var i,o=this&&this.__extends||(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var s=function(t){function e(n,i){var o=t.call(this,e)||this;return o.axes=[n,i],o.ctor=e,o}return o(e,t),Object.defineProperty(e.prototype,"x",{get:function(){return this.axes[0]},set:function(t){this.axes[0]=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"y",{get:function(){return this.axes[1]},set:function(t){this.axes[1]=t},enumerable:!0,configurable:!0}),e}(n("./node_modules/vector2d/src/AbstractVector.js").AbstractVector);e.ArrayVector=s},"./node_modules/vector2d/src/Float32Vector.js":function(t,e,n){var i,o=this&&this.__extends||(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var s=function(t){function e(n,i){var o=t.call(this,e)||this;return o.axes=new Float32Array(2),o.axes[0]=n,o.axes[1]=i,o}return o(e,t),Object.defineProperty(e.prototype,"x",{get:function(){return this.axes[0]},set:function(t){this.axes[0]=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"y",{get:function(){return this.axes[1]},set:function(t){this.axes[1]=t},enumerable:!0,configurable:!0}),e}(n("./node_modules/vector2d/src/AbstractVector.js").AbstractVector);e.Float32Vector=s},"./node_modules/vector2d/src/Vec2D.js":(t,e,n)=>{function i(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}Object.defineProperty(e,"__esModule",{value:!0}),i(n("./node_modules/vector2d/src/AbstractVector.js")),i(n("./node_modules/vector2d/src/ArrayVector.js")),i(n("./node_modules/vector2d/src/Float32Vector.js")),i(n("./node_modules/vector2d/src/Vector.js"))},"./node_modules/vector2d/src/Vector.js":function(t,e,n){var i,o=this&&this.__extends||(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var s=function(t){function e(n,i){var o=t.call(this,e)||this;return o._x=n,o._y=i,o}return o(e,t),Object.defineProperty(e.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t},enumerable:!0,configurable:!0}),e}(n("./node_modules/vector2d/src/AbstractVector.js").AbstractVector);e.Vector=s}},e={};function n(i){var o=e[i];if(void 0!==o)return o.exports;var s=e[i]={exports:{}};return t[i].call(s.exports,s,s.exports,n),s.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var i in e)n.o(e,i)&&!n.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n("./src/index.ts")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,