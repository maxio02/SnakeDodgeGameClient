/*! For license information please see login.js.LICENSE.txt */
(()=>{"use strict";var e={"./src/MenuManager/login.ts":(e,t,o)=>{o.r(t),o.d(t,{handleReadyState:()=>w,handleRoomAction:()=>E,showErrorAnimation:()=>M,showRoomView:()=>O,updateButton:()=>v,updateColorPicker:()=>P,updatePlayerColor:()=>k,updateRoomList:()=>R});var n=o("./src/ViewModels/Player.ts"),r=o("./src/ViewModels/Room.ts"),s=o("./src/WebSocketClient/websocket.ts"),a=null,i=null,c=document.getElementById("roomCodeInput"),l=document.getElementById("usernameInput"),d=document.getElementById("joinButton"),u=document.getElementById("readyButton"),y=document.getElementById("login-div"),m=document.getElementById("room-div"),p=document.getElementById("color-picker"),g=document.getElementById("room-users-list"),f=document.getElementById("room-code"),b=document.getElementById("player-count"),h=document.getElementById("color-picker-container"),S=document.getElementById("start-progress-bar");function v(){""==l.value.trim()?d.disabled=!0:d.disabled=!1,5==c.value.trim().length?d.textContent="JOIN ROOM":d.textContent="CREATE ROOM"}function E(){var e=l.value;e&&(i=new n.Player(e),"CREATE ROOM"===d.innerText?(0,s.createRoom)(l.value):(0,s.joinRoom)(c.value.toUpperCase(),l.value))}function w(){i.isReady=!i.isReady,(0,s.setPlayerData)(i,a.getCode()),i.isReady?(u.classList.remove("red-button"),u.classList.add("green-button")):(u.classList.add("red-button"),u.classList.remove("green-button"))}function O(e){var t=JSON.parse(e.toString());a=new r.Room(t.room.code,t.room.host,t.room.players,t.room.maxSize),i.username==a.getHost().username&&document.getElementById("startButton").classList.remove("display-none"),h.style.backgroundColor=i.color,p.value=i.color,document.getElementById("color-label").style.color=C(p.value,"#FFFFFF","#000000"),y.classList.add("display-none"),m.classList.add("display-flex"),c.value=a.getCode(),f.innerHTML=a.getCode(),(0,s.setPlayerData)(i,a.getCode()),R(e)}function R(e){var t,o,n=JSON.parse(e.toString());a.setPlayers(n.room.players),a.setHost(n.room.host),a.setMaxSize(n.room.maxSize),b.innerHTML="".concat(a.getPlayers().length,"/").concat(a.getMaxSize()),g.innerHTML="",a.getPlayers().forEach((function(e){var t=document.createElement("li");t.textContent=e.username+"",e.username==a.getHost().username?t.insertAdjacentHTML("afterbegin",'<i class="fa-solid fa-crown" style="color: '.concat(e.color,';"></i>')):t.insertAdjacentHTML("afterbegin",'<i class="fa-solid fa-circle" style="color: '.concat(e.color,'; margin-left: 4px"></i>')),e.isReady?t.insertAdjacentHTML("beforeend",' <i class="fa-solid fa-circle" style="color: #37cb48;"></i>'):t.insertAdjacentHTML("beforeend",' <i class="fa-solid fa-circle" style="color: #cb3737;"></i>'),g.appendChild(t)})),t=a.getPlayers().filter((function(e){return e.isReady})).length,0!=(o=a.getMaxSize())&&(S.style.width=Math.floor(t/o*100)+"%")}function M(){d.classList.add("red-button"),d.classList.add("wiggle"),setTimeout((function(){d.classList.remove("red-button"),d.classList.remove("wiggle")}),600)}function P(){h.style.backgroundColor=p.value}function k(){i.color=p.value,document.getElementById("color-label").style.color=C(p.value,"#FFFFFF","#000000"),(0,s.setPlayerData)(i,a.getCode())}function C(e,t,o){var n="#"===e.charAt(0)?e.substring(1,7):e,r=[parseInt(n.substring(0,2),16)/255,parseInt(n.substring(2,4),16)/255,parseInt(n.substring(4,6),16)/255].map((function(e){return e<=.03928?e/12.92:Math.pow((e+.055)/1.055,2.4)}));return.2126*r[0]+.7152*r[1]+.0722*r[2]>.4?o:t}window.onload=function(){v()},window.updateButton=v,window.handleRoomAction=E,window.handleReadyState=w,window.updateColorPicker=P,window.updatePlayerColor=k,window.startGame=function(){}},"./src/ViewModels/Player.ts":(e,t,o)=>{o.r(t),o.d(t,{Player:()=>n});var n=function(){function e(e,t){void 0===t&&(t=!1),this.username=e,this.isReady=t,this.color="#000000".replace(/0/g,(function(){return(~~(16*Math.random())).toString(16)}))}return e.prototype.toJSON=function(){return{username:this.username,isReady:this.isReady,color:this.color}},e}()},"./src/ViewModels/Room.ts":(e,t,o)=>{o.r(t),o.d(t,{Room:()=>n});var n=function(){function e(e,t,o,n){void 0===n&&(n=5),this.players=[],this.code=e,this.host=t,this.maxSize=n,null!=o?this.players=o:this.addPlayer(t)}return e.prototype.addPlayer=function(e){return!(this.players.length>=this.maxSize||(this.players.push(e),0))},e.prototype.getCode=function(){return this.code},e.prototype.getPlayers=function(){return this.players},e.prototype.getHost=function(){return this.host},e.prototype.setHost=function(e){this.host=e},e.prototype.setPlayers=function(e){this.players=e},e.prototype.setMaxSize=function(e){this.maxSize=e},e.prototype.getMaxSize=function(){return this.maxSize},e}()},"./src/WebSocketClient/websocket.ts":(e,t,o)=>{o.r(t),o.d(t,{createRoom:()=>s,joinRoom:()=>a,sendKeyEventToServer:()=>c,setPlayerData:()=>i});var n,r=o("./src/MenuManager/login.ts");function s(e){n&&n.readyState===WebSocket.OPEN?n.send(JSON.stringify({type:"CREATE_ROOM",username:e})):console.error("WebSocket connection is not open")}function a(e,t){n&&n.readyState===WebSocket.OPEN?n.send(JSON.stringify({type:"JOIN_ROOM",roomCode:e,username:t})):console.error("WebSocket connection is not open")}function i(e,t){n&&n.readyState===WebSocket.OPEN?n.send(JSON.stringify({type:"PLAYER_DATA",player:e,roomCode:t})):console.error("WebSocket connection is not open")}function c(e,t){n&&n.readyState===WebSocket.OPEN?n.send(JSON.stringify({type:"KEY_EVENT",key:e,pressed:t})):console.error("WebSocket connection is not open")}(n=new WebSocket("ws://".concat(window.location.hostname,":8080"))).onopen=function(){console.log("WebSocket connection established")},n.onmessage=function(e){var t=JSON.parse(e.data);switch(console.log("Message from server:",t),t.type){case"JOINED_ROOM":(0,r.showRoomView)(e.data);break;case"ROOM_DOES_NOT_EXIST":(0,r.showErrorAnimation)();break;case"ROOM_DATA":(0,r.updateRoomList)(e.data);break;case"GAMEPLAY":break;case"ERROR":alert("Error: ".concat(t.message))}},n.onclose=function(){console.log("WebSocket connection closed")},n.onerror=function(e){console.error("WebSocket error:",e)}}},t={};function o(n){var r=t[n];if(void 0!==r)return r.exports;var s=t[n]={exports:{}};return e[n](s,s.exports,o),s.exports}o.d=(e,t)=>{for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o("./src/MenuManager/login.ts")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,