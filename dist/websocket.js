/*! For license information please see websocket.js.LICENSE.txt */
(()=>{"use strict";var t={"./src/ArcSegment.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>c});var o,i=n("./src/Drawer.ts"),r=n("./node_modules/vector2d/src/Vec2D.js"),s=n("./src/Segment.ts"),a=(o=function(t,e){return o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},o(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});const c=function(t){function e(e,n,o,i,r,s){var a=t.call(this)||this;return a.center=e,a.radius=n,a.startAngle=o,a.endAngle=i,a._counterClockwise=r,a.isCollidable=s,a}return a(e,t),e.prototype.draw=function(t,e){var n=t.canvas.width/2e3,o=t.canvas.height/2e3;t.lineCap="round",t.strokeStyle=e,!0===this.isCollidable&&(t.beginPath(),t.arc(this.center.x*n,this.center.y*o,this.radius*Math.min(n,o),this.startAngle,this.endAngle,this._counterClockwise),t.stroke(),t.closePath())},e.prototype.drawDebug=function(t,e){var n=this._counterClockwise?-Math.PI:Math.PI;n+=this.endAngle,t.lineCap="round",(0,i.drawDot)(this.center.x,this.center.y,5,"#000000"),(0,i.drawArrow)(t,new r.Vector(this.endPoint.x,this.endPoint.y),new r.Vector(this.endPoint.x+this.radius*Math.cos(n),this.endPoint.y+this.radius*Math.sin(n))),(0,i.drawArc)(this.center.x,this.center.y,this.radius,0,0,!1)},Object.defineProperty(e.prototype,"endPoint",{get:function(){return new r.Vector(this.center.x+this.radius*Math.cos(this.endAngle),this.center.y+this.radius*Math.sin(this.endAngle))},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"penpendicularEndAngle",{get:function(){return this.isCounterClockwise?this.endAngle-Math.PI/2:this.endAngle+Math.PI/2},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"penpendicularStartAngle",{get:function(){return this.isCounterClockwise?this.startAngle-Math.PI/2:this.startAngle+Math.PI/2},enumerable:!1,configurable:!0}),e.prototype.isCounterClockwise=function(){return this._counterClockwise},e.prototype.getContinuingSegment=function(t){return new e(this.center.clone().add(t),this.radius,this.endAngle,this.endAngle,this._counterClockwise,this.isCollidable)},e}(s.default)},"./src/Drawer.ts":(t,e,n)=>{n.r(e),n.d(e,{drawArc:()=>a,drawArrow:()=>c,drawDot:()=>s,drawGrid:()=>r});var o=n("./node_modules/vector2d/src/Vec2D.js"),i=n("./src/index.ts");function r(){var t=i.backgroundCanvasCtx.canvas.width/2e3,e=i.backgroundCanvasCtx.canvas.height/2e3;i.backgroundCanvasCtx.clearRect(0,0,i.backgroundCanvas.width,i.backgroundCanvas.height),i.backgroundCanvasCtx.strokeStyle="rgba(0, 0, 0, 0.3)",i.backgroundCanvasCtx.lineWidth=2;for(var n=i.gridSize*t;n<i.backgroundCanvas.width;n+=i.gridSize*t)i.backgroundCanvasCtx.beginPath(),i.backgroundCanvasCtx.moveTo(n,0),i.backgroundCanvasCtx.lineTo(n,i.backgroundCanvas.height),i.backgroundCanvasCtx.stroke();for(var o=i.gridSize*e;o<i.backgroundCanvas.height;o+=i.gridSize*e)i.backgroundCanvasCtx.beginPath(),i.backgroundCanvasCtx.moveTo(0,o),i.backgroundCanvasCtx.lineTo(i.backgroundCanvas.width,o),i.backgroundCanvasCtx.stroke()}function s(t,e,n,o){i.backgroundCanvasCtx.beginPath(),i.backgroundCanvasCtx.arc(t,e,n,0,2*Math.PI,!1),i.backgroundCanvasCtx.fillStyle=o,i.backgroundCanvasCtx.fill(),i.backgroundCanvasCtx.closePath()}function a(t,e,n,o,r,s){i.backgroundCanvasCtx.lineCap="round",i.backgroundCanvasCtx.strokeStyle="#3466aa",i.backgroundCanvasCtx.beginPath(),i.backgroundCanvasCtx.arc(t,e,n,0,2*Math.PI,s),i.backgroundCanvasCtx.lineWidth=5,i.backgroundCanvasCtx.stroke(),i.backgroundCanvasCtx.closePath()}function c(t,e,n){if(e.x!=n.x&&e.y!=n.y){var i=Math.atan2(n.y-e.y,n.x-e.x),r=10,s=new o.Vector(n.x,n.y);s.x-=11.5*Math.cos(i),s.y-=11.5*Math.sin(i),t.beginPath(),t.moveTo(e.x,e.y),t.lineTo(s.x,s.y),t.strokeStyle="#bbbbbb",t.lineWidth=10,t.stroke(),t.beginPath(),t.moveTo(s.x,s.y),t.lineTo(s.x-r*Math.cos(i-Math.PI/7),s.y-r*Math.sin(i-Math.PI/7)),t.lineTo(s.x-r*Math.cos(i+Math.PI/7),s.y-r*Math.sin(i+Math.PI/7)),t.lineTo(s.x,s.y),t.lineTo(s.x-r*Math.cos(i-Math.PI/7),s.y-r*Math.sin(i-Math.PI/7)),t.strokeStyle="#bbbbbb",t.lineWidth=10,t.stroke(),t.fillStyle="#bbbbbb",t.fill(),t.closePath()}}},"./src/InputManager.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>i});var o=n("./src/WebSocketClient/websocket.ts");const i=function(){function t(t,e,n){this._keyMap={},window.addEventListener("keydown",this.onKeyDown.bind(this)),window.addEventListener("keyup",this.onKeyUp.bind(this)),this._snake=t,this._leftKey=e,this._rightKey=n}return t.prototype.onKeyDown=function(t){if(this._snake.isAlive){var e=t.key.toUpperCase();if(e==this._leftKey||e==this._rightKey){if(this._keyMap[this._rightKey]&&e===this._leftKey)this._keyMap[this._rightKey]=!1;else if(this._keyMap[this._leftKey]&&e===this._rightKey)this._keyMap[this._leftKey]=!1;else if(this._keyMap[e])return;this._keyMap[e]=!0,(0,o.sendKeyEventToServer)(e===this._rightKey?1:0,!0)}}},t.prototype.onKeyUp=function(t){if(this._snake.isAlive){var e=t.key.toUpperCase();this._keyMap[e]&&(this._keyMap[e]=!1,(0,o.sendKeyEventToServer)(e===this._rightKey?1:0,!1))}},t.prototype.dispose=function(){window.removeEventListener("keydown",this.onKeyDown.bind(this)),window.removeEventListener("keyup",this.onKeyUp.bind(this))},t}()},"./src/LineSegment.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>s});var o,i=n("./src/Segment.ts"),r=(o=function(t,e){return o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},o(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});const s=function(t){function e(e,n,o,i){var r=t.call(this)||this;return r.isCollidable=!0,r.startPoint=e,r.endPoint=n,r.isCollidable=o,r.endAngle=i,r}return r(e,t),e.prototype.draw=function(t,e){var n=t.canvas.width/2e3,o=t.canvas.height/2e3;t.strokeStyle=e,t.lineCap="round",!0===this.isCollidable&&(t.beginPath(),t.moveTo(this.startPoint.x*n,this.startPoint.y*o),t.lineTo(this.endPoint.x*n,this.endPoint.y*o),t.stroke(),t.closePath())},Object.defineProperty(e.prototype,"length",{get:function(){return Math.sqrt(Math.pow(this.startPoint.x-this.endPoint.x,2)+Math.pow(this.startPoint.y-this.endPoint.y,2))},enumerable:!1,configurable:!0}),e.prototype.getContinuingSegment=function(t){var n=this.endPoint.clone().add(t);return new e(n,n,this.isCollidable,this.endAngle)},e}(i.default)},"./src/MenuManager/login.ts":(t,e,n)=>{n.r(e),n.d(e,{currentPlayer:()=>c,currentRoom:()=>a,handleReadyState:()=>S,handleRoomAction:()=>k,showErrorAnimation:()=>E,showRoomView:()=>O,switchGameView:()=>I,updateButton:()=>P,updateColorPicker:()=>j,updatePlayerColor:()=>R,updateRoomList:()=>A});var o=n("./src/index.ts"),i=n("./src/Models/Player.ts"),r=n("./src/Models/Room.ts"),s=n("./src/WebSocketClient/websocket.ts"),a=null,c=null,l=document.getElementById("roomCodeInput"),u=document.getElementById("usernameInput"),d=document.getElementById("joinButton"),h=document.getElementById("readyButton"),y=document.getElementById("login-div"),p=document.getElementById("room-div"),f=document.getElementById("game-canvas-container"),m=document.getElementById("endgame-div"),g=document.getElementById("color-picker"),v=document.getElementById("room-users-list"),_=document.getElementById("room-code"),b=document.getElementById("player-count"),x=document.getElementById("color-picker-container"),w=document.getElementById("start-progress-bar"),C=document.getElementById("last-winner");function P(){""===u.value.trim()?d.disabled=!0:d.disabled=!1,5===l.value.trim().length?d.textContent="JOIN ROOM":d.textContent="CREATE ROOM"}function k(){var t=u.value;t&&(c=new i.Player(t),"CREATE ROOM"===d.innerText?(0,s.createRoom)(u.value):(0,s.joinRoom)(l.value.toUpperCase(),u.value))}function S(){c.isReady=!c.isReady,(0,s.setPlayerData)(c,a.code),M(c.isReady)}function M(t){t?(h.classList.remove("red-button"),h.classList.add("green-button")):(h.classList.add("red-button"),h.classList.remove("green-button"))}function O(t){var e=JSON.parse(t.toString()).room,n={};Object.keys(e.players).forEach((function(t){var o=e.players[t];n[t]=new i.Player(t,o.isReady,o.color)})),a=new r.Room(e.code,new i.Player(e.host.username,e.host.isReady,e.host.color),n,e.maxSize),c.username===a.host.username&&document.getElementById("startButton").classList.remove("display-none"),x.style.backgroundColor=c.color,g.value=c.color,document.getElementById("color-label").style.color=T(g.value,"#FFFFFF","#000000"),y.classList.add("display-none"),p.classList.add("display-flex"),l.value=a.code,_.innerHTML=a.code,(0,s.setPlayerData)(c,a.code),A(t)}function A(t){var e,n,o=JSON.parse(t.toString()).room;Object.keys(o.players).forEach((function(t){null==a.players[t]?a.addPlayer(new i.Player(t,!1,o.players[t].color)):(a.players[t].color=o.players[t].color,a.players[t].isReady=o.players[t].isReady)})),Object.keys(a.players).forEach((function(t){o.players.hasOwnProperty(t)||a.removePlayer(t)})),a.host=new i.Player(o.host.username,o.host.isReady,o.host.color),a.maxSize=o.maxSize,b.innerHTML="".concat(Object.keys(a.players).length,"/").concat(a.maxSize),v.innerHTML="",Object.values(a.players).forEach((function(t){var e=document.createElement("li");e.textContent=t.username+"",t.username===a.host.username?e.insertAdjacentHTML("afterbegin",'<i class="fa-solid fa-crown" style="color: '.concat(t.color,';"></i>')):e.insertAdjacentHTML("afterbegin",'<i class="fa-solid fa-circle" style="color: '.concat(t.color,'; margin-left: 4px"></i>')),t.isReady?e.insertAdjacentHTML("beforeend",' <i class="fa-solid fa-circle" style="color: #37cb48;"></i>'):e.insertAdjacentHTML("beforeend",' <i class="fa-solid fa-circle" style="color: #cb3737;"></i>'),v.appendChild(e)})),c.username===a.host.username&&document.getElementById("startButton").classList.remove("display-none"),e=Object.values(a.players).filter((function(t){return t.isReady})).length,0!==(n=a.maxSize)&&(w.style.width=Math.floor(e/n*100)+"%")}function E(t){console.log(t),d.classList.add("red-button"),d.classList.add("wiggle"),setTimeout((function(){d.classList.remove("red-button"),d.classList.remove("wiggle")}),600)}function j(){x.style.backgroundColor=g.value}function R(){c.color=g.value,document.getElementById("color-label").style.color=T(g.value,"#FFFFFF","#000000"),(0,s.setPlayerData)(c,a.code)}function T(t,e,n){var o="#"===t.charAt(0)?t.substring(1,7):t,i=[parseInt(o.substring(0,2),16)/255,parseInt(o.substring(2,4),16)/255,parseInt(o.substring(4,6),16)/255].map((function(t){return t<=.03928?t/12.92:Math.pow((t+.055)/1.055,2.4)}));return.2126*i[0]+.7152*i[1]+.0722*i[2]>.4?n:e}function I(t){switch(t.state){case 0:y.classList.add("display-none"),p.classList.add("display-none"),p.classList.remove("display-flex"),f.classList.remove("display-none"),f.classList.add("display-flex"),(0,o.updateCanvasSize)();break;case 1:y.classList.add("display-none"),y.classList.remove("display-flex"),p.classList.add("display-flex"),m.classList.add("display-none"),m.classList.remove("display-flex");break;case 2:C.innerHTML="".concat(a.lastWinner.username),f.classList.add("display-none"),f.classList.remove("display-flex"),m.classList.add("display-flex")}}window.onload=function(){P()},window.updateButton=P,window.handleRoomAction=k,window.handleReadyState=S,window.updateColorPicker=j,window.updatePlayerColor=R,window.startGame=function(){c.username==a.host.username&&(0,s.sendStartCommand)(a.code)},window.goBackToLobby=function(){I({type:"GAME_STATE",state:1}),a.resetRoomForNewGame(),c.snake=null,c.isReady=!1,M(c.isReady)}},"./src/Models/Player.ts":(t,e,n)=>{n.r(e),n.d(e,{Player:()=>o});var o=function(){function t(t,e,n){void 0===e&&(e=!1),this._username=t,this.isReady=e,this.color=n||"#000000".replace(/0/g,(function(){return(~~(16*Math.random())).toString(16)})),this.snake=null}return t.prototype.toJSON=function(){return{username:this.username,isReady:this.isReady,color:this.color}},Object.defineProperty(t.prototype,"username",{get:function(){return this._username},enumerable:!1,configurable:!0}),t.prototype.reset=function(){this.snake=null},t}()},"./src/Models/Room.ts":(t,e,n)=>{n.r(e),n.d(e,{Room:()=>o});var o=function(){function t(t,e,n,o){void 0===o&&(o=5),this._players={},this._code=t,this._host=e,this._maxSize=o,n?this._players=n:this.addPlayer(e)}return t.prototype.addPlayer=function(t){return!(Object.keys(this._players).length>=this._maxSize||(this._players[t.username]=t,0))},t.prototype.removePlayer=function(t){delete this._players[t]},t.prototype.resetRoomForNewGame=function(){this._gameState=1,Object.values(this._players).forEach((function(t){t.reset()}))},Object.defineProperty(t.prototype,"host",{get:function(){return this._host},set:function(t){Object.keys(this._players).some((function(e){return e===t.username}))&&(this._host=t)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"players",{get:function(){return this._players},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"code",{get:function(){return this._code},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"maxSize",{get:function(){return this._maxSize},set:function(t){t>0&&(this._maxSize=t)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"lastWinner",{get:function(){return this._lastWinner},set:function(t){Object.keys(this._players).some((function(e){return e===t.username}))&&(this._lastWinner=t)},enumerable:!1,configurable:!0}),t}()},"./src/ParticleSystem/Emitter.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>a});var o=n("./node_modules/vector2d/src/Vec2D.js"),i=n("./src/ParticleSystem/Particle.ts"),r=n("./src/ParticleSystem/ParticleSystemUtils.ts"),s=function(){return s=Object.assign||function(t){for(var e,n=1,o=arguments.length;n<o;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},s.apply(this,arguments)};const a=function(){function t(t,e,n){var i=n.emitInterval,r=void 0===i?2:i,s=n.emitAmountPerTick,a=void 0===s?5:s,c=n.emitterSize,l=void 0===c?0:c,u=n.particleSize,d=void 0===u?10:u,h=n.speed,y=void 0===h?2:h,p=n.particleShape,f=void 0===p?"circle":p,m=n.color,g=void 0===m?{r:255,g:255,b:255,a:1}:m,v=n.doFadeColor,_=void 0===v||v,b=n.doFadeSize,x=void 0===b||b,w=n.particleAge,C=void 0===w?50:w,P=n.emitTimeMillis,k=void 0===P?0:P,S=n.drawEmitterZone,M=void 0!==S&&S,O=n.emitDirection,A=void 0===O?new o.Vector(0,0):O,E=n.spreadAngle,j=void 0===E?2*Math.PI:E,R=n.spawnParticlesOnEdge,T=void 0!==R&&R;this._aliveParticles=[],this._ticks=0,this.position=t,this._canvasCtx=e,this._emitInterval=r,this._emitAmountPerTick=a,this._particleSize=d,this._speed=y,this._particleShape=f,this._color=g,this._doFadeColor=_,this._doFadeSize=x,this._particleMaxAge=C,this._spreadAngle=j,this._remainingEmitTimeMillis=k,this.emitDirection=A,this.emitterSize=l,this._drawEmitterZone=M,this._spawnParticlesOnEdge=T}return t.prototype.tick=function(t){if(!(this._remainingEmitTimeMillis+this._particleMaxAge<0)){if(this._remainingEmitTimeMillis-=t,this._ticks%this._emitInterval==0&&this._remainingEmitTimeMillis>0)for(var e=0;e<this._emitAmountPerTick;e++)this._aliveParticles.push(new i.default(this.position.clone().add((0,r.getPositionInCircle)(this.emitterSize,this._spawnParticlesOnEdge)),(0,r.getBiasedRandomDirection)(this.emitDirection,this._spreadAngle),this._particleSize,this._speed,this._particleShape,s({},this._color),this._canvasCtx,this._particleMaxAge,this._doFadeColor,this._doFadeSize));this._aliveParticles.forEach((function(e){e.tick(t)})),this._aliveParticles=this._aliveParticles.filter((function(t){return t.age>0})),this._ticks++}},t.prototype.draw=function(){if(!(this._remainingEmitTimeMillis+this._particleMaxAge<0)){if(!0===this._drawEmitterZone){var t=this._canvasCtx.canvas.width/2e3,e=this._canvasCtx.canvas.height/2e3;this._canvasCtx.moveTo(this.position.x*t,this.position.y*e),this._canvasCtx.fillStyle="rgba(".concat(this._color.r,",").concat(this._color.g,", ").concat(this._color.b,", ").concat(Math.min(.2,(this._remainingEmitTimeMillis+this._particleMaxAge)/this._particleMaxAge/5),")"),this._canvasCtx.beginPath(),this._canvasCtx.arc(this.position.x*t,this.position.y*e,this.emitterSize,0,2*Math.PI),this._canvasCtx.fill(),this._canvasCtx.closePath()}this._aliveParticles.forEach((function(t){t.draw()}))}},Object.defineProperty(t.prototype,"emitTime",{set:function(t){this._remainingEmitTimeMillis=t},enumerable:!1,configurable:!0}),t}()},"./src/ParticleSystem/Particle.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>o});const o=function(){function t(t,e,n,o,i,r,s,a,c,l){void 0===i&&(i="circle"),this._position=t,this._velocity=e,this._size=n,this._speed=o,this._shape=i,this._color=r,this._canvasCtx=s,this._fadeColor=c,this._fadeSize=l,this._age=a,this._colorFadeAmount=this._color.a/this._age,this._sizeFadeAmount=this._size/this._age}return t.prototype.tick=function(t){this._position.add(this._velocity.clone().multiplyByScalar(t*this._speed)),this._fadeColor&&(this._color.a-=this._colorFadeAmount),this._fadeSize&&(this._size-=this._sizeFadeAmount),this._age--},t.prototype.draw=function(){var t=this._canvasCtx.canvas.width/2e3,e=this._canvasCtx.canvas.height/2e3;switch(this._canvasCtx.moveTo(this._position.x*t,this._position.y*e),this._canvasCtx.fillStyle="rgba(".concat(this._color.r,",").concat(this._color.g,", ").concat(this._color.b,", ").concat(this._color.a,")"),this._canvasCtx.beginPath(),this._shape){case"circle":this._canvasCtx.arc(this._position.x*t,this._position.y*e,this._size,0,2*Math.PI),this._canvasCtx.fill();break;case"square":this._canvasCtx.fillRect((this._position.x-this._size)*t,(this._position.y-this._size)*e,2*this._size*t,2*this._size*e)}this._canvasCtx.closePath()},Object.defineProperty(t.prototype,"age",{get:function(){return this._age},enumerable:!1,configurable:!0}),t}()},"./src/ParticleSystem/ParticleSystemUtils.ts":(t,e,n)=>{n.r(e),n.d(e,{getBiasedRandomDirection:()=>r,getPositionInCircle:()=>s,getRandomDirection:()=>i,hexToRgb:()=>a});var o=n("./node_modules/vector2d/src/Vec2D.js");function i(){return new o.Vector(2*Math.random()-1,2*Math.random()-1)}function r(t,e){var n,i;return n=t,i=Math.atan2(n.y,n.x)+(Math.random()-.5)*e,new o.Vector(Math.cos(i),Math.sin(i))}function s(t,e){var n=2*Math.random()*Math.PI;return e||(t*=Math.sqrt(Math.random())),new o.Vector(t*Math.cos(n),t*Math.sin(n))}function a(t){var e=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(t);return e?{r:parseInt(e[1],16),g:parseInt(e[2],16),b:parseInt(e[3],16)}:null}},"./src/Segment.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>o});const o=function(){}},"./src/Snake.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>s});var o=n("./src/ParticleSystem/Emitter.ts"),i=n("./src/ParticleSystem/ParticleSystemUtils.ts"),r=function(){return r=Object.assign||function(t){for(var e,n=1,o=arguments.length;n<o;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},r.apply(this,arguments)};const s=function(){function t(t,e,n){this.segments=[],this.isAlive=!0,this.turnRadius=60,this._emitter=null,this.addSegment(t),this._color=e,this._canvasCtx=n,this._emitter=new o.default(this.head.endPoint,this._canvasCtx,{emitInterval:2,emitAmountPerTick:3,particleSize:7,speed:4,color:r(r({},(0,i.hexToRgb)(this._color)),{a:1})})}return t.prototype.addSegment=function(t){this.segments.push(t)},Object.defineProperty(t.prototype,"head",{get:function(){return this.segments.slice(-1).pop()},enumerable:!1,configurable:!0}),t.prototype.draw=function(){var t=this,e=this._canvasCtx.canvas.width/2e3,n=this._canvasCtx.canvas.height/2e3;this._canvasCtx.lineWidth=12*Math.min(e,n),this.segments.forEach((function(o,i){o.draw(t._canvasCtx,t._color),t.head===o&&(t._canvasCtx.beginPath(),t._canvasCtx.arc(o.endPoint.x*e,o.endPoint.y*n,.5*Math.min(e,n),0,2*Math.PI),t._canvasCtx.stroke(),t._canvasCtx.closePath())}))},t.prototype.kill=function(){this.isAlive=!1,this._emitter.position=this.head.endPoint,this._emitter.emitTime=10},t.prototype.updateEmitter=function(t){this._emitter&&(this._emitter.tick(t),this._emitter.draw())},t}()},"./src/WebSocketClient/websocket.ts":(t,e,n)=>{n.r(e),n.d(e,{createRoom:()=>s,joinRoom:()=>a,sendKeyEventToServer:()=>l,sendStartCommand:()=>u,setPlayerData:()=>c});var o,i=n("./src/index.ts"),r=n("./src/MenuManager/login.ts");function s(t){o&&o.readyState===WebSocket.OPEN?o.send(JSON.stringify({type:"CREATE_ROOM",username:t})):console.error("WebSocket connection is not open")}function a(t,e){o&&o.readyState===WebSocket.OPEN?o.send(JSON.stringify({type:"JOIN_ROOM",roomCode:t,username:e})):console.error("WebSocket connection is not open")}function c(t,e){o&&o.readyState===WebSocket.OPEN?o.send(JSON.stringify({type:"PLAYER_DATA",player:t,roomCode:e})):console.error("WebSocket connection is not open")}function l(t,e){o&&o.readyState===WebSocket.OPEN?o.send(JSON.stringify({type:"KEY_EVENT",roomCode:r.currentRoom.code,username:r.currentPlayer.username,key:t,pressed:e})):console.error("WebSocket connection is not open")}function u(t){o&&o.readyState===WebSocket.OPEN?o.send(JSON.stringify({type:"BEGIN_GAME",roomCode:t})):console.error("WebSocket connection is not open")}(o=new WebSocket("ws://".concat(window.location.hostname,":8080"))).onopen=function(){console.log("WebSocket connection established")},o.onmessage=function(t){var e=JSON.parse(t.data);switch(e.type){case"JOINED_ROOM":(0,r.showRoomView)(t.data);break;case"JOIN_FAIL":(0,r.showErrorAnimation)(e.reason);break;case"ROOM_DATA":(0,r.updateRoomList)(t.data);break;case"GAME_STATE":(0,r.switchGameView)(e);break;case"GAMEPLAY_DATA":(0,i.updateGameState)(e);break;case"ERROR":alert("Error: ".concat(e.message))}},o.onclose=function(){console.log("WebSocket connection closed")},o.onerror=function(t){console.error("WebSocket error:",t)}},"./src/index.ts":(t,e,n)=>{n.r(e),n.d(e,{backgroundCanvas:()=>p,backgroundCanvasCtx:()=>f,fps:()=>d,gameCanvas:()=>h,gameCanvasCtx:()=>y,gridSize:()=>m,updateCanvasSize:()=>g,updateGameState:()=>b});var o=n("./node_modules/vector2d/src/Vec2D.js"),i=n("./src/ArcSegment.ts"),r=n("./src/Drawer.ts"),s=n("./src/InputManager.ts"),a=n("./src/LineSegment.ts"),c=n("./src/Snake.ts"),l=n("./src/MenuManager/login.ts"),u=document.createElement("div");u.style.position="absolute",u.style.top="10px",u.style.left="10px",u.style.color="black",document.body.appendChild(u);var d=60,h=document.getElementById("game-canvas"),y=h.getContext("2d"),p=document.getElementById("background-canvas"),f=p.getContext("2d");p.width=p.getBoundingClientRect().width,p.height=p.getBoundingClientRect().height,h.width=h.getBoundingClientRect().width,h.height=h.getBoundingClientRect().height;var m=66.666;function g(){h.width=h.getBoundingClientRect().width,h.height=h.getBoundingClientRect().height,p.width=p.getBoundingClientRect().width,p.height=p.getBoundingClientRect().height,(0,r.drawGrid)()}var v=0,_=performance.now()/10;function b(t){if(null===l.currentPlayer.snake)t.snakeHeads.forEach((function(t){var e=t.lastSegment,n=t.username,i=e.endPoint;l.currentRoom.players[n].snake=new c.default(new a.default(new o.Vector(i.x,i.y),new o.Vector(i.x,i.y),e.isCollidable,e.endAngle),l.currentRoom.players[n].color,y)})),l.currentPlayer.snake=l.currentRoom.players[l.currentPlayer.username].snake,new s.default(l.currentRoom.players[l.currentPlayer.username].snake,"A","D");else{var e=[];t.snakeHeads.forEach((function(t){var n=t.lastSegment,r=t.username,s=n.endPoint,c=l.currentRoom.players[r].snake;if(e.push(r),n.isNewThisTick){if("LineSegment"===t.segmentType){var u=n.startPoint;c.addSegment(new a.default(new o.Vector(u.x,u.y),new o.Vector(s.x,s.y),n.isCollidable,n.endAngle))}else if("ArcSegment"===t.segmentType){var d=n.center;c.addSegment(new i.default(new o.Vector(d.x,d.y),n.radius,n.startAngle,n.endAngle,n.counterClockwise,n.isCollidable))}}else"LineSegment"===t.segmentType?(u=n.startPoint,c.segments[c.segments.length-1]=new a.default(new o.Vector(u.x,u.y),new o.Vector(s.x,s.y),n.isCollidable,n.endAngle)):"ArcSegment"===t.segmentType&&(d=n.center,c.segments[c.segments.length-1]=new i.default(new o.Vector(d.x,d.y),n.radius,n.startAngle,n.endAngle,n.counterClockwise,n.isCollidable))})),Object.values(l.currentRoom.players).forEach((function(t){!e.includes(t.username)&&t.snake.isAlive&&(t.snake.kill(),!0===Object.values(l.currentRoom.players).every((function(t){return!t.snake.isAlive}))&&(l.currentRoom.lastWinner=t))}))}++v%10==0&&(d=function(){var t=performance.now()/10,e=t-_,n=Math.round(1e3/e);return _=t,n}(),u.innerText="FPS: ".concat(d)),y.clearRect(0,0,h.width,h.height),Object.values(l.currentRoom.players).forEach((function(t){t.snake.draw(),t.snake.updateEmitter((performance.now()/10-_)/10)}))}window.addEventListener("resize",g),(0,r.drawGrid)()},"./node_modules/vector2d/src/AbstractVector.js":(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=[1,10,100,1e3,1e4,1e5,1e6,1e7,1e8,1e9,1e10],o=function(){function t(t){this.ctor=t}return t.prototype.setAxes=function(t,e){return this.x=t,this.y=e,this},t.prototype.getX=function(){return this.x},t.prototype.setX=function(t){return this.x=t,this},t.prototype.getY=function(){return this.y},t.prototype.setY=function(t){return this.y=t,this},t.prototype.toString=function(t){return void 0===t&&(t=!1),t?"("+Math.round(this.x)+", "+Math.round(this.y)+")":"("+this.x+", "+this.y+")"},t.prototype.toArray=function(){return[this.x,this.y]},t.prototype.toObject=function(){return{x:this.x,y:this.y}},t.prototype.add=function(t){return this.x+=t.x,this.y+=t.y,this},t.prototype.subtract=function(t){return this.x-=t.x,this.y-=t.y,this},t.prototype.equals=function(t){return t.x===this.x&&t.y===this.y},t.prototype.multiplyByVector=function(t){return this.x*=t.x,this.y*=t.y,this},t.prototype.mulV=function(t){return this.multiplyByVector(t)},t.prototype.divideByVector=function(t){return this.x/=t.x,this.y/=t.y,this},t.prototype.divV=function(t){return this.divideByVector(t)},t.prototype.multiplyByScalar=function(t){return this.x*=t,this.y*=t,this},t.prototype.mulS=function(t){return this.multiplyByScalar(t)},t.prototype.divideByScalar=function(t){return this.x/=t,this.y/=t,this},t.prototype.divS=function(t){return this.divideByScalar(t)},t.prototype.normalise=function(){return this.divideByScalar(this.magnitude())},t.prototype.normalize=function(){return this.normalise()},t.prototype.unit=function(){return this.normalise()},t.prototype.magnitude=function(){var t=this.x,e=this.y;return Math.sqrt(t*t+e*e)},t.prototype.length=function(){return this.magnitude()},t.prototype.lengthSq=function(){var t=this.x,e=this.y;return t*t+e*e},t.prototype.dot=function(t){return t.x*this.x+t.y*this.y},t.prototype.cross=function(t){return this.x*t.y-this.y*t.x},t.prototype.reverse=function(){return this.x=-this.x,this.y=-this.y,this},t.prototype.abs=function(){return this.x=Math.abs(this.x),this.y=Math.abs(this.y),this},t.prototype.zero=function(){return this.x=this.y=0,this},t.prototype.distance=function(t){var e=this.x-t.x,n=this.y-t.y;return Math.sqrt(e*e+n*n)},t.prototype.rotate=function(t){var e=Math.cos(t),n=Math.sin(t),o=this.x,i=this.y;return this.x=o*e-i*n,this.y=o*n+i*e,this},t.prototype.round=function(t){void 0===t&&(t=2);var e=n[t];return this.x=(.5+this.x*e<<0)/e,this.y=(.5+this.y*e<<0)/e,this},t.prototype.clone=function(){return new this.ctor(this.x,this.y)},t}();e.AbstractVector=o},"./node_modules/vector2d/src/ArrayVector.js":function(t,e,n){var o,i=this&&this.__extends||(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var r=function(t){function e(n,o){var i=t.call(this,e)||this;return i.axes=[n,o],i.ctor=e,i}return i(e,t),Object.defineProperty(e.prototype,"x",{get:function(){return this.axes[0]},set:function(t){this.axes[0]=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"y",{get:function(){return this.axes[1]},set:function(t){this.axes[1]=t},enumerable:!0,configurable:!0}),e}(n("./node_modules/vector2d/src/AbstractVector.js").AbstractVector);e.ArrayVector=r},"./node_modules/vector2d/src/Float32Vector.js":function(t,e,n){var o,i=this&&this.__extends||(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var r=function(t){function e(n,o){var i=t.call(this,e)||this;return i.axes=new Float32Array(2),i.axes[0]=n,i.axes[1]=o,i}return i(e,t),Object.defineProperty(e.prototype,"x",{get:function(){return this.axes[0]},set:function(t){this.axes[0]=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"y",{get:function(){return this.axes[1]},set:function(t){this.axes[1]=t},enumerable:!0,configurable:!0}),e}(n("./node_modules/vector2d/src/AbstractVector.js").AbstractVector);e.Float32Vector=r},"./node_modules/vector2d/src/Vec2D.js":(t,e,n)=>{function o(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}Object.defineProperty(e,"__esModule",{value:!0}),o(n("./node_modules/vector2d/src/AbstractVector.js")),o(n("./node_modules/vector2d/src/ArrayVector.js")),o(n("./node_modules/vector2d/src/Float32Vector.js")),o(n("./node_modules/vector2d/src/Vector.js"))},"./node_modules/vector2d/src/Vector.js":function(t,e,n){var o,i=this&&this.__extends||(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var r=function(t){function e(n,o){var i=t.call(this,e)||this;return i._x=n,i._y=o,i}return i(e,t),Object.defineProperty(e.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t},enumerable:!0,configurable:!0}),e}(n("./node_modules/vector2d/src/AbstractVector.js").AbstractVector);e.Vector=r}},e={};function n(o){var i=e[o];if(void 0!==i)return i.exports;var r=e[o]={exports:{}};return t[o].call(r.exports,r,r.exports,n),r.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var o in e)n.o(e,o)&&!n.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n("./src/WebSocketClient/websocket.ts")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,