/*! For license information please see game.js.LICENSE.txt */
(()=>{"use strict";var t={"./src/ArcSegment.ts":(t,e,i)=>{i.r(e),i.d(e,{default:()=>c});var n,o=i("./src/Drawer.ts"),r=i("./node_modules/vector2d/src/Vec2D.js"),s=i("./src/Segment.ts"),a=(n=function(t,e){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},n(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});const c=function(t){function e(e,i,n,o,r,s){var a=t.call(this)||this;return a.center=e,a.radius=i,a.startAngle=n,a.endAngle=o,a._counterClockwise=r,a.isCollidable=s,a}return a(e,t),e.prototype.draw=function(t,e){var i=t.canvas.width/2e3,n=t.canvas.height/2e3;t.lineCap="round",t.strokeStyle=e,!0===this.isCollidable&&(t.beginPath(),t.arc(this.center.x*i,this.center.y*n,this.radius*Math.min(i,n),this.startAngle,this.endAngle,this._counterClockwise),t.stroke(),t.closePath())},e.prototype.drawDebug=function(t,e){var i=this._counterClockwise?-Math.PI:Math.PI;i+=this.endAngle,t.lineCap="round",(0,o.drawDot)(this.center.x,this.center.y,5,"#000000"),(0,o.drawArrow)(t,new r.Vector(this.endPoint.x,this.endPoint.y),new r.Vector(this.endPoint.x+this.radius*Math.cos(i),this.endPoint.y+this.radius*Math.sin(i))),(0,o.drawArc)(this.center.x,this.center.y,this.radius,0,0,!1)},Object.defineProperty(e.prototype,"endPoint",{get:function(){return new r.Vector(this.center.x+this.radius*Math.cos(this.endAngle),this.center.y+this.radius*Math.sin(this.endAngle))},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"penpendicularEndAngle",{get:function(){return this.isCounterClockwise?this.endAngle-Math.PI/2:this.endAngle+Math.PI/2},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"penpendicularStartAngle",{get:function(){return this.isCounterClockwise?this.startAngle-Math.PI/2:this.startAngle+Math.PI/2},enumerable:!1,configurable:!0}),e.prototype.isCounterClockwise=function(){return this._counterClockwise},e.prototype.getContinuingSegment=function(t){return new e(this.center.clone().add(t),this.radius,this.endAngle,this.endAngle,this._counterClockwise,this.isCollidable)},e}(s.default)},"./src/Drawer.ts":(t,e,i)=>{i.r(e),i.d(e,{drawArc:()=>a,drawArrow:()=>c,drawDot:()=>s,drawGrid:()=>r});var n=i("./node_modules/vector2d/src/Vec2D.js"),o=i("./src/index.ts");function r(){var t=o.backgroundCanvasCtx.canvas.width/2e3,e=o.backgroundCanvasCtx.canvas.height/2e3;o.backgroundCanvasCtx.clearRect(0,0,o.backgroundCanvas.width,o.backgroundCanvas.height),o.backgroundCanvasCtx.strokeStyle="rgba(0, 0, 0, 0.3)",o.backgroundCanvasCtx.lineWidth=2;for(var i=o.gridSize*t;i<o.backgroundCanvas.width;i+=o.gridSize*t)o.backgroundCanvasCtx.beginPath(),o.backgroundCanvasCtx.moveTo(i,0),o.backgroundCanvasCtx.lineTo(i,o.backgroundCanvas.height),o.backgroundCanvasCtx.stroke();for(var n=o.gridSize*e;n<o.backgroundCanvas.height;n+=o.gridSize*e)o.backgroundCanvasCtx.beginPath(),o.backgroundCanvasCtx.moveTo(0,n),o.backgroundCanvasCtx.lineTo(o.backgroundCanvas.width,n),o.backgroundCanvasCtx.stroke()}function s(t,e,i,n){o.backgroundCanvasCtx.beginPath(),o.backgroundCanvasCtx.arc(t,e,i,0,2*Math.PI,!1),o.backgroundCanvasCtx.fillStyle=n,o.backgroundCanvasCtx.fill(),o.backgroundCanvasCtx.closePath()}function a(t,e,i,n,r,s){o.backgroundCanvasCtx.lineCap="round",o.backgroundCanvasCtx.strokeStyle="#3466aa",o.backgroundCanvasCtx.beginPath(),o.backgroundCanvasCtx.arc(t,e,i,0,2*Math.PI,s),o.backgroundCanvasCtx.lineWidth=5,o.backgroundCanvasCtx.stroke(),o.backgroundCanvasCtx.closePath()}function c(t,e,i){if(e.x!=i.x&&e.y!=i.y){var o=Math.atan2(i.y-e.y,i.x-e.x),r=10,s=new n.Vector(i.x,i.y);s.x-=11.5*Math.cos(o),s.y-=11.5*Math.sin(o),t.beginPath(),t.moveTo(e.x,e.y),t.lineTo(s.x,s.y),t.strokeStyle="#bbbbbb",t.lineWidth=10,t.stroke(),t.beginPath(),t.moveTo(s.x,s.y),t.lineTo(s.x-r*Math.cos(o-Math.PI/7),s.y-r*Math.sin(o-Math.PI/7)),t.lineTo(s.x-r*Math.cos(o+Math.PI/7),s.y-r*Math.sin(o+Math.PI/7)),t.lineTo(s.x,s.y),t.lineTo(s.x-r*Math.cos(o-Math.PI/7),s.y-r*Math.sin(o-Math.PI/7)),t.strokeStyle="#bbbbbb",t.lineWidth=10,t.stroke(),t.fillStyle="#bbbbbb",t.fill(),t.closePath()}}},"./src/InputManager.ts":(t,e,i)=>{i.r(e),i.d(e,{default:()=>o});var n=i("./src/WebSocketClient/websocket.ts");const o=function(){function t(t,e,i){this._keyMap={},window.addEventListener("keydown",this.onKeyDown.bind(this)),window.addEventListener("keyup",this.onKeyUp.bind(this)),this._snake=t,this._leftKeys=e.map((function(t){return t.toUpperCase()})),this._rightKeys=i.map((function(t){return t.toUpperCase()}))}return t.prototype.onKeyDown=function(t){var e=this;if(this._snake.isAlive){var i=t.key.toUpperCase();if(this._leftKeys.includes(i)||this._rightKeys.includes(i)){if(this._leftKeys.some((function(t){return e._keyMap[t]}))&&this._rightKeys.includes(i))this._leftKeys.forEach((function(t){return e._keyMap[t]=!1}));else if(this._rightKeys.some((function(t){return e._keyMap[t]}))&&this._leftKeys.includes(i))this._rightKeys.forEach((function(t){return e._keyMap[t]=!1}));else if(this._keyMap[i])return;this._keyMap[i]=!0,(0,n.sendKeyEventToServer)(this._rightKeys.includes(i)?1:0,!0)}}},t.prototype.onKeyUp=function(t){if(this._snake.isAlive){var e=t.key.toUpperCase();this._keyMap[e]&&(this._keyMap[e]=!1,(0,n.sendKeyEventToServer)(this._rightKeys.includes(e)?1:0,!1))}},t.prototype.dispose=function(){window.removeEventListener("keydown",this.onKeyDown.bind(this)),window.removeEventListener("keyup",this.onKeyUp.bind(this))},t}()},"./src/LineSegment.ts":(t,e,i)=>{i.r(e),i.d(e,{default:()=>s});var n,o=i("./src/Segment.ts"),r=(n=function(t,e){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},n(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});const s=function(t){function e(e,i,n,o){var r=t.call(this)||this;return r.isCollidable=!0,r.startPoint=e,r.endPoint=i,r.isCollidable=n,r.endAngle=o,r}return r(e,t),e.prototype.draw=function(t,e){var i=t.canvas.width/2e3,n=t.canvas.height/2e3;t.strokeStyle=e,t.lineCap="round",!0===this.isCollidable&&(t.beginPath(),t.moveTo(this.startPoint.x*i,this.startPoint.y*n),t.lineTo(this.endPoint.x*i,this.endPoint.y*n),t.stroke(),t.closePath())},Object.defineProperty(e.prototype,"length",{get:function(){return Math.sqrt(Math.pow(this.startPoint.x-this.endPoint.x,2)+Math.pow(this.startPoint.y-this.endPoint.y,2))},enumerable:!1,configurable:!0}),e.prototype.getContinuingSegment=function(t){var i=this.endPoint.clone().add(t);return new e(i,i,this.isCollidable,this.endAngle)},e}(o.default)},"./src/MenuManager/login.ts":(t,e,i)=>{i.r(e),i.d(e,{currentPlayer:()=>c,currentRoom:()=>a,handleReadyState:()=>k,handleRoomAction:()=>S,showErrorAnimation:()=>A,showRoomView:()=>O,switchGameView:()=>I,updateButton:()=>C,updateColorPicker:()=>j,updatePlayerColor:()=>T,updateRoomList:()=>E});var n=i("./src/index.ts"),o=i("./src/Models/Player.ts"),r=i("./src/Models/Room.ts"),s=i("./src/WebSocketClient/websocket.ts"),a=null,c=null,l=document.getElementById("roomCodeInput"),u=document.getElementById("usernameInput"),h=document.getElementById("joinButton"),d=document.getElementById("readyButton"),p=document.getElementById("login-div"),y=document.getElementById("room-div"),f=document.getElementById("game-canvas-container"),m=document.getElementById("endgame-div"),_=document.getElementById("color-picker"),g=document.getElementById("room-users-list"),v=document.getElementById("room-code"),b=document.getElementById("player-count"),w=document.getElementById("color-picker-container"),x=document.getElementById("start-progress-bar"),P=document.getElementById("last-winner");function C(){""===u.value.trim()?h.disabled=!0:h.disabled=!1,5===l.value.trim().length?h.textContent="JOIN ROOM":h.textContent="CREATE ROOM"}function S(){var t=u.value;t&&(c=new o.Player(t),"CREATE ROOM"===h.innerText?(0,s.createRoom)(u.value):(0,s.joinRoom)(l.value.toUpperCase(),u.value))}function k(){c.isReady=!c.isReady,(0,s.setPlayerData)(c,a.code),M(c.isReady)}function M(t){t?(d.classList.remove("red-button"),d.classList.add("green-button")):(d.classList.add("red-button"),d.classList.remove("green-button"))}function O(t){var e=JSON.parse(t.toString()).room,i={};Object.keys(e.players).forEach((function(t){var n=e.players[t];i[t]=new o.Player(t,n.isReady,n.color)})),a=new r.Room(e.code,new o.Player(e.host.username,e.host.isReady,e.host.color),i,e.maxSize),c.username===a.host.username&&document.getElementById("startButton").classList.remove("display-none"),w.style.backgroundColor=c.color,_.value=c.color,document.getElementById("color-label").style.color=R(_.value,"#FFFFFF","#000000"),p.classList.add("display-none"),y.classList.add("display-flex"),l.value=a.code,v.innerHTML=a.code,(0,s.setPlayerData)(c,a.code),E(t)}function E(t){var e,i,n=JSON.parse(t.toString()).room;Object.keys(n.players).forEach((function(t){null==a.players[t]?a.addPlayer(new o.Player(t,!1,n.players[t].color)):(a.players[t].color=n.players[t].color,a.players[t].isReady=n.players[t].isReady)})),Object.keys(a.players).forEach((function(t){n.players.hasOwnProperty(t)||a.removePlayer(t)})),a.host=new o.Player(n.host.username,n.host.isReady,n.host.color),a.maxSize=n.maxSize,b.innerHTML="".concat(Object.keys(a.players).length,"/").concat(a.maxSize),g.innerHTML="",Object.values(a.players).forEach((function(t){var e=document.createElement("li");e.textContent=t.username+"",t.username===a.host.username?e.insertAdjacentHTML("afterbegin",'<i class="fa-solid fa-crown" style="color: '.concat(t.color,';"></i>')):e.insertAdjacentHTML("afterbegin",'<i class="fa-solid fa-circle" style="color: '.concat(t.color,'; margin-left: 4px"></i>')),t.isReady?e.insertAdjacentHTML("beforeend",' <i class="fa-solid fa-circle" style="color: #37cb48;"></i>'):e.insertAdjacentHTML("beforeend",' <i class="fa-solid fa-circle" style="color: #cb3737;"></i>'),g.appendChild(e)})),c.username===a.host.username&&document.getElementById("startButton").classList.remove("display-none"),e=Object.values(a.players).filter((function(t){return t.isReady})).length,0!==(i=a.maxSize)&&(x.style.width=Math.floor(e/i*100)+"%")}function A(t){console.log(t),h.classList.add("red-button"),h.classList.add("wiggle"),setTimeout((function(){h.classList.remove("red-button"),h.classList.remove("wiggle")}),600)}function j(){w.style.backgroundColor=_.value}function T(){c.color=_.value,document.getElementById("color-label").style.color=R(_.value,"#FFFFFF","#000000"),(0,s.setPlayerData)(c,a.code)}function R(t,e,i){var n="#"===t.charAt(0)?t.substring(1,7):t,o=[parseInt(n.substring(0,2),16)/255,parseInt(n.substring(2,4),16)/255,parseInt(n.substring(4,6),16)/255].map((function(t){return t<=.03928?t/12.92:Math.pow((t+.055)/1.055,2.4)}));return.2126*o[0]+.7152*o[1]+.0722*o[2]>.4?i:e}function I(t){switch(t.state){case 0:p.classList.add("display-none"),y.classList.add("display-none"),y.classList.remove("display-flex"),f.classList.remove("display-none"),f.classList.add("display-flex"),(0,n.updateCanvasSize)();break;case 1:p.classList.add("display-none"),p.classList.remove("display-flex"),y.classList.add("display-flex"),m.classList.add("display-none"),m.classList.remove("display-flex");break;case 2:P.innerHTML="".concat(a.lastWinner.username),f.classList.add("display-none"),f.classList.remove("display-flex"),m.classList.add("display-flex")}}window.onload=function(){C()},window.updateButton=C,window.handleRoomAction=S,window.handleReadyState=k,window.updateColorPicker=j,window.updatePlayerColor=T,window.startGame=function(){c.username==a.host.username&&(0,s.sendStartCommand)(a.code)},window.goBackToLobby=function(){I({type:"GAME_STATE",state:1}),a.resetRoomForNewGame(),c.snake=null,c.isReady=!1,M(c.isReady)}},"./src/Models/Player.ts":(t,e,i)=>{i.r(e),i.d(e,{Player:()=>n});var n=function(){function t(t,e,i){void 0===e&&(e=!1),this._username=t,this.isReady=e,this.color=i||"#000000".replace(/0/g,(function(){return(~~(16*Math.random())).toString(16)})),this.snake=null}return t.prototype.toJSON=function(){return{username:this.username,isReady:this.isReady,color:this.color}},Object.defineProperty(t.prototype,"username",{get:function(){return this._username},enumerable:!1,configurable:!0}),t.prototype.reset=function(){this.snake=null},t}()},"./src/Models/Room.ts":(t,e,i)=>{i.r(e),i.d(e,{Room:()=>n});var n=function(){function t(t,e,i,n){void 0===n&&(n=5),this._players={},this._code=t,this._host=e,this._maxSize=n,i?this._players=i:this.addPlayer(e)}return t.prototype.addPlayer=function(t){return!(Object.keys(this._players).length>=this._maxSize||(this._players[t.username]=t,0))},t.prototype.removePlayer=function(t){delete this._players[t]},t.prototype.resetRoomForNewGame=function(){this._gameState=1,Object.values(this._players).forEach((function(t){t.reset()}))},Object.defineProperty(t.prototype,"host",{get:function(){return this._host},set:function(t){Object.keys(this._players).some((function(e){return e===t.username}))&&(this._host=t)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"players",{get:function(){return this._players},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"code",{get:function(){return this._code},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"maxSize",{get:function(){return this._maxSize},set:function(t){t>0&&(this._maxSize=t)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"lastWinner",{get:function(){return this._lastWinner},set:function(t){Object.keys(this._players).some((function(e){return e===t.username}))&&(this._lastWinner=t)},enumerable:!1,configurable:!0}),t}()},"./src/ParticleSystem/CircularEmitter.ts":(t,e,i)=>{i.r(e),i.d(e,{default:()=>l});var n,o=i("./src/ParticleSystem/Particle.ts"),r=i("./src/ParticleSystem/ParticleSystemUtils.ts"),s=i("./src/ParticleSystem/Emitter.ts"),a=(n=function(t,e){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},n(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),c=function(){return c=Object.assign||function(t){for(var e,i=1,n=arguments.length;i<n;i++)for(var o in e=arguments[i])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t},c.apply(this,arguments)};const l=function(t){function e(e,i,n,o){var r=t.call(this,i,n,o)||this;return r._emitterRadius=e,r}return a(e,t),e.prototype.tick=function(t){if(!(this._remainingEmitTimeMillis+this._particleMaxAge<0)){if(this._remainingEmitTimeMillis-=t,this._ticks%this._emitInterval==0&&this._remainingEmitTimeMillis>0)for(var e=this._canvasCtx.canvas.height/2e3,i=0;i<this._emitAmountPerTick;i++)this._aliveParticles.push(new o.default(this.position.clone().add((0,r.getPositionInCircle)(this._emitterRadius,this._spawnParticlesOnEdge)),(0,r.getBiasedRandomDirection)(this.emitDirection,this._spreadAngle),this._particleSize*e,this._speed,this._particleShape,c({},this._color),this._canvasCtx,this._particleMaxAge,this._doFadeColor,this._doFadeSize,this._fadeDirection));this._aliveParticles.forEach((function(e){e.tick(t)})),this._aliveParticles=this._aliveParticles.filter((function(t){return t.age>0})),this._ticks++}},e.prototype.draw=function(){if(!(this._remainingEmitTimeMillis+this._particleMaxAge<0)){if(!0===this._drawEmitterZone){var t=this._canvasCtx.canvas.width/2e3,e=this._canvasCtx.canvas.height/2e3;this._canvasCtx.moveTo(this.position.x*t,this.position.y*e),this._canvasCtx.fillStyle="rgba(".concat(this._color.r,",").concat(this._color.g,", ").concat(this._color.b,", ").concat(Math.min(.2,(this._remainingEmitTimeMillis+this._particleMaxAge)/this._particleMaxAge/5),")"),this._canvasCtx.beginPath(),this._canvasCtx.arc(this.position.x*t,this.position.y*e,this._emitterRadius,0,2*Math.PI),this._canvasCtx.fill(),this._canvasCtx.closePath()}this._aliveParticles.forEach((function(t){t.draw()}))}},Object.defineProperty(e.prototype,"emitTime",{set:function(t){this._remainingEmitTimeMillis=t},enumerable:!1,configurable:!0}),e}(s.default)},"./src/ParticleSystem/Emitter.ts":(t,e,i)=>{i.r(e),i.d(e,{default:()=>o});var n=i("./node_modules/vector2d/src/Vec2D.js");const o=function(){function t(t,e,i){var o=i.emitInterval,r=void 0===o?2:o,s=i.emitAmountPerTick,a=void 0===s?5:s,c=i.particleSize,l=void 0===c?10:c,u=i.speed,h=void 0===u?2:u,d=i.particleShape,p=void 0===d?"circle":d,y=i.color,f=void 0===y?{r:255,g:255,b:255,a:1}:y,m=i.doFadeColor,_=void 0===m||m,g=i.doFadeSize,v=void 0===g||g,b=i.fadeDirection,w=void 0===b?"normal":b,x=i.particleAge,P=void 0===x?50:x,C=i.emitTimeMillis,S=void 0===C?0:C,k=i.drawEmitterZone,M=void 0!==k&&k,O=i.emitDirection,E=void 0===O?new n.Vector(0,0):O,A=i.spreadAngle,j=void 0===A?2*Math.PI:A,T=i.spawnParticlesOnEdge,R=void 0!==T&&T;this._aliveParticles=[],this._ticks=0,this.position=t,this._canvasCtx=e,this._emitInterval=r,this._emitAmountPerTick=a,this._particleSize=l,this._speed=h,this._particleShape=p,this._color=f,this._doFadeColor=_,this._doFadeSize=v,this._fadeDirection=w,this._particleMaxAge=P,this._spreadAngle=j,this._remainingEmitTimeMillis=S,this.emitDirection=E,this._drawEmitterZone=M,this._spawnParticlesOnEdge=R}return Object.defineProperty(t.prototype,"emitTime",{set:function(t){this._remainingEmitTimeMillis=t},enumerable:!1,configurable:!0}),t}()},"./src/ParticleSystem/Particle.ts":(t,e,i)=>{i.r(e),i.d(e,{default:()=>o});var n=function(){return n=Object.assign||function(t){for(var e,i=1,n=arguments.length;i<n;i++)for(var o in e=arguments[i])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t},n.apply(this,arguments)};const o=function(){function t(t,e,i,o,r,s,a,c,l,u,h){void 0===r&&(r="circle"),this._position=t,this._velocity=e,this._age=c,this._colorFadeAmount=s.a/this._age,this._sizeFadeAmount=i/this._age,"reverse"===h?(this._size=0,this._color=n(n({},s),{a:0})):(this._size=i,this._color=s),this._speed=o,this._shape=r,this._canvasCtx=a,this._fadeColor=l,this._fadeSize=u,this._fadeDirection=h}return t.prototype.tick=function(t){this._position.add(this._velocity.clone().multiplyByScalar(t*this._speed)),this._fadeColor&&("normal"===this._fadeDirection?this._color.a-=this._colorFadeAmount:this._color.a+=this._colorFadeAmount),this._fadeSize&&("normal"===this._fadeDirection?this._size-=this._sizeFadeAmount:this._size+=this._sizeFadeAmount),this._age--},t.prototype.draw=function(){var t=this._canvasCtx.canvas.width/2e3,e=this._canvasCtx.canvas.height/2e3;switch(this._canvasCtx.moveTo(this._position.x*t,this._position.y*e),this._canvasCtx.fillStyle="rgba(".concat(this._color.r,",").concat(this._color.g,", ").concat(this._color.b,", ").concat(this._color.a,")"),this._canvasCtx.beginPath(),this._shape){case"circle":this._canvasCtx.arc(this._position.x*t,this._position.y*e,this._size,0,2*Math.PI),this._canvasCtx.fill();break;case"square":this._canvasCtx.fillRect((this._position.x-this._size)*t,(this._position.y-this._size)*e,2*this._size*t,2*this._size*e)}this._canvasCtx.closePath()},Object.defineProperty(t.prototype,"age",{get:function(){return this._age},enumerable:!1,configurable:!0}),t}()},"./src/ParticleSystem/ParticleSystemUtils.ts":(t,e,i)=>{i.r(e),i.d(e,{getBiasedRandomDirection:()=>r,getPositionInCircle:()=>s,getPositionInRectangle:()=>a,getRandomDirection:()=>o,hexToRgb:()=>c});var n=i("./node_modules/vector2d/src/Vec2D.js");function o(){return new n.Vector(2*Math.random()-1,2*Math.random()-1)}function r(t,e){var i,o;return i=t,o=Math.atan2(i.y,i.x)+(Math.random()-.5)*e,new n.Vector(Math.cos(o),Math.sin(o))}function s(t,e){var i;do{i=new n.Vector(Math.random()*t*2-t,Math.random()*t*2-t)}while(Math.pow(i.x,2)+Math.pow(i.y,2)>Math.pow(t,2));return e&&i.normalise().mulS(t),i}function a(t,e){return new n.Vector(Math.random()*t,Math.random()*e)}function c(t){var e=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(t);return e?{r:parseInt(e[1],16),g:parseInt(e[2],16),b:parseInt(e[3],16)}:null}},"./src/ParticleSystem/RectangularEmitter.ts":(t,e,i)=>{i.r(e),i.d(e,{default:()=>u});var n,o=i("./node_modules/vector2d/src/Vec2D.js"),r=i("./src/ParticleSystem/Particle.ts"),s=i("./src/ParticleSystem/ParticleSystemUtils.ts"),a=i("./src/ParticleSystem/Emitter.ts"),c=(n=function(t,e){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},n(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),l=function(){return l=Object.assign||function(t){for(var e,i=1,n=arguments.length;i<n;i++)for(var o in e=arguments[i])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t},l.apply(this,arguments)};const u=function(t){function e(e,i,n,o,r){var s=t.call(this,n,o,r)||this;return s._width=e,s._height=i,s}return c(e,t),e.prototype.tick=function(t){if(!(this._remainingEmitTimeMillis+this._particleMaxAge<0)){if(this._remainingEmitTimeMillis-=t,this._ticks%this._emitInterval==0&&this._remainingEmitTimeMillis>0)for(var e=this._canvasCtx.canvas.height/2e3,i=0;i<this._emitAmountPerTick;i++)this._aliveParticles.push(new r.default(this.position.clone().add((0,s.getPositionInRectangle)(this._width,this._height).subtract(new o.Vector(this._width/2,this._height/2))),(0,s.getBiasedRandomDirection)(this.emitDirection,this._spreadAngle),this._particleSize*e,this._speed,this._particleShape,l({},this._color),this._canvasCtx,this._particleMaxAge,this._doFadeColor,this._doFadeSize,this._fadeDirection));this._aliveParticles.forEach((function(e){e.tick(t)})),this._aliveParticles=this._aliveParticles.filter((function(t){return t.age>0})),this._ticks++}},e.prototype.draw=function(){if(!(this._remainingEmitTimeMillis+this._particleMaxAge<0)){if(!0===this._drawEmitterZone){var t=this._canvasCtx.canvas.width/2e3,e=this._canvasCtx.canvas.height/2e3;this._canvasCtx.moveTo((this.position.x-this._width/2)*t,(this.position.y-this._height/2)*e),this._canvasCtx.fillStyle="rgba(".concat(this._color.r,",").concat(this._color.g,", ").concat(this._color.b,", ").concat(Math.min(.2,(this._remainingEmitTimeMillis+this._particleMaxAge)/this._particleMaxAge/5),")"),this._canvasCtx.beginPath(),this._canvasCtx.rect(this.position.x-this._width/2,this.position.y-this._height/2,this._width,this._height),this._canvasCtx.fill(),this._canvasCtx.closePath()}this._aliveParticles.forEach((function(t){t.draw()}))}},Object.defineProperty(e.prototype,"emitTime",{set:function(t){this._remainingEmitTimeMillis=t},enumerable:!1,configurable:!0}),e}(a.default)},"./src/PowerupHandler.ts":(t,e,i)=>{i.r(e),i.d(e,{default:()=>a});var n=i("./node_modules/vector2d/src/Vec2D.js"),o=i("./src/index.ts"),r=i("./src/ParticleSystem/RectangularEmitter.ts"),s=i("./src/PowerupSystem/powerup.ts");const a=function(){function t(){this._powerups={},this._wallEmitters=[],this._portalWalls=!1,this._gameCanvasDiv=document.getElementById("game-canvas-container"),this.initializeWallEmitters()}return t.prototype.initializeWallEmitters=function(){for(var t=[new n.Vector(2e3,50),new n.Vector(50,2e3),new n.Vector(2e3,50),new n.Vector(50,2e3)],e=[new n.Vector(0,-1),new n.Vector(-1,0),new n.Vector(0,1),new n.Vector(1,0)],i=[new n.Vector(1e3,50),new n.Vector(50,1e3),new n.Vector(1e3,1950),new n.Vector(1950,1e3)],s=0;s<4;s++)this._wallEmitters.push(new r.default(t[s].x,t[s].y,i[s],o.gameCanvasCtx,{particleShape:"square",color:{r:23,g:180,b:230,a:.8},emitTimeMillis:0,emitDirection:e[s],spreadAngle:Math.PI/6,speed:.8,particleSize:12,particleAge:100,emitInterval:1,emitAmountPerTick:6,fadeDirection:"reverse"}))},t.prototype.addPowerup=function(t){this._powerups[t.id]=t},t.prototype.removePowerup=function(t){delete this._powerups[t.id]},t.prototype.applyPowerup=function(t){var e=this;t.type===s.PowerupType.PortalWalls&&(this._portalWalls=!this._portalWalls,this._wallEmitters.forEach((function(t){return t.emitTime=e._portalWalls?1/0:0})),this._gameCanvasDiv.style.borderColor=this._portalWalls?"#34c6dc":"#555555"),this.removePowerup(t)},t.prototype.draw=function(){Object.values(this._powerups).forEach((function(t){t.draw()})),this._wallEmitters.forEach((function(t){t.tick(1),t.draw()}))},t}()},"./src/PowerupSystem/powerup.ts":(t,e,i)=>{i.r(e),i.d(e,{PowerupType:()=>o,default:()=>u});var n,o,r=i("./node_modules/vector2d/src/Vec2D.js"),s=i("./src/ParticleSystem/CircularEmitter.ts"),a=i("./src/ParticleSystem/ParticleSystemUtils.ts"),c=function(){return c=Object.assign||function(t){for(var e,i=1,n=arguments.length;i<n;i++)for(var o in e=arguments[i])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t},c.apply(this,arguments)};!function(t){t[t.SpeedUp=0]="SpeedUp",t[t.SpeedDown=1]="SpeedDown",t[t.Bomb=2]="Bomb",t[t.FlipButtons=3]="FlipButtons",t[t.Invisibility=4]="Invisibility",t[t.PortalWalls=5]="PortalWalls"}(o||(o={}));var l=((n={})[o.SpeedUp]="../assets/powerups/speedup.svg",n[o.SpeedDown]="../assets/powerups/speeddown.svg",n[o.Bomb]="../assets/powerups/bomb.svg",n[o.FlipButtons]="../assets/powerups/flipbuttons.svg",n[o.Invisibility]="../assets/powerups/invisibility.svg",n[o.PortalWalls]="../assets/powerups/portalwalls.svg",n);const u=function(){function t(t,e,i,n,o){this._radius=30,this._id=t,this._position=e,this._canvasCtx=i,this._color=n,this._type=o,this._img=new Image,this._img.src=l[this._type],this._emitter=new s.default(.6*this._radius,this._position,this._canvasCtx,{color:c(c({},(0,a.hexToRgb)(this._color)),{a:.8}),particleSize:this._radius/2.85,particleAge:60,speed:this._radius/20,emitAmountPerTick:3,spawnParticlesOnEdge:!0})}return t.prototype.draw=function(){this._emitter.tick(.5),this._emitter.draw();var t=this._canvasCtx.canvas.width/2e3,e=this._canvasCtx.canvas.height/2e3;this._canvasCtx.moveTo(this._position.x*t,this._position.y*e),this._canvasCtx.fillStyle=this._color,this._canvasCtx.beginPath(),this._canvasCtx.arc(this._position.x*t,this._position.y*e,this._radius*t,0,2*Math.PI),this._canvasCtx.fill(),this._canvasCtx.closePath(),this.drawSVG(),this._emitter.emitTime=1/0},t.prototype.drawSVG=function(){var t=this._canvasCtx.canvas.width/2e3,e=this._canvasCtx.canvas.height/2e3,i=.6;this._canvasCtx.drawImage(this._img,this._position.x*t-this._radius*t*i,this._position.y*e-this._radius*t*i,2*this._radius*i*t,2*this._radius*i*t)},Object.defineProperty(t.prototype,"id",{get:function(){return this._id},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"position",{get:function(){return this._position},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"radius",{get:function(){return this._radius},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"type",{get:function(){return this._type},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"color",{get:function(){return this._color},enumerable:!1,configurable:!0}),t.prototype.toJSON=function(){return{id:this._id,position:{x:this.position.x,y:this.position.y},color:this._color,type:this._type,radius:this._radius}},t.fromMessagePowerup=function(e,i){return new t(e.powerup.id,new r.Vector(e.powerup.position.x,e.powerup.position.y),i,e.powerup.color,e.powerup.type)},t}()},"./src/Segment.ts":(t,e,i)=>{i.r(e),i.d(e,{default:()=>n});const n=function(){}},"./src/Snake.ts":(t,e,i)=>{i.r(e),i.d(e,{default:()=>s});var n=i("./src/ParticleSystem/CircularEmitter.ts"),o=i("./src/ParticleSystem/ParticleSystemUtils.ts"),r=function(){return r=Object.assign||function(t){for(var e,i=1,n=arguments.length;i<n;i++)for(var o in e=arguments[i])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t},r.apply(this,arguments)};const s=function(){function t(t,e,i){this.segments=[],this.isAlive=!0,this.turnRadius=60,this._emitter=null,this.addSegment(t),this._color=e,this._canvasCtx=i,this._emitter=new n.default(0,this.head.endPoint,this._canvasCtx,{emitInterval:2,emitAmountPerTick:3,particleSize:7,speed:4,color:r(r({},(0,o.hexToRgb)(this._color)),{a:1})})}return t.prototype.addSegment=function(t){this.segments.push(t)},Object.defineProperty(t.prototype,"head",{get:function(){return this.segments.slice(-1).pop()},enumerable:!1,configurable:!0}),t.prototype.draw=function(){var t=this,e=this._canvasCtx.canvas.width/2e3,i=this._canvasCtx.canvas.height/2e3;this._canvasCtx.lineWidth=12*Math.min(e,i),this.segments.forEach((function(n,o){n.draw(t._canvasCtx,t._color),t.head===n&&(t._canvasCtx.beginPath(),t._canvasCtx.arc(n.endPoint.x*e,n.endPoint.y*i,.5*Math.min(e,i),0,2*Math.PI),t._canvasCtx.stroke(),t._canvasCtx.closePath())}))},t.prototype.kill=function(){this.isAlive=!1,this._emitter.position=this.head.endPoint,this._emitter.emitTime=10},t.prototype.updateEmitter=function(t){this._emitter&&(this._emitter.tick(t),this._emitter.draw())},t}()},"./src/WebSocketClient/websocket.ts":(t,e,i)=>{i.r(e),i.d(e,{createRoom:()=>s,joinRoom:()=>a,sendKeyEventToServer:()=>l,sendStartCommand:()=>u,setPlayerData:()=>c});var n,o=i("./src/index.ts"),r=i("./src/MenuManager/login.ts");function s(t){n&&n.readyState===WebSocket.OPEN?n.send(JSON.stringify({type:"CREATE_ROOM",username:t})):console.error("WebSocket connection is not open")}function a(t,e){n&&n.readyState===WebSocket.OPEN?n.send(JSON.stringify({type:"JOIN_ROOM",roomCode:t,username:e})):console.error("WebSocket connection is not open")}function c(t,e){n&&n.readyState===WebSocket.OPEN?n.send(JSON.stringify({type:"PLAYER_DATA",player:t,roomCode:e})):console.error("WebSocket connection is not open")}function l(t,e){n&&n.readyState===WebSocket.OPEN?n.send(JSON.stringify({type:"KEY_EVENT",roomCode:r.currentRoom.code,username:r.currentPlayer.username,key:t,pressed:e})):console.error("WebSocket connection is not open")}function u(t){n&&n.readyState===WebSocket.OPEN?n.send(JSON.stringify({type:"BEGIN_GAME",roomCode:t})):console.error("WebSocket connection is not open")}(n=new WebSocket("ws://".concat(window.location.hostname,":8080"))).onopen=function(){console.log("WebSocket connection established")},n.onmessage=function(t){var e=JSON.parse(t.data);switch(console.log("Message from server:",e),e.type){case"JOINED_ROOM":(0,r.showRoomView)(t.data);break;case"JOIN_FAIL":(0,r.showErrorAnimation)(e.reason);break;case"ROOM_DATA":(0,r.updateRoomList)(t.data);break;case"GAME_STATE":(0,r.switchGameView)(e);break;case"GAMEPLAY_DATA":(0,o.updateGameState)(e);break;case"ERROR":alert("Error: ".concat(e.message))}},n.onclose=function(){console.log("WebSocket connection closed")},n.onerror=function(t){console.error("WebSocket error:",t)}},"./src/index.ts":(t,e,i)=>{i.r(e),i.d(e,{backgroundCanvas:()=>m,backgroundCanvasCtx:()=>_,fps:()=>p,gameCanvas:()=>y,gameCanvasCtx:()=>f,gridSize:()=>v,updateCanvasSize:()=>b,updateGameState:()=>P});var n=i("./node_modules/vector2d/src/Vec2D.js"),o=i("./src/ArcSegment.ts"),r=i("./src/Drawer.ts"),s=i("./src/InputManager.ts"),a=i("./src/LineSegment.ts"),c=i("./src/Snake.ts"),l=i("./src/MenuManager/login.ts"),u=i("./src/PowerupHandler.ts"),h=i("./src/PowerupSystem/powerup.ts"),d=document.createElement("div");d.style.position="absolute",d.style.top="10px",d.style.left="10px",d.style.color="black",document.body.appendChild(d);var p=60,y=document.getElementById("game-canvas"),f=y.getContext("2d"),m=document.getElementById("background-canvas"),_=m.getContext("2d");m.width=m.getBoundingClientRect().width,m.height=m.getBoundingClientRect().height,y.width=y.getBoundingClientRect().width,y.height=y.getBoundingClientRect().height;var g,v=66.666;function b(){y.width=y.getBoundingClientRect().width,y.height=y.getBoundingClientRect().height,m.width=m.getBoundingClientRect().width,m.height=m.getBoundingClientRect().height,(0,r.drawGrid)()}var w=0,x=performance.now()/10;function P(t){if(null===l.currentPlayer.snake)t.snakeHeads.forEach((function(t){var e=t.lastSegment,i=t.username,o=e.endPoint;l.currentRoom.players[i].snake=new c.default(new a.default(new n.Vector(o.x,o.y),new n.Vector(o.x,o.y),e.isCollidable,e.endAngle),l.currentRoom.players[i].color,f)})),l.currentPlayer.snake=l.currentRoom.players[l.currentPlayer.username].snake,new s.default(l.currentRoom.players[l.currentPlayer.username].snake,["A","ARROWLEFT"],["D","ARROWRIGHT"]),g=new u.default;else{var e=[];t.snakeHeads.forEach((function(i){var r=i.lastSegment,s=i.username,c=r.endPoint,u=l.currentRoom.players[s].snake;if(null!==t.powerupList&&t.powerupList.forEach((function(t){switch(t.action){case 0:g.removePowerup(h.default.fromMessagePowerup(t,f));break;case 1:g.addPowerup(h.default.fromMessagePowerup(t,f));break;case 2:g.applyPowerup(h.default.fromMessagePowerup(t,f))}})),e.push(s),r.isNewThisTick){if("LineSegment"===i.segmentType){var d=r.startPoint;u.addSegment(new a.default(new n.Vector(d.x,d.y),new n.Vector(c.x,c.y),r.isCollidable,r.endAngle))}else if("ArcSegment"===i.segmentType){var p=r.center;u.addSegment(new o.default(new n.Vector(p.x,p.y),r.radius,r.startAngle,r.endAngle,r.counterClockwise,r.isCollidable))}}else"LineSegment"===i.segmentType?(d=r.startPoint,u.segments[u.segments.length-1]=new a.default(new n.Vector(d.x,d.y),new n.Vector(c.x,c.y),r.isCollidable,r.endAngle)):"ArcSegment"===i.segmentType&&(p=r.center,u.segments[u.segments.length-1]=new o.default(new n.Vector(p.x,p.y),r.radius,r.startAngle,r.endAngle,r.counterClockwise,r.isCollidable))})),Object.values(l.currentRoom.players).forEach((function(t){!e.includes(t.username)&&t.snake.isAlive&&(t.snake.kill(),!0===Object.values(l.currentRoom.players).every((function(t){return!t.snake.isAlive}))&&(l.currentRoom.lastWinner=t))}))}++w%10==0&&(p=function(){var t=performance.now()/10,e=t-x,i=Math.round(1e3/e);return x=t,i}(),d.innerText="FPS: ".concat(p)),f.clearRect(0,0,y.width,y.height),Object.values(l.currentRoom.players).forEach((function(t){t.snake.draw(),t.snake.updateEmitter((performance.now()/10-x)/10)})),g.draw()}window.addEventListener("resize",b),(0,r.drawGrid)()},"./node_modules/vector2d/src/AbstractVector.js":(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var i=[1,10,100,1e3,1e4,1e5,1e6,1e7,1e8,1e9,1e10],n=function(){function t(t){this.ctor=t}return t.prototype.setAxes=function(t,e){return this.x=t,this.y=e,this},t.prototype.getX=function(){return this.x},t.prototype.setX=function(t){return this.x=t,this},t.prototype.getY=function(){return this.y},t.prototype.setY=function(t){return this.y=t,this},t.prototype.toString=function(t){return void 0===t&&(t=!1),t?"("+Math.round(this.x)+", "+Math.round(this.y)+")":"("+this.x+", "+this.y+")"},t.prototype.toArray=function(){return[this.x,this.y]},t.prototype.toObject=function(){return{x:this.x,y:this.y}},t.prototype.add=function(t){return this.x+=t.x,this.y+=t.y,this},t.prototype.subtract=function(t){return this.x-=t.x,this.y-=t.y,this},t.prototype.equals=function(t){return t.x===this.x&&t.y===this.y},t.prototype.multiplyByVector=function(t){return this.x*=t.x,this.y*=t.y,this},t.prototype.mulV=function(t){return this.multiplyByVector(t)},t.prototype.divideByVector=function(t){return this.x/=t.x,this.y/=t.y,this},t.prototype.divV=function(t){return this.divideByVector(t)},t.prototype.multiplyByScalar=function(t){return this.x*=t,this.y*=t,this},t.prototype.mulS=function(t){return this.multiplyByScalar(t)},t.prototype.divideByScalar=function(t){return this.x/=t,this.y/=t,this},t.prototype.divS=function(t){return this.divideByScalar(t)},t.prototype.normalise=function(){return this.divideByScalar(this.magnitude())},t.prototype.normalize=function(){return this.normalise()},t.prototype.unit=function(){return this.normalise()},t.prototype.magnitude=function(){var t=this.x,e=this.y;return Math.sqrt(t*t+e*e)},t.prototype.length=function(){return this.magnitude()},t.prototype.lengthSq=function(){var t=this.x,e=this.y;return t*t+e*e},t.prototype.dot=function(t){return t.x*this.x+t.y*this.y},t.prototype.cross=function(t){return this.x*t.y-this.y*t.x},t.prototype.reverse=function(){return this.x=-this.x,this.y=-this.y,this},t.prototype.abs=function(){return this.x=Math.abs(this.x),this.y=Math.abs(this.y),this},t.prototype.zero=function(){return this.x=this.y=0,this},t.prototype.distance=function(t){var e=this.x-t.x,i=this.y-t.y;return Math.sqrt(e*e+i*i)},t.prototype.rotate=function(t){var e=Math.cos(t),i=Math.sin(t),n=this.x,o=this.y;return this.x=n*e-o*i,this.y=n*i+o*e,this},t.prototype.round=function(t){void 0===t&&(t=2);var e=i[t];return this.x=(.5+this.x*e<<0)/e,this.y=(.5+this.y*e<<0)/e,this},t.prototype.clone=function(){return new this.ctor(this.x,this.y)},t}();e.AbstractVector=n},"./node_modules/vector2d/src/ArrayVector.js":function(t,e,i){var n,o=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])},function(t,e){function i(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});Object.defineProperty(e,"__esModule",{value:!0});var r=function(t){function e(i,n){var o=t.call(this,e)||this;return o.axes=[i,n],o.ctor=e,o}return o(e,t),Object.defineProperty(e.prototype,"x",{get:function(){return this.axes[0]},set:function(t){this.axes[0]=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"y",{get:function(){return this.axes[1]},set:function(t){this.axes[1]=t},enumerable:!0,configurable:!0}),e}(i("./node_modules/vector2d/src/AbstractVector.js").AbstractVector);e.ArrayVector=r},"./node_modules/vector2d/src/Float32Vector.js":function(t,e,i){var n,o=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])},function(t,e){function i(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});Object.defineProperty(e,"__esModule",{value:!0});var r=function(t){function e(i,n){var o=t.call(this,e)||this;return o.axes=new Float32Array(2),o.axes[0]=i,o.axes[1]=n,o}return o(e,t),Object.defineProperty(e.prototype,"x",{get:function(){return this.axes[0]},set:function(t){this.axes[0]=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"y",{get:function(){return this.axes[1]},set:function(t){this.axes[1]=t},enumerable:!0,configurable:!0}),e}(i("./node_modules/vector2d/src/AbstractVector.js").AbstractVector);e.Float32Vector=r},"./node_modules/vector2d/src/Vec2D.js":(t,e,i)=>{function n(t){for(var i in t)e.hasOwnProperty(i)||(e[i]=t[i])}Object.defineProperty(e,"__esModule",{value:!0}),n(i("./node_modules/vector2d/src/AbstractVector.js")),n(i("./node_modules/vector2d/src/ArrayVector.js")),n(i("./node_modules/vector2d/src/Float32Vector.js")),n(i("./node_modules/vector2d/src/Vector.js"))},"./node_modules/vector2d/src/Vector.js":function(t,e,i){var n,o=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])},function(t,e){function i(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});Object.defineProperty(e,"__esModule",{value:!0});var r=function(t){function e(i,n){var o=t.call(this,e)||this;return o._x=i,o._y=n,o}return o(e,t),Object.defineProperty(e.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t},enumerable:!0,configurable:!0}),e}(i("./node_modules/vector2d/src/AbstractVector.js").AbstractVector);e.Vector=r}},e={};function i(n){var o=e[n];if(void 0!==o)return o.exports;var r=e[n]={exports:{}};return t[n].call(r.exports,r,r.exports,i),r.exports}i.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return i.d(e,{a:e}),e},i.d=(t,e)=>{for(var n in e)i.o(e,n)&&!i.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),i.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i("./src/index.ts")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,