/*! For license information please see script.js.LICENSE.txt */
(()=>{"use strict";var t={"./src/ArcSegment.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>c});var o,r=n("./src/Drawer.ts"),i=n("./node_modules/vector2d/src/Vec2D.js"),s=n("./src/Segment.ts"),a=(o=function(t,e){return o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},o(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});const c=function(t){function e(e,n,o,r,i,s){var a=t.call(this)||this;return a.center=e,a.radius=n,a.startAngle=o,a.endAngle=r,a.counterClockwise=i,a.isCollidable=s,a}return a(e,t),e.prototype.draw=function(t,e){t.lineCap="round",t.strokeStyle=e,1==this.isCollidable&&(t.beginPath(),t.arc(this.center.x,this.center.y,this.radius,this.startAngle,this.endAngle,this.counterClockwise),t.stroke(),t.closePath())},e.prototype.drawDebug=function(t,e){var n=this.counterClockwise?-Math.PI:Math.PI;n+=this.endAngle,t.lineCap="round",(0,r.drawDot)(this.center.x,this.center.y,5,"#000000"),(0,r.drawArrow)(t,new i.Vector(this.endPoint.x,this.endPoint.y),new i.Vector(this.endPoint.x+this.radius*Math.cos(n),this.endPoint.y+this.radius*Math.sin(n)))},Object.defineProperty(e.prototype,"endPoint",{get:function(){return new i.Vector(this.center.x+this.radius*Math.cos(this.endAngle),this.center.y+this.radius*Math.sin(this.endAngle))},enumerable:!1,configurable:!0}),e.prototype.isCounterClockwise=function(){return this.counterClockwise},e}(s.default)},"./src/Drawer.ts":(t,e,n)=>{n.r(e),n.d(e,{drawArrow:()=>a,drawDot:()=>s,drawGrid:()=>i});var o=n("./node_modules/vector2d/src/Vec2D.js"),r=n("./src/index.ts");function i(){r.backgroundCanvasCtx.clearRect(0,0,r.backgroundCanvas.width,r.backgroundCanvas.height),r.backgroundCanvasCtx.strokeStyle="rgba(0, 0, 0, 0.3)",r.backgroundCanvasCtx.lineWidth=2;for(var t=r.gridSize;t<r.backgroundCanvas.width;t+=r.gridSize)r.backgroundCanvasCtx.beginPath(),r.backgroundCanvasCtx.moveTo(t,0),r.backgroundCanvasCtx.lineTo(t,r.backgroundCanvas.height),r.backgroundCanvasCtx.stroke();for(var e=r.gridSize;e<r.backgroundCanvas.height;e+=r.gridSize)r.backgroundCanvasCtx.beginPath(),r.backgroundCanvasCtx.moveTo(0,e),r.backgroundCanvasCtx.lineTo(r.backgroundCanvas.width,e),r.backgroundCanvasCtx.stroke()}function s(t,e,n,o){r.backgroundCanvasCtx.beginPath(),r.backgroundCanvasCtx.arc(t,e,n,0,2*Math.PI,!1),r.backgroundCanvasCtx.fillStyle=o,r.backgroundCanvasCtx.fill(),r.backgroundCanvasCtx.closePath()}function a(t,e,n){if(e.x!=n.x&&e.y!=n.y){var r=Math.atan2(n.y-e.y,n.x-e.x),i=10,s=new o.Vector(n.x,n.y);s.x-=11.5*Math.cos(r),s.y-=11.5*Math.sin(r),t.beginPath(),t.moveTo(e.x,e.y),t.lineTo(s.x,s.y),t.strokeStyle="#bbbbbb",t.lineWidth=10,t.stroke(),t.beginPath(),t.moveTo(s.x,s.y),t.lineTo(s.x-i*Math.cos(r-Math.PI/7),s.y-i*Math.sin(r-Math.PI/7)),t.lineTo(s.x-i*Math.cos(r+Math.PI/7),s.y-i*Math.sin(r+Math.PI/7)),t.lineTo(s.x,s.y),t.lineTo(s.x-i*Math.cos(r-Math.PI/7),s.y-i*Math.sin(r-Math.PI/7)),t.strokeStyle="#bbbbbb",t.lineWidth=10,t.stroke(),t.fillStyle="#bbbbbb",t.fill(),t.closePath()}}},"./src/InputManager.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>s});var o=n("./node_modules/vector2d/src/Vec2D.js"),r=n("./src/ArcSegment.ts"),i=n("./src/LineSegment.ts");const s=function(){function t(t,e,n){this.keyMap={},window.addEventListener("keydown",this.onKeyDown.bind(this)),window.addEventListener("keyup",this.onKeyUp.bind(this)),this.snake=t,this.leftKey=e,this.rightKey=n}return t.prototype.onKeyDown=function(t){var e=t.key.toUpperCase();if(e==this.leftKey||e==this.rightKey){if(this.keyMap[this.rightKey]&&e==this.leftKey)this.keyMap[this.rightKey]=!1;else if(this.keyMap[this.leftKey]&&e==this.rightKey)this.keyMap[this.leftKey]=!1;else if(this.keyMap[e])return;this.keyMap[e]=!0;var n=this.snake.head,s=n.endPoint,a=0;n instanceof i.default?(a+=Math.PI/2,e==this.rightKey&&this.snake.addSegment(new r.default(new o.Vector(s.x+this.snake.turnRadius*Math.cos(this.snake.head.endAngle+a),s.y+this.snake.turnRadius*Math.sin(this.snake.head.endAngle+a)),this.snake.turnRadius,this.snake.head.endAngle-a,this.snake.head.endAngle-a,!1,n.isCollidable)),e==this.leftKey&&this.snake.addSegment(new r.default(new o.Vector(s.x+this.snake.turnRadius*Math.cos(this.snake.head.endAngle-a),s.y+this.snake.turnRadius*Math.sin(this.snake.head.endAngle-a)),this.snake.turnRadius,this.snake.head.endAngle+a,this.snake.head.endAngle+a,!0,n.isCollidable))):n instanceof r.default&&(a=n.isCounterClockwise?-Math.PI:Math.PI,e==this.rightKey&&this.snake.addSegment(new r.default(new o.Vector(s.x-this.snake.turnRadius*Math.cos(this.snake.head.endAngle+a),s.y-this.snake.turnRadius*Math.sin(this.snake.head.endAngle+a)),this.snake.turnRadius,this.snake.head.endAngle-a,this.snake.head.endAngle-a,!1,n.isCollidable)),e==this.leftKey&&this.snake.addSegment(new r.default(new o.Vector(s.x-this.snake.turnRadius*Math.cos(this.snake.head.endAngle-a),s.y-this.snake.turnRadius*Math.sin(this.snake.head.endAngle-a)),this.snake.turnRadius,this.snake.head.endAngle+a,this.snake.head.endAngle+a,!0,n.isCollidable)))}},t.prototype.onKeyUp=function(t){console.log(this.keyMap);var e=t.key.toUpperCase();if(this.keyMap[e]){this.keyMap[e]=!1,console.log(this.snake.head);var n=this.snake.head,s=n.endPoint,a=n.endAngle;e==this.leftKey&&n instanceof r.default&&n.isCounterClockwise()?a-=Math.PI/2:e==this.rightKey&&n instanceof r.default&&!n.isCounterClockwise()&&(a+=Math.PI/2),this.snake.addSegment(new i.default(s,new o.Vector(s.x+5*Math.cos(a),s.y+5*Math.sin(a)),n.isCollidable,a)),console.log(this.snake.head)}},t.prototype.dispose=function(){window.removeEventListener("keydown",this.onKeyDown.bind(this)),window.removeEventListener("keyup",this.onKeyUp.bind(this))},t}()},"./src/LineSegment.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>s});var o,r=n("./src/Segment.ts"),i=(o=function(t,e){return o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},o(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});const s=function(t){function e(e,n,o,r){var i=t.call(this)||this;return i.isCollidable=!0,i.startPoint=e,i.endPoint=n,i.isCollidable=o,i.endAngle=r,i}return i(e,t),e.prototype.draw=function(t,e){t.strokeStyle=e,t.lineCap="round",1==this.isCollidable&&(t.beginPath(),t.moveTo(this.startPoint.x,this.startPoint.y),t.lineTo(this.endPoint.x,this.endPoint.y),t.stroke(),t.closePath())},e.prototype.calcEndAngle=function(){return Math.atan((this.endPoint.y-this.startPoint.y)/(this.endPoint.x-this.startPoint.x))},e}(r.default)},"./src/Segment.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>o});const o=function(){}},"./src/Snake.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>s});var o=n("./node_modules/vector2d/src/Vec2D.js"),r=n("./src/ArcSegment.ts"),i=n("./src/LineSegment.ts");const s=function(){function t(t,e){this.segments=[],this.isAlive=!0,this.turnRadius=130,this.addSegment(t),this.color=e}return t.prototype.addSegment=function(t){this.segments.push(t)},Object.defineProperty(t.prototype,"head",{get:function(){return this.segments.slice(-1).pop()},enumerable:!1,configurable:!0}),t.prototype.draw=function(t){var e=this;t.lineWidth=12,this.segments.forEach((function(n,o){n.draw(t,e.color),e.head==n&&(n instanceof r.default?(t.beginPath(),t.arc(n.center.x,n.center.y,n.radius,n.endAngle,n.endAngle,n.isCounterClockwise()),t.stroke(),t.closePath()):n instanceof i.default&&(t.beginPath(),t.moveTo(n.endPoint.x,n.endPoint.y),t.lineTo(n.endPoint.x,n.endPoint.y),t.stroke(),t.closePath()))}))},t.prototype.move=function(t){var e=this.head;if(e)if(e instanceof i.default){var n=t*Math.cos(e.endAngle),s=t*Math.sin(e.endAngle);if(e.isCollidable&&Math.random()>.99)return void this.addSegment(new i.default(e.endPoint,new o.Vector(e.endPoint.x+n,e.endPoint.y+s),!1,e.endAngle));if(!e.isCollidable&&Math.random()>.97)return void this.addSegment(new i.default(e.endPoint,new o.Vector(e.endPoint.x+n,e.endPoint.y+s),!0,e.endAngle));var a=new o.Vector(e.endPoint.x+n,e.endPoint.y+s);e.endPoint=a}else if(e instanceof r.default){var c=t/e.radius;if(e.isCollidable&&Math.random()>.99)return void this.addSegment(new r.default(e.center,e.radius,e.endAngle,e.endAngle,e.isCounterClockwise(),!1));if(!e.isCollidable&&Math.random()>.97)return void this.addSegment(new r.default(e.center,e.radius,e.endAngle,e.endAngle,e.isCounterClockwise(),!0));e.isCounterClockwise()?e.endAngle=e.endAngle-c:e.endAngle=e.endAngle+c}},t.prototype.kill=function(){},t}()},"./src/index.ts":(t,e,n)=>{n.r(e),n.d(e,{backgroundCanvas:()=>l,backgroundCanvasCtx:()=>y,fps:()=>d,gameCanvas:()=>u,gameCanvasCtx:()=>h,gridSize:()=>f});var o=n("./node_modules/vector2d/src/Vec2D.js"),r=n("./src/Drawer.ts"),i=n("./src/InputManager.ts"),s=n("./src/LineSegment.ts"),a=n("./src/Snake.ts"),c=document.createElement("div");c.style.position="absolute",c.style.top="10px",c.style.left="10px",c.style.color="black",document.body.appendChild(c);var d=60,u=document.getElementById("game-canvas"),h=u.getContext("2d"),l=document.getElementById("background-canvas"),y=l.getContext("2d");l.width=l.getBoundingClientRect().width,l.height=l.getBoundingClientRect().height,u.width=u.getBoundingClientRect().width,u.height=u.getBoundingClientRect().height;var f=60,p=0,g=performance.now()/10;window.addEventListener("resize",(function(){u.width=u.getBoundingClientRect().width,u.height=u.getBoundingClientRect().height,l.width=l.getBoundingClientRect().width,l.height=l.getBoundingClientRect().height,(0,r.drawGrid)(),b.draw(h),v.draw(h)})),(0,r.drawGrid)();var b=new a.default(new s.default(new o.Vector(100,100),new o.Vector(110,110),!0,Math.PI/4),"#ff0088"),v=new a.default(new s.default(new o.Vector(300,300),new o.Vector(295,295),!0,Math.PI/4),"#33ee55");new i.default(b,"A","D"),new i.default(v,"J","L"),b.draw(h),v.draw(h),requestAnimationFrame((function t(){++p%10==0&&(d=function(){var t=performance.now()/10,e=t-g,n=Math.round(1e3/e);return g=t,n}(),c.innerText="FPS: ".concat(d)),h.clearRect(0,0,u.width,u.height),b.draw(h),b.move(2),v.draw(h),v.move(2),requestAnimationFrame(t)}))},"./node_modules/vector2d/src/AbstractVector.js":(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=[1,10,100,1e3,1e4,1e5,1e6,1e7,1e8,1e9,1e10],o=function(){function t(t){this.ctor=t}return t.prototype.setAxes=function(t,e){return this.x=t,this.y=e,this},t.prototype.getX=function(){return this.x},t.prototype.setX=function(t){return this.x=t,this},t.prototype.getY=function(){return this.y},t.prototype.setY=function(t){return this.y=t,this},t.prototype.toString=function(t){return void 0===t&&(t=!1),t?"("+Math.round(this.x)+", "+Math.round(this.y)+")":"("+this.x+", "+this.y+")"},t.prototype.toArray=function(){return[this.x,this.y]},t.prototype.toObject=function(){return{x:this.x,y:this.y}},t.prototype.add=function(t){return this.x+=t.x,this.y+=t.y,this},t.prototype.subtract=function(t){return this.x-=t.x,this.y-=t.y,this},t.prototype.equals=function(t){return t.x===this.x&&t.y===this.y},t.prototype.multiplyByVector=function(t){return this.x*=t.x,this.y*=t.y,this},t.prototype.mulV=function(t){return this.multiplyByVector(t)},t.prototype.divideByVector=function(t){return this.x/=t.x,this.y/=t.y,this},t.prototype.divV=function(t){return this.divideByVector(t)},t.prototype.multiplyByScalar=function(t){return this.x*=t,this.y*=t,this},t.prototype.mulS=function(t){return this.multiplyByScalar(t)},t.prototype.divideByScalar=function(t){return this.x/=t,this.y/=t,this},t.prototype.divS=function(t){return this.divideByScalar(t)},t.prototype.normalise=function(){return this.divideByScalar(this.magnitude())},t.prototype.normalize=function(){return this.normalise()},t.prototype.unit=function(){return this.normalise()},t.prototype.magnitude=function(){var t=this.x,e=this.y;return Math.sqrt(t*t+e*e)},t.prototype.length=function(){return this.magnitude()},t.prototype.lengthSq=function(){var t=this.x,e=this.y;return t*t+e*e},t.prototype.dot=function(t){return t.x*this.x+t.y*this.y},t.prototype.cross=function(t){return this.x*t.y-this.y*t.x},t.prototype.reverse=function(){return this.x=-this.x,this.y=-this.y,this},t.prototype.abs=function(){return this.x=Math.abs(this.x),this.y=Math.abs(this.y),this},t.prototype.zero=function(){return this.x=this.y=0,this},t.prototype.distance=function(t){var e=this.x-t.x,n=this.y-t.y;return Math.sqrt(e*e+n*n)},t.prototype.rotate=function(t){var e=Math.cos(t),n=Math.sin(t),o=this.x,r=this.y;return this.x=o*e-r*n,this.y=o*n+r*e,this},t.prototype.round=function(t){void 0===t&&(t=2);var e=n[t];return this.x=(.5+this.x*e<<0)/e,this.y=(.5+this.y*e<<0)/e,this},t.prototype.clone=function(){return new this.ctor(this.x,this.y)},t}();e.AbstractVector=o},"./node_modules/vector2d/src/ArrayVector.js":function(t,e,n){var o,r=this&&this.__extends||(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=function(t){function e(n,o){var r=t.call(this,e)||this;return r.axes=[n,o],r.ctor=e,r}return r(e,t),Object.defineProperty(e.prototype,"x",{get:function(){return this.axes[0]},set:function(t){this.axes[0]=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"y",{get:function(){return this.axes[1]},set:function(t){this.axes[1]=t},enumerable:!0,configurable:!0}),e}(n("./node_modules/vector2d/src/AbstractVector.js").AbstractVector);e.ArrayVector=i},"./node_modules/vector2d/src/Float32Vector.js":function(t,e,n){var o,r=this&&this.__extends||(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=function(t){function e(n,o){var r=t.call(this,e)||this;return r.axes=new Float32Array(2),r.axes[0]=n,r.axes[1]=o,r}return r(e,t),Object.defineProperty(e.prototype,"x",{get:function(){return this.axes[0]},set:function(t){this.axes[0]=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"y",{get:function(){return this.axes[1]},set:function(t){this.axes[1]=t},enumerable:!0,configurable:!0}),e}(n("./node_modules/vector2d/src/AbstractVector.js").AbstractVector);e.Float32Vector=i},"./node_modules/vector2d/src/Vec2D.js":(t,e,n)=>{function o(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}Object.defineProperty(e,"__esModule",{value:!0}),o(n("./node_modules/vector2d/src/AbstractVector.js")),o(n("./node_modules/vector2d/src/ArrayVector.js")),o(n("./node_modules/vector2d/src/Float32Vector.js")),o(n("./node_modules/vector2d/src/Vector.js"))},"./node_modules/vector2d/src/Vector.js":function(t,e,n){var o,r=this&&this.__extends||(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=function(t){function e(n,o){var r=t.call(this,e)||this;return r._x=n,r._y=o,r}return r(e,t),Object.defineProperty(e.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t},enumerable:!0,configurable:!0}),e}(n("./node_modules/vector2d/src/AbstractVector.js").AbstractVector);e.Vector=i}},e={};function n(o){var r=e[o];if(void 0!==r)return r.exports;var i=e[o]={exports:{}};return t[o].call(i.exports,i,i.exports,n),i.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var o in e)n.o(e,o)&&!n.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n("./src/index.ts")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,