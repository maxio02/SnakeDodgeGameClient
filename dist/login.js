/*! For license information please see login.js.LICENSE.txt */
(()=>{"use strict";var t={"./src/ArcSegment.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>c});var o,i=n("./src/Drawer.ts"),r=n("./node_modules/vector2d/src/Vec2D.js"),s=n("./src/Segment.ts"),a=(o=function(t,e){return o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},o(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});const c=function(t){function e(e,n,o,i,r,s){var a=t.call(this)||this;return a.center=e,a.radius=n,a.startAngle=o,a.endAngle=i,a.counterClockwise=r,a.isCollidable=s,a}return a(e,t),e.prototype.draw=function(t,e){t.lineCap="round",t.strokeStyle=e,1==this.isCollidable&&(t.beginPath(),t.arc(this.center.x,this.center.y,this.radius,this.startAngle,this.endAngle,this.counterClockwise),t.stroke(),t.closePath())},e.prototype.drawDebug=function(t,e){var n=this.counterClockwise?-Math.PI:Math.PI;n+=this.endAngle,t.lineCap="round",(0,i.drawDot)(this.center.x,this.center.y,5,"#000000"),(0,i.drawArrow)(t,new r.Vector(this.endPoint.x,this.endPoint.y),new r.Vector(this.endPoint.x+this.radius*Math.cos(n),this.endPoint.y+this.radius*Math.sin(n))),(0,i.drawArc)(this.center.x,this.center.y,this.radius,0,0,!1)},Object.defineProperty(e.prototype,"endPoint",{get:function(){return new r.Vector(this.center.x+this.radius*Math.cos(this.endAngle),this.center.y+this.radius*Math.sin(this.endAngle))},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"penpendicularEndAngle",{get:function(){return this.isCounterClockwise?this.endAngle-Math.PI/2:this.endAngle+Math.PI/2},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"penpendicularStartAngle",{get:function(){return this.isCounterClockwise?this.startAngle-Math.PI/2:this.startAngle+Math.PI/2},enumerable:!1,configurable:!0}),e.prototype.isCounterClockwise=function(){return this.counterClockwise},e.prototype.getContinuingSegment=function(t){return new e(this.center.clone().add(t),this.radius,this.endAngle,this.endAngle,this.counterClockwise,this.isCollidable)},e}(s.default)},"./src/Drawer.ts":(t,e,n)=>{n.r(e),n.d(e,{drawArc:()=>a,drawArrow:()=>c,drawDot:()=>s,drawGrid:()=>r});var o=n("./node_modules/vector2d/src/Vec2D.js"),i=n("./src/index.ts");function r(){i.backgroundCanvasCtx.clearRect(0,0,i.backgroundCanvas.width,i.backgroundCanvas.height),i.backgroundCanvasCtx.strokeStyle="rgba(0, 0, 0, 0.3)",i.backgroundCanvasCtx.lineWidth=2;for(var t=i.gridSize;t<i.backgroundCanvas.width;t+=i.gridSize)i.backgroundCanvasCtx.beginPath(),i.backgroundCanvasCtx.moveTo(t,0),i.backgroundCanvasCtx.lineTo(t,i.backgroundCanvas.height),i.backgroundCanvasCtx.stroke();for(var e=i.gridSize;e<i.backgroundCanvas.height;e+=i.gridSize)i.backgroundCanvasCtx.beginPath(),i.backgroundCanvasCtx.moveTo(0,e),i.backgroundCanvasCtx.lineTo(i.backgroundCanvas.width,e),i.backgroundCanvasCtx.stroke()}function s(t,e,n,o){i.backgroundCanvasCtx.beginPath(),i.backgroundCanvasCtx.arc(t,e,n,0,2*Math.PI,!1),i.backgroundCanvasCtx.fillStyle=o,i.backgroundCanvasCtx.fill(),i.backgroundCanvasCtx.closePath()}function a(t,e,n,o,r,s){i.backgroundCanvasCtx.lineCap="round",i.backgroundCanvasCtx.strokeStyle="#3466aa",i.backgroundCanvasCtx.beginPath(),i.backgroundCanvasCtx.arc(t,e,n,0,2*Math.PI,s),i.backgroundCanvasCtx.lineWidth=5,i.backgroundCanvasCtx.stroke(),i.backgroundCanvasCtx.closePath()}function c(t,e,n){if(e.x!=n.x&&e.y!=n.y){var i=Math.atan2(n.y-e.y,n.x-e.x),r=10,s=new o.Vector(n.x,n.y);s.x-=11.5*Math.cos(i),s.y-=11.5*Math.sin(i),t.beginPath(),t.moveTo(e.x,e.y),t.lineTo(s.x,s.y),t.strokeStyle="#bbbbbb",t.lineWidth=10,t.stroke(),t.beginPath(),t.moveTo(s.x,s.y),t.lineTo(s.x-r*Math.cos(i-Math.PI/7),s.y-r*Math.sin(i-Math.PI/7)),t.lineTo(s.x-r*Math.cos(i+Math.PI/7),s.y-r*Math.sin(i+Math.PI/7)),t.lineTo(s.x,s.y),t.lineTo(s.x-r*Math.cos(i-Math.PI/7),s.y-r*Math.sin(i-Math.PI/7)),t.strokeStyle="#bbbbbb",t.lineWidth=10,t.stroke(),t.fillStyle="#bbbbbb",t.fill(),t.closePath()}}},"./src/InputManager.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>i});var o=n("./src/WebSocketClient/websocket.ts");const i=function(){function t(t,e,n){this.keyMap={},window.addEventListener("keydown",this.onKeyDown.bind(this)),window.addEventListener("keyup",this.onKeyUp.bind(this)),this.snake=t,this.leftKey=e,this.rightKey=n}return t.prototype.onKeyDown=function(t){if(this.snake.isAlive){var e=t.key.toUpperCase();if(e==this.leftKey||e==this.rightKey){if(this.keyMap[this.rightKey]&&e==this.leftKey)this.keyMap[this.rightKey]=!1;else if(this.keyMap[this.leftKey]&&e==this.rightKey)this.keyMap[this.leftKey]=!1;else if(this.keyMap[e])return;this.keyMap[e]=!0,this.snake.head.endPoint,(0,o.sendKeyEventToServer)(e==this.rightKey?"right":"left",!0)}}},t.prototype.onKeyUp=function(t){if(this.snake.isAlive){var e=t.key.toUpperCase();this.keyMap[e]&&(this.keyMap[e]=!1,(0,o.sendKeyEventToServer)(e==this.rightKey?"right":"left",!1))}},t.prototype.dispose=function(){window.removeEventListener("keydown",this.onKeyDown.bind(this)),window.removeEventListener("keyup",this.onKeyUp.bind(this))},t}()},"./src/LineSegment.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>s});var o,i=n("./src/Segment.ts"),r=(o=function(t,e){return o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},o(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});const s=function(t){function e(e,n,o,i){var r=t.call(this)||this;return r.isCollidable=!0,r.startPoint=e,r.endPoint=n,r.isCollidable=o,r.endAngle=i,r}return r(e,t),e.prototype.draw=function(t,e){t.strokeStyle=e,t.lineCap="round",1==this.isCollidable&&(t.beginPath(),t.moveTo(this.startPoint.x,this.startPoint.y),t.lineTo(this.endPoint.x,this.endPoint.y),t.stroke(),t.closePath())},e.prototype.calcEndAngle=function(){return Math.atan((this.endPoint.y-this.startPoint.y)/(this.endPoint.x-this.startPoint.x))},Object.defineProperty(e.prototype,"length",{get:function(){return Math.sqrt(Math.pow(this.startPoint.x-this.endPoint.x,2)+Math.pow(this.startPoint.y-this.endPoint.y,2))},enumerable:!1,configurable:!0}),e.prototype.getContinuingSegment=function(t){var n=this.endPoint.clone().add(t);return new e(n,n,this.isCollidable,this.endAngle)},e}(i.default)},"./src/MenuManager/login.ts":(t,e,n)=>{n.r(e),n.d(e,{currentPlayer:()=>a,currentRoom:()=>s,handleReadyState:()=>P,handleRoomAction:()=>w,showErrorAnimation:()=>M,showRoomView:()=>S,switchGameView:()=>E,updateButton:()=>C,updateColorPicker:()=>_,updatePlayerColor:()=>O,updateRoomList:()=>k});var o=n("./src/ViewModels/Player.ts"),i=n("./src/ViewModels/Room.ts"),r=n("./src/WebSocketClient/websocket.ts"),s=null,a=null,c=document.getElementById("roomCodeInput"),l=document.getElementById("usernameInput"),d=document.getElementById("joinButton"),u=document.getElementById("readyButton"),h=document.getElementById("login-div"),y=document.getElementById("room-div"),p=document.getElementById("game-canvas-container"),f=document.getElementById("color-picker"),g=document.getElementById("room-users-list"),m=document.getElementById("room-code"),v=document.getElementById("player-count"),b=document.getElementById("color-picker-container"),x=document.getElementById("start-progress-bar");function C(){""==l.value.trim()?d.disabled=!0:d.disabled=!1,5==c.value.trim().length?d.textContent="JOIN ROOM":d.textContent="CREATE ROOM"}function w(){var t=l.value;t&&(a=new o.Player(t),"CREATE ROOM"===d.innerText?(0,r.createRoom)(l.value):(0,r.joinRoom)(c.value.toUpperCase(),l.value))}function P(){a.isReady=!a.isReady,(0,r.setPlayerData)(a,s.getCode()),a.isReady?(u.classList.remove("red-button"),u.classList.add("green-button")):(u.classList.add("red-button"),u.classList.remove("green-button"))}function S(t){var e=JSON.parse(t.toString());s=new i.Room(e.room.code,e.room.host,e.room.players,e.room.maxSize),a.username==s.getHost().username&&document.getElementById("startButton").classList.remove("display-none"),b.style.backgroundColor=a.color,f.value=a.color,document.getElementById("color-label").style.color=A(f.value,"#FFFFFF","#000000"),h.classList.add("display-none"),y.classList.add("display-flex"),c.value=s.getCode(),m.innerHTML=s.getCode(),(0,r.setPlayerData)(a,s.getCode()),k(t)}function k(t){var e,n,o=JSON.parse(t.toString());s.setPlayers(o.room.players),s.setHost(o.room.host),s.setMaxSize(o.room.maxSize),v.innerHTML="".concat(Object.keys(s.getPlayers()).length,"/").concat(s.getMaxSize()),g.innerHTML="",Object.values(s.getPlayers()).forEach((function(t){var e=document.createElement("li");e.textContent=t.username+"",t.username==s.getHost().username?e.insertAdjacentHTML("afterbegin",'<i class="fa-solid fa-crown" style="color: '.concat(t.color,';"></i>')):e.insertAdjacentHTML("afterbegin",'<i class="fa-solid fa-circle" style="color: '.concat(t.color,'; margin-left: 4px"></i>')),t.isReady?e.insertAdjacentHTML("beforeend",' <i class="fa-solid fa-circle" style="color: #37cb48;"></i>'):e.insertAdjacentHTML("beforeend",' <i class="fa-solid fa-circle" style="color: #cb3737;"></i>'),g.appendChild(e)})),a.username==s.getHost().username&&document.getElementById("startButton").classList.remove("display-none"),e=Object.values(s.getPlayers()).filter((function(t){return t.isReady})).length,0!=(n=s.getMaxSize())&&(x.style.width=Math.floor(e/n*100)+"%")}function M(){d.classList.add("red-button"),d.classList.add("wiggle"),setTimeout((function(){d.classList.remove("red-button"),d.classList.remove("wiggle")}),600)}function _(){b.style.backgroundColor=f.value}function O(){a.color=f.value,document.getElementById("color-label").style.color=A(f.value,"#FFFFFF","#000000"),(0,r.setPlayerData)(a,s.getCode())}function A(t,e,n){var o="#"===t.charAt(0)?t.substring(1,7):t,i=[parseInt(o.substring(0,2),16)/255,parseInt(o.substring(2,4),16)/255,parseInt(o.substring(4,6),16)/255].map((function(t){return t<=.03928?t/12.92:Math.pow((t+.055)/1.055,2.4)}));return.2126*i[0]+.7152*i[1]+.0722*i[2]>.4?n:e}function E(t){switch(t.state){case 0:s.setGameState(0),h.classList.add("display-none"),y.classList.add("display-none"),y.classList.remove("display-flex"),p.classList.remove("display-none"),p.classList.add("display-flex");break;case 1:s.setGameState(1),h.classList.add("display-none"),y.classList.add("display-flex"),p.classList.add("display-none")}}window.onload=function(){C()},window.updateButton=C,window.handleRoomAction=w,window.handleReadyState=P,window.updateColorPicker=_,window.updatePlayerColor=O,window.startGame=function(){a.username==s.getHost().username&&(0,r.sendStartCommand)(s.getCode())}},"./src/ParticleSystem/Emitter.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>s});var o=n("./src/ParticleSystem/Particle.ts"),i=n("./src/ParticleSystem/ParticleSystemUtils.ts"),r=function(){return r=Object.assign||function(t){for(var e,n=1,o=arguments.length;n<o;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},r.apply(this,arguments)};const s=function(){function t(t,e,n,o,i,r,s,a,c,l,d){void 0===i&&(i="circle"),void 0===a&&(a=!0),void 0===c&&(c=!0),void 0===d&&(d=0),this.aliveParticles=[],this.ticks=0,this.position=t,this.emitTime=e,this.size=n,this.speed=o,this.shape=i,this.color=r,this.canvasCtx=s,this.fadeColor=a,this.fadeSize=c,this.particleMaxAge=l,this.emitTimeMillis=d}return t.prototype.tick=function(t){this.emitTimeMillis+this.particleMaxAge<0||(this.emitTimeMillis-=t,this.ticks%this.emitTime==0&&this.emitTimeMillis>0&&(this.aliveParticles.push(new o.default(this.position.clone(),(0,i.getRandomDirection)(),this.size,this.speed,this.shape,r({},this.color),this.canvasCtx,this.particleMaxAge,this.fadeColor,this.fadeSize)),this.aliveParticles.push(new o.default(this.position.clone(),(0,i.getRandomDirection)(),this.size,this.speed,this.shape,r({},this.color),this.canvasCtx,this.particleMaxAge,this.fadeColor,this.fadeSize)),this.aliveParticles.push(new o.default(this.position.clone(),(0,i.getRandomDirection)(),this.size,this.speed,this.shape,r({},this.color),this.canvasCtx,this.particleMaxAge,this.fadeColor,this.fadeSize))),this.aliveParticles.forEach((function(e){e.tick(t)})),this.aliveParticles=this.aliveParticles.filter((function(t){return t.age>0})),this.ticks++)},t.prototype.draw=function(){this.aliveParticles.forEach((function(t){t.draw()}))},t}()},"./src/ParticleSystem/Particle.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>o});const o=function(){function t(t,e,n,o,i,r,s,a,c,l){void 0===i&&(i="circle"),this.position=t,this.velocity=e,this.size=n,this.speed=o,this.shape=i,this.color=r,this.canvasCtx=s,this.fadeColor=c,this.fadeSize=l,this.age=a,this.colorFadeAmount=this.color.a/this.age,this.sizeFadeAmount=this.size/this.age}return t.prototype.tick=function(t){this.position.add(this.velocity.clone().multiplyByScalar(t*this.speed)),this.fadeColor&&(this.color.a-=this.colorFadeAmount),this.fadeSize&&(this.size-=this.sizeFadeAmount),this.age--},t.prototype.draw=function(){switch(this.canvasCtx.moveTo(this.position.x,this.position.y),this.canvasCtx.fillStyle="rgba(".concat(this.color.r,",").concat(this.color.g,", ").concat(this.color.b,", ").concat(this.color.a,")"),this.canvasCtx.beginPath(),this.shape){case"circle":this.canvasCtx.arc(this.position.x,this.position.y,this.size,0,2*Math.PI),this.canvasCtx.fill();break;case"square":this.canvasCtx.fillRect(this.position.x-this.size,this.position.y-this.size,2*this.size,2*this.size)}this.canvasCtx.closePath()},t}()},"./src/ParticleSystem/ParticleSystemUtils.ts":(t,e,n)=>{n.r(e),n.d(e,{getRandomDirection:()=>i,hexToRgb:()=>r});var o=n("./node_modules/vector2d/src/Vec2D.js");function i(){return new o.Vector(2*Math.random()-1,2*Math.random()-1)}function r(t){var e=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(t);return e?{r:parseInt(e[1],16),g:parseInt(e[2],16),b:parseInt(e[3],16)}:null}},"./src/Segment.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>o});const o=function(){}},"./src/Snake.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>l});var o=n("./node_modules/vector2d/src/Vec2D.js"),i=n("./src/ArcSegment.ts"),r=n("./src/LineSegment.ts"),s=n("./src/ParticleSystem/Emitter.ts"),a=n("./src/ParticleSystem/ParticleSystemUtils.ts"),c=function(){return c=Object.assign||function(t){for(var e,n=1,o=arguments.length;n<o;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},c.apply(this,arguments)};const l=function(){function t(t,e,n){this.segments=[],this.isAlive=!0,this.turnRadius=60,this.emitter=null,this.distanceToChangeOfState=10,this.addSegment(t),this.color=e,this.canvasCtx=n}return t.prototype.addSegment=function(t){this.segments.push(t)},Object.defineProperty(t.prototype,"head",{get:function(){return this.segments.slice(-1).pop()},enumerable:!1,configurable:!0}),t.prototype.draw=function(){var t=this;this.canvasCtx.lineWidth=12,this.segments.forEach((function(e,n){e.draw(t.canvasCtx,t.color),t.head==e&&(e instanceof i.default?(t.canvasCtx.beginPath(),t.canvasCtx.arc(e.center.x,e.center.y,e.radius,e.endAngle,e.endAngle,e.isCounterClockwise()),t.canvasCtx.stroke(),t.canvasCtx.closePath()):e instanceof r.default&&(t.canvasCtx.beginPath(),t.canvasCtx.moveTo(e.endPoint.x,e.endPoint.y),t.canvasCtx.lineTo(e.endPoint.x,e.endPoint.y),t.canvasCtx.stroke(),t.canvasCtx.closePath()))}))},t.prototype.kill=function(){console.log("SNAKE DEAD"),this.isAlive=!1,this.emitter=new s.default(this.head.endPoint,1,7,4,"circle",c(c({},(0,a.hexToRgb)(this.color)),{a:1}),this.canvasCtx,!0,!0,70,4)},t.prototype.updateEmitter=function(t){this.emitter&&(this.emitter.tick(t),this.emitter.draw())},t.prototype.checkWalls=function(){var t=this.head;t.endPoint.x<0?this.addSegment(t.getContinuingSegment(new o.Vector(this.canvasCtx.canvas.width,0))):t.endPoint.x>this.canvasCtx.canvas.width&&this.addSegment(t.getContinuingSegment(new o.Vector(-this.canvasCtx.canvas.width,0))),t.endPoint.y<0?this.addSegment(t.getContinuingSegment(new o.Vector(0,this.canvasCtx.canvas.height))):t.endPoint.y>this.canvasCtx.canvas.height&&this.addSegment(t.getContinuingSegment(new o.Vector(0,-this.canvasCtx.canvas.height)))},t}()},"./src/ViewModels/Player.ts":(t,e,n)=>{n.r(e),n.d(e,{Player:()=>o});var o=function(){function t(t,e){void 0===e&&(e=!1),this.username=t,this.isReady=e,this.color="#000000".replace(/0/g,(function(){return(~~(16*Math.random())).toString(16)}))}return t.prototype.toJSON=function(){return{username:this.username,isReady:this.isReady,color:this.color}},t}()},"./src/ViewModels/Room.ts":(t,e,n)=>{n.r(e),n.d(e,{Room:()=>o});var o=function(){function t(t,e,n,o){void 0===o&&(o=5),this.players={},this.code=t,this.host=e,this.maxSize=o,null!=n?this.players=n:this.addPlayer(e)}return t.prototype.addPlayer=function(t){return!(Object.keys(this.players).length>=this.maxSize||(this.players[t.username]=t,0))},t.prototype.getCode=function(){return this.code},t.prototype.getPlayers=function(){return this.players},t.prototype.getHost=function(){return this.host},t.prototype.setHost=function(t){this.host=t},t.prototype.setPlayers=function(t){this.players=t},t.prototype.setMaxSize=function(t){this.maxSize=t},t.prototype.getMaxSize=function(){return this.maxSize},t.prototype.setGameState=function(t){this.gameState=t},t.prototype.getGameState=function(){return this.gameState},t}()},"./src/WebSocketClient/websocket.ts":(t,e,n)=>{n.r(e),n.d(e,{createRoom:()=>s,joinRoom:()=>a,sendKeyEventToServer:()=>l,sendStartCommand:()=>d,setPlayerData:()=>c});var o,i=n("./src/index.ts"),r=n("./src/MenuManager/login.ts");function s(t){o&&o.readyState===WebSocket.OPEN?o.send(JSON.stringify({type:"CREATE_ROOM",username:t})):console.error("WebSocket connection is not open")}function a(t,e){o&&o.readyState===WebSocket.OPEN?o.send(JSON.stringify({type:"JOIN_ROOM",roomCode:t,username:e})):console.error("WebSocket connection is not open")}function c(t,e){o&&o.readyState===WebSocket.OPEN?o.send(JSON.stringify({type:"PLAYER_DATA",player:t,roomCode:e})):console.error("WebSocket connection is not open")}function l(t,e){o&&o.readyState===WebSocket.OPEN?o.send(JSON.stringify({type:"KEY_EVENT",player:r.currentPlayer,key:t,pressed:e})):console.error("WebSocket connection is not open")}function d(t){o&&o.readyState===WebSocket.OPEN?o.send(JSON.stringify({type:"BEGIN_GAME",roomCode:t})):console.error("WebSocket connection is not open")}(o=new WebSocket("ws://".concat(window.location.hostname,":8080"))).onopen=function(){console.log("WebSocket connection established")},o.onmessage=function(t){var e=JSON.parse(t.data);switch(console.log("Message from server:",e),e.type){case"JOINED_ROOM":(0,r.showRoomView)(t.data);break;case"ROOM_DOES_NOT_EXIST":(0,r.showErrorAnimation)();break;case"ROOM_DATA":(0,r.updateRoomList)(t.data);break;case"GAME_STATE":(0,r.switchGameView)(e);break;case"GAMEPLAY_DATA":(0,i.updateGameState)(e);break;case"ERROR":alert("Error: ".concat(e.message))}},o.onclose=function(){console.log("WebSocket connection closed")},o.onerror=function(t){console.error("WebSocket error:",t)}},"./src/index.ts":(t,e,n)=>{n.r(e),n.d(e,{backgroundCanvas:()=>y,backgroundCanvasCtx:()=>p,fps:()=>d,gameCanvas:()=>u,gameCanvasCtx:()=>h,gridSize:()=>f,updateGameState:()=>b});var o=n("./node_modules/vector2d/src/Vec2D.js"),i=n("./src/Drawer.ts"),r=n("./src/InputManager.ts"),s=n("./src/LineSegment.ts"),a=n("./src/Snake.ts"),c=n("./src/MenuManager/login.ts"),l=document.createElement("div");l.style.position="absolute",l.style.top="10px",l.style.left="10px",l.style.color="black",document.body.appendChild(l);var d=60,u=document.getElementById("game-canvas"),h=u.getContext("2d"),y=document.getElementById("background-canvas"),p=y.getContext("2d");y.width=y.getBoundingClientRect().width,y.height=y.getBoundingClientRect().height,u.width=u.getBoundingClientRect().width,u.height=u.getBoundingClientRect().height;var f=60;var g=0,m=performance.now()/10;window.addEventListener("resize",(function(){u.width=u.getBoundingClientRect().width,u.height=u.getBoundingClientRect().height,y.width=y.getBoundingClientRect().width,y.height=y.getBoundingClientRect().height,(0,i.drawGrid)()})),(0,i.drawGrid)();var v=!1;function b(t){v?t.snakeHeads.forEach((function(t){var e=t.lastSegment,n=t.username,i=e.endPoint,r=c.currentRoom.getPlayers()[n].snake;if(e.isNewThisTick)if("LineSegment"==t.segmentType){var a=e.startPoint;r.addSegment(new s.default(new o.Vector(a.x,a.y),new o.Vector(i.x,i.y),e.isCollidable,e.endAngle))}else t.segmentType;else a=e.startPoint,r.segments[r.segments.length-1]=new s.default(new o.Vector(a.x,a.y),new o.Vector(i.x,i.y),e.isCollidable,e.endAngle)})):(t.snakeHeads.forEach((function(t){var e=t.lastSegment,n=t.username,i=e.endPoint;c.currentRoom.getPlayers()[n].snake=new a.default(new s.default(new o.Vector(i.x,i.y),new o.Vector(i.x,i.y),e.isCollidable,e.endAngle),c.currentRoom.getPlayers()[n].color,h)})),new r.default(c.currentRoom.getPlayers()[c.currentPlayer.username].snake,"A","D"),v=!0),++g%10==0&&(d=function(){var t=performance.now()/10,e=t-m,n=Math.round(1e3/e);return m=t,n}(),l.innerText="FPS: ".concat(d)),h.clearRect(0,0,u.width,u.height),Object.values(c.currentRoom.getPlayers()).forEach((function(t){t.snake.draw()}))}},"./node_modules/vector2d/src/AbstractVector.js":(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=[1,10,100,1e3,1e4,1e5,1e6,1e7,1e8,1e9,1e10],o=function(){function t(t){this.ctor=t}return t.prototype.setAxes=function(t,e){return this.x=t,this.y=e,this},t.prototype.getX=function(){return this.x},t.prototype.setX=function(t){return this.x=t,this},t.prototype.getY=function(){return this.y},t.prototype.setY=function(t){return this.y=t,this},t.prototype.toString=function(t){return void 0===t&&(t=!1),t?"("+Math.round(this.x)+", "+Math.round(this.y)+")":"("+this.x+", "+this.y+")"},t.prototype.toArray=function(){return[this.x,this.y]},t.prototype.toObject=function(){return{x:this.x,y:this.y}},t.prototype.add=function(t){return this.x+=t.x,this.y+=t.y,this},t.prototype.subtract=function(t){return this.x-=t.x,this.y-=t.y,this},t.prototype.equals=function(t){return t.x===this.x&&t.y===this.y},t.prototype.multiplyByVector=function(t){return this.x*=t.x,this.y*=t.y,this},t.prototype.mulV=function(t){return this.multiplyByVector(t)},t.prototype.divideByVector=function(t){return this.x/=t.x,this.y/=t.y,this},t.prototype.divV=function(t){return this.divideByVector(t)},t.prototype.multiplyByScalar=function(t){return this.x*=t,this.y*=t,this},t.prototype.mulS=function(t){return this.multiplyByScalar(t)},t.prototype.divideByScalar=function(t){return this.x/=t,this.y/=t,this},t.prototype.divS=function(t){return this.divideByScalar(t)},t.prototype.normalise=function(){return this.divideByScalar(this.magnitude())},t.prototype.normalize=function(){return this.normalise()},t.prototype.unit=function(){return this.normalise()},t.prototype.magnitude=function(){var t=this.x,e=this.y;return Math.sqrt(t*t+e*e)},t.prototype.length=function(){return this.magnitude()},t.prototype.lengthSq=function(){var t=this.x,e=this.y;return t*t+e*e},t.prototype.dot=function(t){return t.x*this.x+t.y*this.y},t.prototype.cross=function(t){return this.x*t.y-this.y*t.x},t.prototype.reverse=function(){return this.x=-this.x,this.y=-this.y,this},t.prototype.abs=function(){return this.x=Math.abs(this.x),this.y=Math.abs(this.y),this},t.prototype.zero=function(){return this.x=this.y=0,this},t.prototype.distance=function(t){var e=this.x-t.x,n=this.y-t.y;return Math.sqrt(e*e+n*n)},t.prototype.rotate=function(t){var e=Math.cos(t),n=Math.sin(t),o=this.x,i=this.y;return this.x=o*e-i*n,this.y=o*n+i*e,this},t.prototype.round=function(t){void 0===t&&(t=2);var e=n[t];return this.x=(.5+this.x*e<<0)/e,this.y=(.5+this.y*e<<0)/e,this},t.prototype.clone=function(){return new this.ctor(this.x,this.y)},t}();e.AbstractVector=o},"./node_modules/vector2d/src/ArrayVector.js":function(t,e,n){var o,i=this&&this.__extends||(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var r=function(t){function e(n,o){var i=t.call(this,e)||this;return i.axes=[n,o],i.ctor=e,i}return i(e,t),Object.defineProperty(e.prototype,"x",{get:function(){return this.axes[0]},set:function(t){this.axes[0]=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"y",{get:function(){return this.axes[1]},set:function(t){this.axes[1]=t},enumerable:!0,configurable:!0}),e}(n("./node_modules/vector2d/src/AbstractVector.js").AbstractVector);e.ArrayVector=r},"./node_modules/vector2d/src/Float32Vector.js":function(t,e,n){var o,i=this&&this.__extends||(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var r=function(t){function e(n,o){var i=t.call(this,e)||this;return i.axes=new Float32Array(2),i.axes[0]=n,i.axes[1]=o,i}return i(e,t),Object.defineProperty(e.prototype,"x",{get:function(){return this.axes[0]},set:function(t){this.axes[0]=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"y",{get:function(){return this.axes[1]},set:function(t){this.axes[1]=t},enumerable:!0,configurable:!0}),e}(n("./node_modules/vector2d/src/AbstractVector.js").AbstractVector);e.Float32Vector=r},"./node_modules/vector2d/src/Vec2D.js":(t,e,n)=>{function o(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}Object.defineProperty(e,"__esModule",{value:!0}),o(n("./node_modules/vector2d/src/AbstractVector.js")),o(n("./node_modules/vector2d/src/ArrayVector.js")),o(n("./node_modules/vector2d/src/Float32Vector.js")),o(n("./node_modules/vector2d/src/Vector.js"))},"./node_modules/vector2d/src/Vector.js":function(t,e,n){var o,i=this&&this.__extends||(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var r=function(t){function e(n,o){var i=t.call(this,e)||this;return i._x=n,i._y=o,i}return i(e,t),Object.defineProperty(e.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t},enumerable:!0,configurable:!0}),e}(n("./node_modules/vector2d/src/AbstractVector.js").AbstractVector);e.Vector=r}},e={};function n(o){var i=e[o];if(void 0!==i)return i.exports;var r=e[o]={exports:{}};return t[o].call(r.exports,r,r.exports,n),r.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var o in e)n.o(e,o)&&!n.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n("./src/MenuManager/login.ts")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,