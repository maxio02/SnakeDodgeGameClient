/*! For license information please see script.js.LICENSE.txt */
(()=>{"use strict";var t={"./src/ArcSegment.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>c});var i,s=n("./src/Drawer.ts"),o=n("./node_modules/vector2d/src/Vec2D.js"),r=n("./src/Segment.ts"),a=(i=function(t,e){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},i(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});const c=function(t){function e(e,n,i,s,o,r){var a=t.call(this)||this;return a.center=e,a.radius=n,a.startAngle=i,a.endAngle=s,a.counterClockwise=o,a.isCollidable=r,a}return a(e,t),e.prototype.draw=function(t,e){t.lineCap="round",t.strokeStyle=e,1==this.isCollidable&&(t.beginPath(),t.arc(this.center.x,this.center.y,this.radius,this.startAngle,this.endAngle,this.counterClockwise),t.stroke(),t.closePath())},e.prototype.drawDebug=function(t,e){var n=this.counterClockwise?-Math.PI:Math.PI;n+=this.endAngle,t.lineCap="round",(0,s.drawDot)(this.center.x,this.center.y,5,"#000000"),(0,s.drawArrow)(t,new o.Vector(this.endPoint.x,this.endPoint.y),new o.Vector(this.endPoint.x+this.radius*Math.cos(n),this.endPoint.y+this.radius*Math.sin(n))),(0,s.drawArc)(this.center.x,this.center.y,this.radius,0,0,!1)},Object.defineProperty(e.prototype,"endPoint",{get:function(){return new o.Vector(this.center.x+this.radius*Math.cos(this.endAngle),this.center.y+this.radius*Math.sin(this.endAngle))},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"penpendicularEndAngle",{get:function(){return this.isCounterClockwise?this.endAngle-Math.PI/2:this.endAngle+Math.PI/2},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"penpendicularStartAngle",{get:function(){return this.isCounterClockwise?this.startAngle-Math.PI/2:this.startAngle+Math.PI/2},enumerable:!1,configurable:!0}),e.prototype.isCounterClockwise=function(){return this.counterClockwise},e.prototype.getContinuingSegment=function(t){return new e(this.center.clone().add(t),this.radius,this.endAngle,this.endAngle,this.counterClockwise,this.isCollidable)},e}(r.default)},"./src/CollisionHandler.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>o});var i=n("./src/ArcSegment.ts"),s=n("./src/LineSegment.ts");const o=function(){function t(t){this.snakes=t}return t.prototype.checkCollisions=function(){var t=this;return this.snakes.forEach((function(e){e.isAlive&&e.head.isCollidable&&(e.head instanceof i.default&&Math.abs(e.head.endAngle-e.head.startAngle)>2*Math.PI&&(e.kill(),console.log("snake ".concat(e," commited circlicide"))),t.snakes.forEach((function(n){n.segments.forEach((function(o){if(o.isCollidable&&o!==e.head&&(n!==e||o!==e.segments.slice(-2,-1).pop()))if(o instanceof s.default){if(t.isPointOnLine(o,e.head.endPoint,.5))return console.log("killed by straight (not gay)"),console.log(o),void e.kill()}else if(o instanceof i.default&&t.isPointOnArc(o,e.head.endPoint,2))return console.log("killed by gay (not straight)"),console.log(o),void e.kill()}))})))})),null},t.prototype.isPointOnLine=function(t,e,n){var i=t.length,s=e.distance(t.startPoint),o=e.distance(t.endPoint);return Math.abs(s+o-i)<n},t.prototype.isPointOnArc=function(t,e,n){var i=e.distance(t.center);if(Math.abs(i-t.radius)>n)return!1;var s=Math.atan2(e.y-t.center.y,e.x-t.center.x),o=t.startAngle,r=t.endAngle,a=function(t){var e=t%(2*Math.PI);return e<0&&(e+=2*Math.PI),e},c=a(s),h=a(o),d=a(r);return h<=d?c>=h&&c<=d:c>=d&&c<=h},t}()},"./src/Drawer.ts":(t,e,n)=>{n.r(e),n.d(e,{drawArc:()=>a,drawArrow:()=>c,drawDot:()=>r,drawGrid:()=>o});var i=n("./node_modules/vector2d/src/Vec2D.js"),s=n("./src/index.ts");function o(){s.backgroundCanvasCtx.clearRect(0,0,s.backgroundCanvas.width,s.backgroundCanvas.height),s.backgroundCanvasCtx.strokeStyle="rgba(0, 0, 0, 0.3)",s.backgroundCanvasCtx.lineWidth=2;for(var t=s.gridSize;t<s.backgroundCanvas.width;t+=s.gridSize)s.backgroundCanvasCtx.beginPath(),s.backgroundCanvasCtx.moveTo(t,0),s.backgroundCanvasCtx.lineTo(t,s.backgroundCanvas.height),s.backgroundCanvasCtx.stroke();for(var e=s.gridSize;e<s.backgroundCanvas.height;e+=s.gridSize)s.backgroundCanvasCtx.beginPath(),s.backgroundCanvasCtx.moveTo(0,e),s.backgroundCanvasCtx.lineTo(s.backgroundCanvas.width,e),s.backgroundCanvasCtx.stroke()}function r(t,e,n,i){s.backgroundCanvasCtx.beginPath(),s.backgroundCanvasCtx.arc(t,e,n,0,2*Math.PI,!1),s.backgroundCanvasCtx.fillStyle=i,s.backgroundCanvasCtx.fill(),s.backgroundCanvasCtx.closePath()}function a(t,e,n,i,o,r){s.backgroundCanvasCtx.lineCap="round",s.backgroundCanvasCtx.strokeStyle="#3466aa",s.backgroundCanvasCtx.beginPath(),s.backgroundCanvasCtx.arc(t,e,n,0,2*Math.PI,r),s.backgroundCanvasCtx.lineWidth=5,s.backgroundCanvasCtx.stroke(),s.backgroundCanvasCtx.closePath()}function c(t,e,n){if(e.x!=n.x&&e.y!=n.y){var s=Math.atan2(n.y-e.y,n.x-e.x),o=10,r=new i.Vector(n.x,n.y);r.x-=11.5*Math.cos(s),r.y-=11.5*Math.sin(s),t.beginPath(),t.moveTo(e.x,e.y),t.lineTo(r.x,r.y),t.strokeStyle="#bbbbbb",t.lineWidth=10,t.stroke(),t.beginPath(),t.moveTo(r.x,r.y),t.lineTo(r.x-o*Math.cos(s-Math.PI/7),r.y-o*Math.sin(s-Math.PI/7)),t.lineTo(r.x-o*Math.cos(s+Math.PI/7),r.y-o*Math.sin(s+Math.PI/7)),t.lineTo(r.x,r.y),t.lineTo(r.x-o*Math.cos(s-Math.PI/7),r.y-o*Math.sin(s-Math.PI/7)),t.strokeStyle="#bbbbbb",t.lineWidth=10,t.stroke(),t.fillStyle="#bbbbbb",t.fill(),t.closePath()}}},"./src/InputManager.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>r});var i=n("./node_modules/vector2d/src/Vec2D.js"),s=n("./src/ArcSegment.ts"),o=n("./src/LineSegment.ts");const r=function(){function t(t,e,n){this.keyMap={},window.addEventListener("keydown",this.onKeyDown.bind(this)),window.addEventListener("keyup",this.onKeyUp.bind(this)),this.snake=t,this.leftKey=e,this.rightKey=n}return t.prototype.onKeyDown=function(t){if(this.snake.isAlive){var e=t.key.toUpperCase();if(e==this.leftKey||e==this.rightKey){if(this.keyMap[this.rightKey]&&e==this.leftKey)this.keyMap[this.rightKey]=!1;else if(this.keyMap[this.leftKey]&&e==this.rightKey)this.keyMap[this.leftKey]=!1;else if(this.keyMap[e])return;this.keyMap[e]=!0;var n=this.snake.head,r=n.endPoint,a=0;n instanceof o.default?(a+=Math.PI/2,e==this.rightKey&&this.snake.addSegment(new s.default(new i.Vector(r.x+this.snake.turnRadius*Math.cos(this.snake.head.endAngle+a),r.y+this.snake.turnRadius*Math.sin(this.snake.head.endAngle+a)),this.snake.turnRadius,this.snake.head.endAngle-a,this.snake.head.endAngle-a,!1,n.isCollidable)),e==this.leftKey&&this.snake.addSegment(new s.default(new i.Vector(r.x+this.snake.turnRadius*Math.cos(this.snake.head.endAngle-a),r.y+this.snake.turnRadius*Math.sin(this.snake.head.endAngle-a)),this.snake.turnRadius,this.snake.head.endAngle+a,this.snake.head.endAngle+a,!0,n.isCollidable))):n instanceof s.default&&(a=n.isCounterClockwise?-Math.PI:Math.PI,e==this.rightKey&&this.snake.addSegment(new s.default(new i.Vector(r.x-this.snake.turnRadius*Math.cos(this.snake.head.endAngle+a),r.y-this.snake.turnRadius*Math.sin(this.snake.head.endAngle+a)),this.snake.turnRadius,this.snake.head.endAngle-a,this.snake.head.endAngle-a,!1,n.isCollidable)),e==this.leftKey&&this.snake.addSegment(new s.default(new i.Vector(r.x-this.snake.turnRadius*Math.cos(this.snake.head.endAngle-a),r.y-this.snake.turnRadius*Math.sin(this.snake.head.endAngle-a)),this.snake.turnRadius,this.snake.head.endAngle+a,this.snake.head.endAngle+a,!0,n.isCollidable)))}}},t.prototype.onKeyUp=function(t){if(this.snake.isAlive){var e=t.key.toUpperCase();if(this.keyMap[e]){this.keyMap[e]=!1;var n=this.snake.head,r=n.endPoint,a=n.endAngle;e==this.leftKey&&n instanceof s.default&&n.isCounterClockwise()?a-=Math.PI/2:e==this.rightKey&&n instanceof s.default&&!n.isCounterClockwise()&&(a+=Math.PI/2),this.snake.addSegment(new o.default(r,new i.Vector(r.x+5*Math.cos(a),r.y+5*Math.sin(a)),n.isCollidable,a))}}},t.prototype.dispose=function(){window.removeEventListener("keydown",this.onKeyDown.bind(this)),window.removeEventListener("keyup",this.onKeyUp.bind(this))},t}()},"./src/LineSegment.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>r});var i,s=n("./src/Segment.ts"),o=(i=function(t,e){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},i(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});const r=function(t){function e(e,n,i,s){var o=t.call(this)||this;return o.isCollidable=!0,o.startPoint=e,o.endPoint=n,o.isCollidable=i,o.endAngle=s,o}return o(e,t),e.prototype.draw=function(t,e){t.strokeStyle=e,t.lineCap="round",1==this.isCollidable&&(t.beginPath(),t.moveTo(this.startPoint.x,this.startPoint.y),t.lineTo(this.endPoint.x,this.endPoint.y),t.stroke(),t.closePath())},e.prototype.calcEndAngle=function(){return Math.atan((this.endPoint.y-this.startPoint.y)/(this.endPoint.x-this.startPoint.x))},Object.defineProperty(e.prototype,"length",{get:function(){return Math.sqrt(Math.pow(this.startPoint.x-this.endPoint.x,2)+Math.pow(this.startPoint.y-this.endPoint.y,2))},enumerable:!1,configurable:!0}),e.prototype.getContinuingSegment=function(t){var n=this.endPoint.clone().add(t);return new e(n,n,this.isCollidable,this.endAngle)},e}(s.default)},"./src/ParticleSystem/Emitter.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>r});var i=n("./src/ParticleSystem/Particle.ts"),s=n("./src/ParticleSystem/ParticleSystemUtils.ts"),o=function(){return o=Object.assign||function(t){for(var e,n=1,i=arguments.length;n<i;n++)for(var s in e=arguments[n])Object.prototype.hasOwnProperty.call(e,s)&&(t[s]=e[s]);return t},o.apply(this,arguments)};const r=function(){function t(t,e,n,i,s,o,r,a,c,h,d){void 0===s&&(s="circle"),void 0===a&&(a=!0),void 0===c&&(c=!0),void 0===d&&(d=0),this.aliveParticles=[],this.ticks=0,this.position=t,this.emitTime=e,this.size=n,this.speed=i,this.shape=s,this.color=o,this.canvasCtx=r,this.fadeColor=a,this.fadeSize=c,this.particleMaxAge=h,this.emitTimeMillis=d}return t.prototype.tick=function(t){this.emitTimeMillis+this.particleMaxAge<0||(this.emitTimeMillis-=t,this.ticks%this.emitTime==0&&this.emitTimeMillis>0&&(this.aliveParticles.push(new i.default(this.position.clone(),(0,s.getRandomDirection)(),this.size,this.speed,this.shape,o({},this.color),this.canvasCtx,this.particleMaxAge,this.fadeColor,this.fadeSize)),this.aliveParticles.push(new i.default(this.position.clone(),(0,s.getRandomDirection)(),this.size,this.speed,this.shape,o({},this.color),this.canvasCtx,this.particleMaxAge,this.fadeColor,this.fadeSize)),this.aliveParticles.push(new i.default(this.position.clone(),(0,s.getRandomDirection)(),this.size,this.speed,this.shape,o({},this.color),this.canvasCtx,this.particleMaxAge,this.fadeColor,this.fadeSize))),this.aliveParticles.forEach((function(e){e.tick(t)})),this.aliveParticles=this.aliveParticles.filter((function(t){return t.age>0})),this.ticks++)},t.prototype.draw=function(){this.aliveParticles.forEach((function(t){t.draw()}))},t}()},"./src/ParticleSystem/Particle.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>i});const i=function(){function t(t,e,n,i,s,o,r,a,c,h){void 0===s&&(s="circle"),this.position=t,this.velocity=e,this.size=n,this.speed=i,this.shape=s,this.color=o,this.canvasCtx=r,this.fadeColor=c,this.fadeSize=h,this.age=a,this.colorFadeAmount=this.color.a/this.age,this.sizeFadeAmount=this.size/this.age}return t.prototype.tick=function(t){this.position.add(this.velocity.clone().multiplyByScalar(t*this.speed)),this.fadeColor&&(this.color.a-=this.colorFadeAmount),this.fadeSize&&(this.size-=this.sizeFadeAmount),this.age--},t.prototype.draw=function(){switch(this.canvasCtx.moveTo(this.position.x,this.position.y),this.canvasCtx.fillStyle="rgba(".concat(this.color.r,",").concat(this.color.g,", ").concat(this.color.b,", ").concat(this.color.a,")"),this.canvasCtx.beginPath(),this.shape){case"circle":this.canvasCtx.arc(this.position.x,this.position.y,this.size,0,2*Math.PI),this.canvasCtx.fill();break;case"square":this.canvasCtx.fillRect(this.position.x-this.size,this.position.y-this.size,2*this.size,2*this.size)}this.canvasCtx.closePath()},t}()},"./src/ParticleSystem/ParticleSystemUtils.ts":(t,e,n)=>{n.r(e),n.d(e,{getRandomDirection:()=>s,hexToRgb:()=>o});var i=n("./node_modules/vector2d/src/Vec2D.js");function s(){return new i.Vector(2*Math.random()-1,2*Math.random()-1)}function o(t){var e=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(t);return e?{r:parseInt(e[1],16),g:parseInt(e[2],16),b:parseInt(e[3],16)}:null}},"./src/Segment.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>i});const i=function(){}},"./src/Snake.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>h});var i=n("./node_modules/vector2d/src/Vec2D.js"),s=n("./src/ArcSegment.ts"),o=n("./src/LineSegment.ts"),r=n("./src/ParticleSystem/Emitter.ts"),a=n("./src/ParticleSystem/ParticleSystemUtils.ts"),c=function(){return c=Object.assign||function(t){for(var e,n=1,i=arguments.length;n<i;n++)for(var s in e=arguments[n])Object.prototype.hasOwnProperty.call(e,s)&&(t[s]=e[s]);return t},c.apply(this,arguments)};const h=function(){function t(t,e,n){this.segments=[],this.isAlive=!0,this.turnRadius=60,this.emitter=null,this.distanceToChangeOfState=10,this.addSegment(t),this.color=e,this.canvasCtx=n}return t.prototype.addSegment=function(t){this.segments.push(t)},Object.defineProperty(t.prototype,"head",{get:function(){return this.segments.slice(-1).pop()},enumerable:!1,configurable:!0}),t.prototype.draw=function(){var t=this;this.canvasCtx.lineWidth=12,this.segments.forEach((function(e,n){e.draw(t.canvasCtx,t.color),t.head==e&&(e instanceof s.default?(t.canvasCtx.beginPath(),t.canvasCtx.arc(e.center.x,e.center.y,e.radius,e.endAngle,e.endAngle,e.isCounterClockwise()),t.canvasCtx.stroke(),t.canvasCtx.closePath()):e instanceof o.default&&(t.canvasCtx.beginPath(),t.canvasCtx.moveTo(e.endPoint.x,e.endPoint.y),t.canvasCtx.lineTo(e.endPoint.x,e.endPoint.y),t.canvasCtx.stroke(),t.canvasCtx.closePath()))}))},t.prototype.move=function(t){if(this.isAlive){this.checkWalls();var e=this.head;if(e){if(e instanceof o.default){var n=t*Math.cos(e.endAngle),r=t*Math.sin(e.endAngle),a=new i.Vector(e.endPoint.x+n,e.endPoint.y+r);e.endPoint=a}else if(e instanceof s.default){var c=t/e.radius;e.endAngle=e.isCounterClockwise()?e.endAngle-c:e.endAngle+c}e.isCollidable&&this.distanceToChangeOfState<0&&(this.distanceToChangeOfState=80*Math.random()+30,e instanceof o.default?this.addSegment(new o.default(e.endPoint,new i.Vector(e.endPoint.x,e.endPoint.y),!1,e.endAngle)):e instanceof s.default&&this.addSegment(new s.default(e.center,e.radius,e.endAngle,e.endAngle,e.isCounterClockwise(),!1))),!e.isCollidable&&this.distanceToChangeOfState<0&&(this.distanceToChangeOfState=500*Math.random()+80,e instanceof o.default?this.addSegment(new o.default(e.endPoint,new i.Vector(e.endPoint.x,e.endPoint.y),!0,e.endAngle)):e instanceof s.default&&this.addSegment(new s.default(e.center,e.radius,e.endAngle,e.endAngle,e.isCounterClockwise(),!0))),this.distanceToChangeOfState-=t}}},t.prototype.kill=function(){console.log("SNAKE DEAD"),this.isAlive=!1,this.emitter=new r.default(this.head.endPoint,1,7,4,"circle",c(c({},(0,a.hexToRgb)(this.color)),{a:1}),this.canvasCtx,!0,!0,70,4)},t.prototype.updateEmitter=function(t){this.emitter&&(this.emitter.tick(t),this.emitter.draw())},t.prototype.checkWalls=function(){var t=this.head;t.endPoint.x<0?this.addSegment(t.getContinuingSegment(new i.Vector(this.canvasCtx.canvas.width,0))):t.endPoint.x>this.canvasCtx.canvas.width&&this.addSegment(t.getContinuingSegment(new i.Vector(-this.canvasCtx.canvas.width,0))),t.endPoint.y<0?this.addSegment(t.getContinuingSegment(new i.Vector(0,this.canvasCtx.canvas.height))):t.endPoint.y>this.canvasCtx.canvas.height&&this.addSegment(t.getContinuingSegment(new i.Vector(0,-this.canvasCtx.canvas.height)))},t}()},"./src/index.ts":(t,e,n)=>{n.r(e),n.d(e,{backgroundCanvas:()=>f,backgroundCanvasCtx:()=>p,fps:()=>d,gameCanvas:()=>l,gameCanvasCtx:()=>u,gridSize:()=>y});var i=n("./node_modules/vector2d/src/Vec2D.js"),s=n("./src/Drawer.ts"),o=n("./src/InputManager.ts"),r=n("./src/LineSegment.ts"),a=n("./src/Snake.ts"),c=n("./src/CollisionHandler.ts"),h=document.createElement("div");h.style.position="absolute",h.style.top="10px",h.style.left="10px",h.style.color="black",document.body.appendChild(h);var d=60,l=document.getElementById("game-canvas"),u=l.getContext("2d"),f=document.getElementById("background-canvas"),p=f.getContext("2d");f.width=f.getBoundingClientRect().width,f.height=f.getBoundingClientRect().height,l.width=l.getBoundingClientRect().width,l.height=l.getBoundingClientRect().height;var y=60,g=0,v=performance.now()/10;window.addEventListener("resize",(function(){l.width=l.getBoundingClientRect().width,l.height=l.getBoundingClientRect().height,f.width=f.getBoundingClientRect().width,f.height=f.getBoundingClientRect().height,(0,s.drawGrid)()})),(0,s.drawGrid)();for(var x=[],b=[],C=["#ef8888","#ff0000","#00aabb","#0000ee"],m=[["A","D"],["F","H"],["J","L"],["8","0"]],P=0;P<3;P++){var k=new i.Vector(1800*Math.random(),900*Math.random());x.push(new a.default(new r.default(k,k.add(new i.Vector(10,10)),!0,2*Math.random()*Math.PI),C[P],u)),b.push(new o.default(x[P],m[P][0],m[P][1]))}var w=new c.default(x);requestAnimationFrame((function t(){++g%10==0&&(d=function(){var t=performance.now()/10,e=t-v,n=Math.round(1e3/e);return v=t,n}(),h.innerText="FPS: ".concat(d)),u.clearRect(0,0,l.width,l.height),x.forEach((function(t){t.draw(),performance.now()>2e3&&t.move((performance.now()/10-v)/2),t.updateEmitter(.3)})),w.checkCollisions(),requestAnimationFrame(t)}))},"./node_modules/vector2d/src/AbstractVector.js":(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=[1,10,100,1e3,1e4,1e5,1e6,1e7,1e8,1e9,1e10],i=function(){function t(t){this.ctor=t}return t.prototype.setAxes=function(t,e){return this.x=t,this.y=e,this},t.prototype.getX=function(){return this.x},t.prototype.setX=function(t){return this.x=t,this},t.prototype.getY=function(){return this.y},t.prototype.setY=function(t){return this.y=t,this},t.prototype.toString=function(t){return void 0===t&&(t=!1),t?"("+Math.round(this.x)+", "+Math.round(this.y)+")":"("+this.x+", "+this.y+")"},t.prototype.toArray=function(){return[this.x,this.y]},t.prototype.toObject=function(){return{x:this.x,y:this.y}},t.prototype.add=function(t){return this.x+=t.x,this.y+=t.y,this},t.prototype.subtract=function(t){return this.x-=t.x,this.y-=t.y,this},t.prototype.equals=function(t){return t.x===this.x&&t.y===this.y},t.prototype.multiplyByVector=function(t){return this.x*=t.x,this.y*=t.y,this},t.prototype.mulV=function(t){return this.multiplyByVector(t)},t.prototype.divideByVector=function(t){return this.x/=t.x,this.y/=t.y,this},t.prototype.divV=function(t){return this.divideByVector(t)},t.prototype.multiplyByScalar=function(t){return this.x*=t,this.y*=t,this},t.prototype.mulS=function(t){return this.multiplyByScalar(t)},t.prototype.divideByScalar=function(t){return this.x/=t,this.y/=t,this},t.prototype.divS=function(t){return this.divideByScalar(t)},t.prototype.normalise=function(){return this.divideByScalar(this.magnitude())},t.prototype.normalize=function(){return this.normalise()},t.prototype.unit=function(){return this.normalise()},t.prototype.magnitude=function(){var t=this.x,e=this.y;return Math.sqrt(t*t+e*e)},t.prototype.length=function(){return this.magnitude()},t.prototype.lengthSq=function(){var t=this.x,e=this.y;return t*t+e*e},t.prototype.dot=function(t){return t.x*this.x+t.y*this.y},t.prototype.cross=function(t){return this.x*t.y-this.y*t.x},t.prototype.reverse=function(){return this.x=-this.x,this.y=-this.y,this},t.prototype.abs=function(){return this.x=Math.abs(this.x),this.y=Math.abs(this.y),this},t.prototype.zero=function(){return this.x=this.y=0,this},t.prototype.distance=function(t){var e=this.x-t.x,n=this.y-t.y;return Math.sqrt(e*e+n*n)},t.prototype.rotate=function(t){var e=Math.cos(t),n=Math.sin(t),i=this.x,s=this.y;return this.x=i*e-s*n,this.y=i*n+s*e,this},t.prototype.round=function(t){void 0===t&&(t=2);var e=n[t];return this.x=(.5+this.x*e<<0)/e,this.y=(.5+this.y*e<<0)/e,this},t.prototype.clone=function(){return new this.ctor(this.x,this.y)},t}();e.AbstractVector=i},"./node_modules/vector2d/src/ArrayVector.js":function(t,e,n){var i,s=this&&this.__extends||(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=function(t){function e(n,i){var s=t.call(this,e)||this;return s.axes=[n,i],s.ctor=e,s}return s(e,t),Object.defineProperty(e.prototype,"x",{get:function(){return this.axes[0]},set:function(t){this.axes[0]=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"y",{get:function(){return this.axes[1]},set:function(t){this.axes[1]=t},enumerable:!0,configurable:!0}),e}(n("./node_modules/vector2d/src/AbstractVector.js").AbstractVector);e.ArrayVector=o},"./node_modules/vector2d/src/Float32Vector.js":function(t,e,n){var i,s=this&&this.__extends||(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=function(t){function e(n,i){var s=t.call(this,e)||this;return s.axes=new Float32Array(2),s.axes[0]=n,s.axes[1]=i,s}return s(e,t),Object.defineProperty(e.prototype,"x",{get:function(){return this.axes[0]},set:function(t){this.axes[0]=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"y",{get:function(){return this.axes[1]},set:function(t){this.axes[1]=t},enumerable:!0,configurable:!0}),e}(n("./node_modules/vector2d/src/AbstractVector.js").AbstractVector);e.Float32Vector=o},"./node_modules/vector2d/src/Vec2D.js":(t,e,n)=>{function i(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}Object.defineProperty(e,"__esModule",{value:!0}),i(n("./node_modules/vector2d/src/AbstractVector.js")),i(n("./node_modules/vector2d/src/ArrayVector.js")),i(n("./node_modules/vector2d/src/Float32Vector.js")),i(n("./node_modules/vector2d/src/Vector.js"))},"./node_modules/vector2d/src/Vector.js":function(t,e,n){var i,s=this&&this.__extends||(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=function(t){function e(n,i){var s=t.call(this,e)||this;return s._x=n,s._y=i,s}return s(e,t),Object.defineProperty(e.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t},enumerable:!0,configurable:!0}),e}(n("./node_modules/vector2d/src/AbstractVector.js").AbstractVector);e.Vector=o}},e={};function n(i){var s=e[i];if(void 0!==s)return s.exports;var o=e[i]={exports:{}};return t[i].call(o.exports,o,o.exports,n),o.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var i in e)n.o(e,i)&&!n.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n("./src/index.ts")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,