/*! For license information please see game.js.LICENSE.txt */
(()=>{"use strict";var t={"./src/ArcSegment.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>c});var o,i=n("./src/Drawer.ts"),s=n("./node_modules/vector2d/src/Vec2D.js"),r=n("./src/Segment.ts"),a=(o=function(t,e){return o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},o(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});const c=function(t){function e(e,n,o,i,s,r){var a=t.call(this)||this;return a.center=e,a.radius=n,a.startAngle=o,a.endAngle=i,a.counterClockwise=s,a.isCollidable=r,a}return a(e,t),e.prototype.draw=function(t,e){t.lineCap="round",t.strokeStyle=e,1==this.isCollidable&&(t.beginPath(),t.arc(this.center.x,this.center.y,this.radius,this.startAngle,this.endAngle,this.counterClockwise),t.stroke(),t.closePath())},e.prototype.drawDebug=function(t,e){var n=this.counterClockwise?-Math.PI:Math.PI;n+=this.endAngle,t.lineCap="round",(0,i.drawDot)(this.center.x,this.center.y,5,"#000000"),(0,i.drawArrow)(t,new s.Vector(this.endPoint.x,this.endPoint.y),new s.Vector(this.endPoint.x+this.radius*Math.cos(n),this.endPoint.y+this.radius*Math.sin(n))),(0,i.drawArc)(this.center.x,this.center.y,this.radius,0,0,!1)},Object.defineProperty(e.prototype,"endPoint",{get:function(){return new s.Vector(this.center.x+this.radius*Math.cos(this.endAngle),this.center.y+this.radius*Math.sin(this.endAngle))},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"penpendicularEndAngle",{get:function(){return this.isCounterClockwise?this.endAngle-Math.PI/2:this.endAngle+Math.PI/2},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"penpendicularStartAngle",{get:function(){return this.isCounterClockwise?this.startAngle-Math.PI/2:this.startAngle+Math.PI/2},enumerable:!1,configurable:!0}),e.prototype.isCounterClockwise=function(){return this.counterClockwise},e.prototype.getContinuingSegment=function(t){return new e(this.center.clone().add(t),this.radius,this.endAngle,this.endAngle,this.counterClockwise,this.isCollidable)},e}(r.default)},"./src/CollisionHandler.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>s});var o=n("./src/ArcSegment.ts"),i=n("./src/LineSegment.ts");const s=function(){function t(t){this.snakes=t}return t.prototype.checkCollisions=function(){var t=this;return this.snakes.forEach((function(e){e.isAlive&&e.head.isCollidable&&(e.head instanceof o.default&&Math.abs(e.head.endAngle-e.head.startAngle)>2*Math.PI&&(e.kill(),console.log("snake ".concat(e," commited circlicide"))),t.snakes.forEach((function(n){n.segments.forEach((function(s){if(s.isCollidable&&s!==e.head&&(n!==e||s!==e.segments.slice(-2,-1).pop()))if(s instanceof i.default){if(t.isPointOnLine(s,e.head.endPoint,.5))return console.log(s),void e.kill()}else if(s instanceof o.default&&t.isPointOnArc(s,e.head.endPoint,5))return console.log(s),void e.kill()}))})))})),null},t.prototype.isPointOnLine=function(t,e,n){var o=t.length,i=e.distance(t.startPoint),s=e.distance(t.endPoint);return!(Math.abs(i+s-o)>n)},t.prototype.isPointOnArc=function(t,e,n){var o=e.distance(t.center);if(Math.abs(o-t.radius)>n)return!1;var i=Math.atan2(e.y-t.center.y,e.x-t.center.x),s=t.startAngle,r=t.endAngle,a=function(t){var e=t%(2*Math.PI);return e<0&&(e+=2*Math.PI),e},c=a(i),d=a(s),l=a(r);if(d<=l){if(c>=d&&c<=l&&!t.isCounterClockwise())return console.log("".concat(d," < ").concat(c," < ").concat(l)),!0}else if(c>=l&&c<=d&&t.isCounterClockwise())return console.log("".concat(d," > ").concat(c," > ").concat(l)),!0;return!1},t}()},"./src/Drawer.ts":(t,e,n)=>{n.r(e),n.d(e,{drawArc:()=>a,drawArrow:()=>c,drawDot:()=>r,drawGrid:()=>s});var o=n("./node_modules/vector2d/src/Vec2D.js"),i=n("./src/index.ts");function s(){i.backgroundCanvasCtx.clearRect(0,0,i.backgroundCanvas.width,i.backgroundCanvas.height),i.backgroundCanvasCtx.strokeStyle="rgba(0, 0, 0, 0.3)",i.backgroundCanvasCtx.lineWidth=2;for(var t=i.gridSize;t<i.backgroundCanvas.width;t+=i.gridSize)i.backgroundCanvasCtx.beginPath(),i.backgroundCanvasCtx.moveTo(t,0),i.backgroundCanvasCtx.lineTo(t,i.backgroundCanvas.height),i.backgroundCanvasCtx.stroke();for(var e=i.gridSize;e<i.backgroundCanvas.height;e+=i.gridSize)i.backgroundCanvasCtx.beginPath(),i.backgroundCanvasCtx.moveTo(0,e),i.backgroundCanvasCtx.lineTo(i.backgroundCanvas.width,e),i.backgroundCanvasCtx.stroke()}function r(t,e,n,o){i.backgroundCanvasCtx.beginPath(),i.backgroundCanvasCtx.arc(t,e,n,0,2*Math.PI,!1),i.backgroundCanvasCtx.fillStyle=o,i.backgroundCanvasCtx.fill(),i.backgroundCanvasCtx.closePath()}function a(t,e,n,o,s,r){i.backgroundCanvasCtx.lineCap="round",i.backgroundCanvasCtx.strokeStyle="#3466aa",i.backgroundCanvasCtx.beginPath(),i.backgroundCanvasCtx.arc(t,e,n,0,2*Math.PI,r),i.backgroundCanvasCtx.lineWidth=5,i.backgroundCanvasCtx.stroke(),i.backgroundCanvasCtx.closePath()}function c(t,e,n){if(e.x!=n.x&&e.y!=n.y){var i=Math.atan2(n.y-e.y,n.x-e.x),s=10,r=new o.Vector(n.x,n.y);r.x-=11.5*Math.cos(i),r.y-=11.5*Math.sin(i),t.beginPath(),t.moveTo(e.x,e.y),t.lineTo(r.x,r.y),t.strokeStyle="#bbbbbb",t.lineWidth=10,t.stroke(),t.beginPath(),t.moveTo(r.x,r.y),t.lineTo(r.x-s*Math.cos(i-Math.PI/7),r.y-s*Math.sin(i-Math.PI/7)),t.lineTo(r.x-s*Math.cos(i+Math.PI/7),r.y-s*Math.sin(i+Math.PI/7)),t.lineTo(r.x,r.y),t.lineTo(r.x-s*Math.cos(i-Math.PI/7),r.y-s*Math.sin(i-Math.PI/7)),t.strokeStyle="#bbbbbb",t.lineWidth=10,t.stroke(),t.fillStyle="#bbbbbb",t.fill(),t.closePath()}}},"./src/InputManager.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>a});var o=n("./node_modules/vector2d/src/Vec2D.js"),i=n("./src/ArcSegment.ts"),s=n("./src/LineSegment.ts"),r=n("./src/WebSocketClient/websocket.ts");const a=function(){function t(t,e,n){this.keyMap={},window.addEventListener("keydown",this.onKeyDown.bind(this)),window.addEventListener("keyup",this.onKeyUp.bind(this)),this.snake=t,this.leftKey=e,this.rightKey=n}return t.prototype.onKeyDown=function(t){if(this.snake.isAlive){var e=t.key.toUpperCase();if(e==this.leftKey||e==this.rightKey){if(this.keyMap[this.rightKey]&&e==this.leftKey)this.keyMap[this.rightKey]=!1;else if(this.keyMap[this.leftKey]&&e==this.rightKey)this.keyMap[this.leftKey]=!1;else if(this.keyMap[e])return;this.keyMap[e]=!0;var n=this.snake.head,a=n.endPoint,c=0;(0,r.sendKeyEventToServer)(e,!0),n instanceof s.default?(c+=Math.PI/2,e==this.rightKey&&this.snake.addSegment(new i.default(new o.Vector(a.x+this.snake.turnRadius*Math.cos(this.snake.head.endAngle+c),a.y+this.snake.turnRadius*Math.sin(this.snake.head.endAngle+c)),this.snake.turnRadius,this.snake.head.endAngle-c,this.snake.head.endAngle-c,!1,n.isCollidable)),e==this.leftKey&&this.snake.addSegment(new i.default(new o.Vector(a.x+this.snake.turnRadius*Math.cos(this.snake.head.endAngle-c),a.y+this.snake.turnRadius*Math.sin(this.snake.head.endAngle-c)),this.snake.turnRadius,this.snake.head.endAngle+c,this.snake.head.endAngle+c,!0,n.isCollidable))):n instanceof i.default&&(c=n.isCounterClockwise?-Math.PI:Math.PI,e==this.rightKey&&this.snake.addSegment(new i.default(new o.Vector(a.x-this.snake.turnRadius*Math.cos(this.snake.head.endAngle+c),a.y-this.snake.turnRadius*Math.sin(this.snake.head.endAngle+c)),this.snake.turnRadius,this.snake.head.endAngle-c,this.snake.head.endAngle-c,!1,n.isCollidable)),e==this.leftKey&&this.snake.addSegment(new i.default(new o.Vector(a.x-this.snake.turnRadius*Math.cos(this.snake.head.endAngle-c),a.y-this.snake.turnRadius*Math.sin(this.snake.head.endAngle-c)),this.snake.turnRadius,this.snake.head.endAngle+c,this.snake.head.endAngle+c,!0,n.isCollidable)))}}},t.prototype.onKeyUp=function(t){if(this.snake.isAlive){var e=t.key.toUpperCase();if(this.keyMap[e]){this.keyMap[e]=!1,(0,r.sendKeyEventToServer)(e,!1);var n=this.snake.head,a=n.endPoint,c=n.endAngle;e==this.leftKey&&n instanceof i.default&&n.isCounterClockwise()?c-=Math.PI/2:e==this.rightKey&&n instanceof i.default&&!n.isCounterClockwise()&&(c+=Math.PI/2),this.snake.addSegment(new s.default(a,new o.Vector(a.x+5*Math.cos(c),a.y+5*Math.sin(c)),n.isCollidable,c))}}},t.prototype.dispose=function(){window.removeEventListener("keydown",this.onKeyDown.bind(this)),window.removeEventListener("keyup",this.onKeyUp.bind(this))},t}()},"./src/LineSegment.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>r});var o,i=n("./src/Segment.ts"),s=(o=function(t,e){return o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},o(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});const r=function(t){function e(e,n,o,i){var s=t.call(this)||this;return s.isCollidable=!0,s.startPoint=e,s.endPoint=n,s.isCollidable=o,s.endAngle=i,s}return s(e,t),e.prototype.draw=function(t,e){t.strokeStyle=e,t.lineCap="round",1==this.isCollidable&&(t.beginPath(),t.moveTo(this.startPoint.x,this.startPoint.y),t.lineTo(this.endPoint.x,this.endPoint.y),t.stroke(),t.closePath())},e.prototype.calcEndAngle=function(){return Math.atan((this.endPoint.y-this.startPoint.y)/(this.endPoint.x-this.startPoint.x))},Object.defineProperty(e.prototype,"length",{get:function(){return Math.sqrt(Math.pow(this.startPoint.x-this.endPoint.x,2)+Math.pow(this.startPoint.y-this.endPoint.y,2))},enumerable:!1,configurable:!0}),e.prototype.getContinuingSegment=function(t){var n=this.endPoint.clone().add(t);return new e(n,n,this.isCollidable,this.endAngle)},e}(i.default)},"./src/MenuManager/login.ts":(t,e,n)=>{n.r(e),n.d(e,{handleReadyState:()=>w,handleRoomAction:()=>x,showErrorAnimation:()=>S,showRoomView:()=>P,updateButton:()=>C,updateColorPicker:()=>M,updatePlayerColor:()=>A,updateRoomList:()=>k});var o=n("./src/ViewModels/Player.ts"),i=n("./src/ViewModels/Room.ts"),s=n("./src/WebSocketClient/websocket.ts"),r=null,a=null,c=document.getElementById("roomCodeInput"),d=document.getElementById("usernameInput"),l=document.getElementById("joinButton"),h=document.getElementById("readyButton"),u=document.getElementById("login-div"),f=document.getElementById("room-div"),y=document.getElementById("color-picker"),p=document.getElementById("room-users-list"),g=document.getElementById("room-code"),m=document.getElementById("player-count"),v=document.getElementById("color-picker-container"),b=document.getElementById("start-progress-bar");function C(){""==d.value.trim()?l.disabled=!0:l.disabled=!1,5==c.value.trim().length?l.textContent="JOIN ROOM":l.textContent="CREATE ROOM"}function x(){var t=d.value;t&&(a=new o.Player(t),"CREATE ROOM"===l.innerText?(0,s.createRoom)(d.value):(0,s.joinRoom)(c.value.toUpperCase(),d.value))}function w(){a.isReady=!a.isReady,(0,s.setPlayerData)(a,r.getCode()),a.isReady?(h.classList.remove("red-button"),h.classList.add("green-button")):(h.classList.add("red-button"),h.classList.remove("green-button"))}function P(t){var e=JSON.parse(t.toString());r=new i.Room(e.room.code,e.room.host,e.room.players,e.room.maxSize),a.username==r.getHost().username&&document.getElementById("startButton").classList.remove("display-none"),v.style.backgroundColor=a.color,y.value=a.color,document.getElementById("color-label").style.color=O(y.value,"#FFFFFF","#000000"),u.classList.add("display-none"),f.classList.add("display-flex"),c.value=r.getCode(),g.innerHTML=r.getCode(),(0,s.setPlayerData)(a,r.getCode()),k(t)}function k(t){var e,n,o=JSON.parse(t.toString());r.setPlayers(o.room.players),r.setHost(o.room.host),r.setMaxSize(o.room.maxSize),m.innerHTML="".concat(r.getPlayers().length,"/").concat(r.getMaxSize()),p.innerHTML="",r.getPlayers().forEach((function(t){var e=document.createElement("li");e.textContent=t.username+"",t.username==r.getHost().username?e.insertAdjacentHTML("afterbegin",'<i class="fa-solid fa-crown" style="color: '.concat(t.color,';"></i>')):e.insertAdjacentHTML("afterbegin",'<i class="fa-solid fa-circle" style="color: '.concat(t.color,'; margin-left: 4px"></i>')),t.isReady?e.insertAdjacentHTML("beforeend",' <i class="fa-solid fa-circle" style="color: #37cb48;"></i>'):e.insertAdjacentHTML("beforeend",' <i class="fa-solid fa-circle" style="color: #cb3737;"></i>'),p.appendChild(e)})),e=r.getPlayers().filter((function(t){return t.isReady})).length,0!=(n=r.getMaxSize())&&(b.style.width=Math.floor(e/n*100)+"%")}function S(){l.classList.add("red-button"),l.classList.add("wiggle"),setTimeout((function(){l.classList.remove("red-button"),l.classList.remove("wiggle")}),600)}function M(){v.style.backgroundColor=y.value}function A(){a.color=y.value,document.getElementById("color-label").style.color=O(y.value,"#FFFFFF","#000000"),(0,s.setPlayerData)(a,r.getCode())}function O(t,e,n){var o="#"===t.charAt(0)?t.substring(1,7):t,i=[parseInt(o.substring(0,2),16)/255,parseInt(o.substring(2,4),16)/255,parseInt(o.substring(4,6),16)/255].map((function(t){return t<=.03928?t/12.92:Math.pow((t+.055)/1.055,2.4)}));return.2126*i[0]+.7152*i[1]+.0722*i[2]>.4?n:e}window.onload=function(){C()},window.updateButton=C,window.handleRoomAction=x,window.handleReadyState=w,window.updateColorPicker=M,window.updatePlayerColor=A,window.startGame=function(){}},"./src/ParticleSystem/Emitter.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>r});var o=n("./src/ParticleSystem/Particle.ts"),i=n("./src/ParticleSystem/ParticleSystemUtils.ts"),s=function(){return s=Object.assign||function(t){for(var e,n=1,o=arguments.length;n<o;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},s.apply(this,arguments)};const r=function(){function t(t,e,n,o,i,s,r,a,c,d,l){void 0===i&&(i="circle"),void 0===a&&(a=!0),void 0===c&&(c=!0),void 0===l&&(l=0),this.aliveParticles=[],this.ticks=0,this.position=t,this.emitTime=e,this.size=n,this.speed=o,this.shape=i,this.color=s,this.canvasCtx=r,this.fadeColor=a,this.fadeSize=c,this.particleMaxAge=d,this.emitTimeMillis=l}return t.prototype.tick=function(t){this.emitTimeMillis+this.particleMaxAge<0||(this.emitTimeMillis-=t,this.ticks%this.emitTime==0&&this.emitTimeMillis>0&&(this.aliveParticles.push(new o.default(this.position.clone(),(0,i.getRandomDirection)(),this.size,this.speed,this.shape,s({},this.color),this.canvasCtx,this.particleMaxAge,this.fadeColor,this.fadeSize)),this.aliveParticles.push(new o.default(this.position.clone(),(0,i.getRandomDirection)(),this.size,this.speed,this.shape,s({},this.color),this.canvasCtx,this.particleMaxAge,this.fadeColor,this.fadeSize)),this.aliveParticles.push(new o.default(this.position.clone(),(0,i.getRandomDirection)(),this.size,this.speed,this.shape,s({},this.color),this.canvasCtx,this.particleMaxAge,this.fadeColor,this.fadeSize))),this.aliveParticles.forEach((function(e){e.tick(t)})),this.aliveParticles=this.aliveParticles.filter((function(t){return t.age>0})),this.ticks++)},t.prototype.draw=function(){this.aliveParticles.forEach((function(t){t.draw()}))},t}()},"./src/ParticleSystem/Particle.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>o});const o=function(){function t(t,e,n,o,i,s,r,a,c,d){void 0===i&&(i="circle"),this.position=t,this.velocity=e,this.size=n,this.speed=o,this.shape=i,this.color=s,this.canvasCtx=r,this.fadeColor=c,this.fadeSize=d,this.age=a,this.colorFadeAmount=this.color.a/this.age,this.sizeFadeAmount=this.size/this.age}return t.prototype.tick=function(t){this.position.add(this.velocity.clone().multiplyByScalar(t*this.speed)),this.fadeColor&&(this.color.a-=this.colorFadeAmount),this.fadeSize&&(this.size-=this.sizeFadeAmount),this.age--},t.prototype.draw=function(){switch(this.canvasCtx.moveTo(this.position.x,this.position.y),this.canvasCtx.fillStyle="rgba(".concat(this.color.r,",").concat(this.color.g,", ").concat(this.color.b,", ").concat(this.color.a,")"),this.canvasCtx.beginPath(),this.shape){case"circle":this.canvasCtx.arc(this.position.x,this.position.y,this.size,0,2*Math.PI),this.canvasCtx.fill();break;case"square":this.canvasCtx.fillRect(this.position.x-this.size,this.position.y-this.size,2*this.size,2*this.size)}this.canvasCtx.closePath()},t}()},"./src/ParticleSystem/ParticleSystemUtils.ts":(t,e,n)=>{n.r(e),n.d(e,{getRandomDirection:()=>i,hexToRgb:()=>s});var o=n("./node_modules/vector2d/src/Vec2D.js");function i(){return new o.Vector(2*Math.random()-1,2*Math.random()-1)}function s(t){var e=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(t);return e?{r:parseInt(e[1],16),g:parseInt(e[2],16),b:parseInt(e[3],16)}:null}},"./src/Segment.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>o});const o=function(){}},"./src/Snake.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>d});var o=n("./node_modules/vector2d/src/Vec2D.js"),i=n("./src/ArcSegment.ts"),s=n("./src/LineSegment.ts"),r=n("./src/ParticleSystem/Emitter.ts"),a=n("./src/ParticleSystem/ParticleSystemUtils.ts"),c=function(){return c=Object.assign||function(t){for(var e,n=1,o=arguments.length;n<o;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},c.apply(this,arguments)};const d=function(){function t(t,e,n){this.segments=[],this.isAlive=!0,this.turnRadius=60,this.emitter=null,this.distanceToChangeOfState=10,this.addSegment(t),this.color=e,this.canvasCtx=n}return t.prototype.addSegment=function(t){this.segments.push(t)},Object.defineProperty(t.prototype,"head",{get:function(){return this.segments.slice(-1).pop()},enumerable:!1,configurable:!0}),t.prototype.draw=function(){var t=this;this.canvasCtx.lineWidth=12,this.segments.forEach((function(e,n){e.draw(t.canvasCtx,t.color),t.head==e&&(e instanceof i.default?(t.canvasCtx.beginPath(),t.canvasCtx.arc(e.center.x,e.center.y,e.radius,e.endAngle,e.endAngle,e.isCounterClockwise()),t.canvasCtx.stroke(),t.canvasCtx.closePath()):e instanceof s.default&&(t.canvasCtx.beginPath(),t.canvasCtx.moveTo(e.endPoint.x,e.endPoint.y),t.canvasCtx.lineTo(e.endPoint.x,e.endPoint.y),t.canvasCtx.stroke(),t.canvasCtx.closePath()))}))},t.prototype.move=function(t){if(this.isAlive){this.checkWalls();var e=this.head;if(e){if(e instanceof s.default){var n=t*Math.cos(e.endAngle),r=t*Math.sin(e.endAngle),a=new o.Vector(e.endPoint.x+n,e.endPoint.y+r);e.endPoint=a}else if(e instanceof i.default){var c=t/e.radius;e.endAngle=e.isCounterClockwise()?e.endAngle-c:e.endAngle+c}e.isCollidable&&this.distanceToChangeOfState<0&&(this.distanceToChangeOfState=80*Math.random()+30,e instanceof s.default?this.addSegment(new s.default(e.endPoint,new o.Vector(e.endPoint.x,e.endPoint.y),!1,e.endAngle)):e instanceof i.default&&this.addSegment(new i.default(e.center,e.radius,e.endAngle,e.endAngle,e.isCounterClockwise(),!1))),!e.isCollidable&&this.distanceToChangeOfState<0&&(this.distanceToChangeOfState=500*Math.random()+80,e instanceof s.default?this.addSegment(new s.default(e.endPoint,new o.Vector(e.endPoint.x,e.endPoint.y),!0,e.endAngle)):e instanceof i.default&&this.addSegment(new i.default(e.center,e.radius,e.endAngle,e.endAngle,e.isCounterClockwise(),!0))),this.distanceToChangeOfState-=t}}},t.prototype.kill=function(){console.log("SNAKE DEAD"),this.isAlive=!1,this.emitter=new r.default(this.head.endPoint,1,7,4,"circle",c(c({},(0,a.hexToRgb)(this.color)),{a:1}),this.canvasCtx,!0,!0,70,4)},t.prototype.updateEmitter=function(t){this.emitter&&(this.emitter.tick(t),this.emitter.draw())},t.prototype.checkWalls=function(){var t=this.head;t.endPoint.x<0?this.addSegment(t.getContinuingSegment(new o.Vector(this.canvasCtx.canvas.width,0))):t.endPoint.x>this.canvasCtx.canvas.width&&this.addSegment(t.getContinuingSegment(new o.Vector(-this.canvasCtx.canvas.width,0))),t.endPoint.y<0?this.addSegment(t.getContinuingSegment(new o.Vector(0,this.canvasCtx.canvas.height))):t.endPoint.y>this.canvasCtx.canvas.height&&this.addSegment(t.getContinuingSegment(new o.Vector(0,-this.canvasCtx.canvas.height)))},t}()},"./src/ViewModels/Player.ts":(t,e,n)=>{n.r(e),n.d(e,{Player:()=>o});var o=function(){function t(t,e){void 0===e&&(e=!1),this.username=t,this.isReady=e,this.color="#000000".replace(/0/g,(function(){return(~~(16*Math.random())).toString(16)}))}return t.prototype.toJSON=function(){return{username:this.username,isReady:this.isReady,color:this.color}},t}()},"./src/ViewModels/Room.ts":(t,e,n)=>{n.r(e),n.d(e,{Room:()=>o});var o=function(){function t(t,e,n,o){void 0===o&&(o=5),this.players=[],this.code=t,this.host=e,this.maxSize=o,null!=n?this.players=n:this.addPlayer(e)}return t.prototype.addPlayer=function(t){return!(this.players.length>=this.maxSize||(this.players.push(t),0))},t.prototype.getCode=function(){return this.code},t.prototype.getPlayers=function(){return this.players},t.prototype.getHost=function(){return this.host},t.prototype.setHost=function(t){this.host=t},t.prototype.setPlayers=function(t){this.players=t},t.prototype.setMaxSize=function(t){this.maxSize=t},t.prototype.getMaxSize=function(){return this.maxSize},t}()},"./src/WebSocketClient/websocket.ts":(t,e,n)=>{n.r(e),n.d(e,{createRoom:()=>s,joinRoom:()=>r,sendKeyEventToServer:()=>c,setPlayerData:()=>a});var o,i=n("./src/MenuManager/login.ts");function s(t){o&&o.readyState===WebSocket.OPEN?o.send(JSON.stringify({type:"CREATE_ROOM",username:t})):console.error("WebSocket connection is not open")}function r(t,e){o&&o.readyState===WebSocket.OPEN?o.send(JSON.stringify({type:"JOIN_ROOM",roomCode:t,username:e})):console.error("WebSocket connection is not open")}function a(t,e){o&&o.readyState===WebSocket.OPEN?o.send(JSON.stringify({type:"PLAYER_DATA",player:t,roomCode:e})):console.error("WebSocket connection is not open")}function c(t,e){o&&o.readyState===WebSocket.OPEN?o.send(JSON.stringify({type:"KEY_EVENT",key:t,pressed:e})):console.error("WebSocket connection is not open")}(o=new WebSocket("ws://".concat(window.location.hostname,":8080"))).onopen=function(){console.log("WebSocket connection established")},o.onmessage=function(t){var e=JSON.parse(t.data);switch(console.log("Message from server:",e),e.type){case"JOINED_ROOM":(0,i.showRoomView)(t.data);break;case"ROOM_DOES_NOT_EXIST":(0,i.showErrorAnimation)();break;case"ROOM_DATA":(0,i.updateRoomList)(t.data);break;case"GAMEPLAY":break;case"ERROR":alert("Error: ".concat(e.message))}},o.onclose=function(){console.log("WebSocket connection closed")},o.onerror=function(t){console.error("WebSocket error:",t)}},"./src/index.ts":(t,e,n)=>{n.r(e),n.d(e,{backgroundCanvas:()=>f,backgroundCanvasCtx:()=>y,fps:()=>l,gameCanvas:()=>h,gameCanvasCtx:()=>u,gridSize:()=>p});var o=n("./node_modules/vector2d/src/Vec2D.js"),i=n("./src/Drawer.ts"),s=n("./src/InputManager.ts"),r=n("./src/LineSegment.ts"),a=n("./src/Snake.ts"),c=n("./src/CollisionHandler.ts"),d=document.createElement("div");d.style.position="absolute",d.style.top="10px",d.style.left="10px",d.style.color="black",document.body.appendChild(d);var l=60,h=document.getElementById("game-canvas"),u=h.getContext("2d"),f=document.getElementById("background-canvas"),y=f.getContext("2d");f.width=f.getBoundingClientRect().width,f.height=f.getBoundingClientRect().height,h.width=h.getBoundingClientRect().width,h.height=h.getBoundingClientRect().height;var p=60,g=0,m=performance.now()/10;window.addEventListener("resize",(function(){h.width=h.getBoundingClientRect().width,h.height=h.getBoundingClientRect().height,f.width=f.getBoundingClientRect().width,f.height=f.getBoundingClientRect().height,(0,i.drawGrid)()})),(0,i.drawGrid)();for(var v=[],b=[],C=["#ef8888","#ff0000","#00aabb","#0000ee"],x=[["A","D"],["F","H"],["J","L"],["8","0"]],w=0;w<2;w++){var P=new o.Vector(1800*Math.random(),900*Math.random());v.push(new a.default(new r.default(P,P.add(new o.Vector(10,10)),!0,2*Math.random()*Math.PI),C[w],u)),b.push(new s.default(v[w],x[w][0],x[w][1]))}var k=new c.default(v);requestAnimationFrame((function t(){++g%10==0&&(l=function(){var t=performance.now()/10,e=t-m,n=Math.round(1e3/e);return m=t,n}(),d.innerText="FPS: ".concat(l)),u.clearRect(0,0,h.width,h.height),v.forEach((function(t){t.draw(),performance.now()>2e3&&t.move((performance.now()/10-m)/2),t.updateEmitter((performance.now()/10-m)/10)})),k.checkCollisions(),requestAnimationFrame(t)}))},"./node_modules/vector2d/src/AbstractVector.js":(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=[1,10,100,1e3,1e4,1e5,1e6,1e7,1e8,1e9,1e10],o=function(){function t(t){this.ctor=t}return t.prototype.setAxes=function(t,e){return this.x=t,this.y=e,this},t.prototype.getX=function(){return this.x},t.prototype.setX=function(t){return this.x=t,this},t.prototype.getY=function(){return this.y},t.prototype.setY=function(t){return this.y=t,this},t.prototype.toString=function(t){return void 0===t&&(t=!1),t?"("+Math.round(this.x)+", "+Math.round(this.y)+")":"("+this.x+", "+this.y+")"},t.prototype.toArray=function(){return[this.x,this.y]},t.prototype.toObject=function(){return{x:this.x,y:this.y}},t.prototype.add=function(t){return this.x+=t.x,this.y+=t.y,this},t.prototype.subtract=function(t){return this.x-=t.x,this.y-=t.y,this},t.prototype.equals=function(t){return t.x===this.x&&t.y===this.y},t.prototype.multiplyByVector=function(t){return this.x*=t.x,this.y*=t.y,this},t.prototype.mulV=function(t){return this.multiplyByVector(t)},t.prototype.divideByVector=function(t){return this.x/=t.x,this.y/=t.y,this},t.prototype.divV=function(t){return this.divideByVector(t)},t.prototype.multiplyByScalar=function(t){return this.x*=t,this.y*=t,this},t.prototype.mulS=function(t){return this.multiplyByScalar(t)},t.prototype.divideByScalar=function(t){return this.x/=t,this.y/=t,this},t.prototype.divS=function(t){return this.divideByScalar(t)},t.prototype.normalise=function(){return this.divideByScalar(this.magnitude())},t.prototype.normalize=function(){return this.normalise()},t.prototype.unit=function(){return this.normalise()},t.prototype.magnitude=function(){var t=this.x,e=this.y;return Math.sqrt(t*t+e*e)},t.prototype.length=function(){return this.magnitude()},t.prototype.lengthSq=function(){var t=this.x,e=this.y;return t*t+e*e},t.prototype.dot=function(t){return t.x*this.x+t.y*this.y},t.prototype.cross=function(t){return this.x*t.y-this.y*t.x},t.prototype.reverse=function(){return this.x=-this.x,this.y=-this.y,this},t.prototype.abs=function(){return this.x=Math.abs(this.x),this.y=Math.abs(this.y),this},t.prototype.zero=function(){return this.x=this.y=0,this},t.prototype.distance=function(t){var e=this.x-t.x,n=this.y-t.y;return Math.sqrt(e*e+n*n)},t.prototype.rotate=function(t){var e=Math.cos(t),n=Math.sin(t),o=this.x,i=this.y;return this.x=o*e-i*n,this.y=o*n+i*e,this},t.prototype.round=function(t){void 0===t&&(t=2);var e=n[t];return this.x=(.5+this.x*e<<0)/e,this.y=(.5+this.y*e<<0)/e,this},t.prototype.clone=function(){return new this.ctor(this.x,this.y)},t}();e.AbstractVector=o},"./node_modules/vector2d/src/ArrayVector.js":function(t,e,n){var o,i=this&&this.__extends||(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var s=function(t){function e(n,o){var i=t.call(this,e)||this;return i.axes=[n,o],i.ctor=e,i}return i(e,t),Object.defineProperty(e.prototype,"x",{get:function(){return this.axes[0]},set:function(t){this.axes[0]=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"y",{get:function(){return this.axes[1]},set:function(t){this.axes[1]=t},enumerable:!0,configurable:!0}),e}(n("./node_modules/vector2d/src/AbstractVector.js").AbstractVector);e.ArrayVector=s},"./node_modules/vector2d/src/Float32Vector.js":function(t,e,n){var o,i=this&&this.__extends||(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var s=function(t){function e(n,o){var i=t.call(this,e)||this;return i.axes=new Float32Array(2),i.axes[0]=n,i.axes[1]=o,i}return i(e,t),Object.defineProperty(e.prototype,"x",{get:function(){return this.axes[0]},set:function(t){this.axes[0]=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"y",{get:function(){return this.axes[1]},set:function(t){this.axes[1]=t},enumerable:!0,configurable:!0}),e}(n("./node_modules/vector2d/src/AbstractVector.js").AbstractVector);e.Float32Vector=s},"./node_modules/vector2d/src/Vec2D.js":(t,e,n)=>{function o(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}Object.defineProperty(e,"__esModule",{value:!0}),o(n("./node_modules/vector2d/src/AbstractVector.js")),o(n("./node_modules/vector2d/src/ArrayVector.js")),o(n("./node_modules/vector2d/src/Float32Vector.js")),o(n("./node_modules/vector2d/src/Vector.js"))},"./node_modules/vector2d/src/Vector.js":function(t,e,n){var o,i=this&&this.__extends||(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var s=function(t){function e(n,o){var i=t.call(this,e)||this;return i._x=n,i._y=o,i}return i(e,t),Object.defineProperty(e.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t},enumerable:!0,configurable:!0}),e}(n("./node_modules/vector2d/src/AbstractVector.js").AbstractVector);e.Vector=s}},e={};function n(o){var i=e[o];if(void 0!==i)return i.exports;var s=e[o]={exports:{}};return t[o].call(s.exports,s,s.exports,n),s.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var o in e)n.o(e,o)&&!n.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n("./src/index.ts")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QVEsQ0FBRWxKLEVBQUdrSixJQUM1QkEsQ0FBTSxFQ0xkTCxFQUFvQnJCLEVBQUksQ0FBQzFDLEVBQVNzRSxLQUNqQyxJQUFJLElBQUlyUSxLQUFPcVEsRUFDWFAsRUFBb0JRLEVBQUVELEVBQVlyUSxLQUFTOFAsRUFBb0JRLEVBQUV2RSxFQUFTL0wsSUFDNUU2TCxPQUFPQyxlQUFlQyxFQUFTL0wsRUFBSyxDQUFFcVAsWUFBWSxFQUFNRixJQUFLa0IsRUFBV3JRLElBRTFFLEVDTkQ4UCxFQUFvQlEsRUFBSSxDQUFDQyxFQUFLQyxJQUFVM0UsT0FBT00sVUFBVXVDLGVBQWVPLEtBQUtzQixFQUFLQyxHQ0NsRlYsRUFBb0IxSSxFQUFLMkUsSUFDSCxvQkFBWDBFLFFBQTBCQSxPQUFPQyxhQUMxQzdFLE9BQU9DLGVBQWVDLEVBQVMwRSxPQUFPQyxZQUFhLENBQUUxTyxNQUFPLFdBRTdENkosT0FBT0MsZUFBZUMsRUFBUyxhQUFjLENBQUUvSixPQUFPLEdBQU8sRUNGcEM4TixFQUFvQiIsInNvdXJjZXMiOlsid2VicGFjazovL3NuYWtlX2dhbWUvLi9zcmMvQXJjU2VnbWVudC50cyIsIndlYnBhY2s6Ly9zbmFrZV9nYW1lLy4vc3JjL0NvbGxpc2lvbkhhbmRsZXIudHMiLCJ3ZWJwYWNrOi8vc25ha2VfZ2FtZS8uL3NyYy9EcmF3ZXIudHMiLCJ3ZWJwYWNrOi8vc25ha2VfZ2FtZS8uL3NyYy9JbnB1dE1hbmFnZXIudHMiLCJ3ZWJwYWNrOi8vc25ha2VfZ2FtZS8uL3NyYy9MaW5lU2VnbWVudC50cyIsIndlYnBhY2s6Ly9zbmFrZV9nYW1lLy4vc3JjL01lbnVNYW5hZ2VyL2xvZ2luLnRzIiwid2VicGFjazovL3NuYWtlX2dhbWUvLi9zcmMvUGFydGljbGVTeXN0ZW0vRW1pdHRlci50cyIsIndlYnBhY2s6Ly9zbmFrZV9nYW1lLy4vc3JjL1BhcnRpY2xlU3lzdGVtL1BhcnRpY2xlLnRzIiwid2VicGFjazovL3NuYWtlX2dhbWUvLi9zcmMvUGFydGljbGVTeXN0ZW0vUGFydGljbGVTeXN0ZW1VdGlscy50cyIsIndlYnBhY2s6Ly9zbmFrZV9nYW1lLy4vc3JjL1NlZ21lbnQudHMiLCJ3ZWJwYWNrOi8vc25ha2VfZ2FtZS8uL3NyYy9TbmFrZS50cyIsIndlYnBhY2s6Ly9zbmFrZV9nYW1lLy4vc3JjL1ZpZXdNb2RlbHMvUGxheWVyLnRzIiwid2VicGFjazovL3NuYWtlX2dhbWUvLi9zcmMvVmlld01vZGVscy9Sb29tLnRzIiwid2VicGFjazovL3NuYWtlX2dhbWUvLi9zcmMvV2ViU29ja2V0Q2xpZW50L3dlYnNvY2tldC50cyIsIndlYnBhY2s6Ly9zbmFrZV9nYW1lLy4vc3JjL2luZGV4LnRzIiwid2VicGFjazovL3NuYWtlX2dhbWUvLi9ub2RlX21vZHVsZXMvdmVjdG9yMmQvc3JjL0Fic3RyYWN0VmVjdG9yLmpzIiwid2VicGFjazovL3NuYWtlX2dhbWUvLi9ub2RlX21vZHVsZXMvdmVjdG9yMmQvc3JjL0FycmF5VmVjdG9yLmpzIiwid2VicGFjazovL3NuYWtlX2dhbWUvLi9ub2RlX21vZHVsZXMvdmVjdG9yMmQvc3JjL0Zsb2F0MzJWZWN0b3IuanMiLCJ3ZWJwYWNrOi8vc25ha2VfZ2FtZS8uL25vZGVfbW9kdWxlcy92ZWN0b3IyZC9zcmMvVmVjMkQuanMiLCJ3ZWJwYWNrOi8vc25ha2VfZ2FtZS8uL25vZGVfbW9kdWxlcy92ZWN0b3IyZC9zcmMvVmVjdG9yLmpzIiwid2VicGFjazovL3NuYWtlX2dhbWUvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vc25ha2VfZ2FtZS93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9zbmFrZV9nYW1lL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9zbmFrZV9nYW1lL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vc25ha2VfZ2FtZS93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL3NuYWtlX2dhbWUvd2VicGFjay9zdGFydHVwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRyYXdBcmMsIGRyYXdBcnJvdywgZHJhd0RvdCB9IGZyb20gXCIuL0RyYXdlclwiO1xyXG5pbXBvcnQgKiBhcyBWZWMyRCBmcm9tICd2ZWN0b3IyZCc7XHJcbmltcG9ydCBTZWdtZW50IGZyb20gXCIuL1NlZ21lbnRcIjtcclxuaW1wb3J0IHsgZ2FtZUNhbnZhc0N0eCB9IGZyb20gXCIuL2luZGV4XCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBcmNTZWdtZW50IGV4dGVuZHMgU2VnbWVudCB7XHJcblxyXG5cclxuICAgIHB1YmxpYyBjZW50ZXI6IFZlYzJELlZlY3RvcjtcclxuICAgIHB1YmxpYyByYWRpdXM6IG51bWJlcjtcclxuICAgIHB1YmxpYyBzdGFydEFuZ2xlOiBudW1iZXI7XHJcbiAgICBwdWJsaWMgZW5kQW5nbGU6IG51bWJlcjtcclxuICAgIHByaXZhdGUgY291bnRlckNsb2Nrd2lzZTogYm9vbGVhbjtcclxuICAgIHB1YmxpYyBpc0NvbGxpZGFibGU6IGJvb2xlYW47XHJcblxyXG5cclxuICAgIGNvbnN0cnVjdG9yKGNlbnRlcjogVmVjMkQuVmVjdG9yLCByYWRpdXM6IG51bWJlciwgc3RhcnRBbmdsZTogbnVtYmVyLCBlbmRBbmdsZTogbnVtYmVyLCBjb3VudGVyQ2xvY2t3aXNlOiBib29sZWFuLCBpc0NvbGxpZGFibGU6IGJvb2xlYW4pIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIHRoaXMuY2VudGVyID0gY2VudGVyO1xyXG4gICAgICAgIHRoaXMucmFkaXVzID0gcmFkaXVzO1xyXG4gICAgICAgIHRoaXMuc3RhcnRBbmdsZSA9IHN0YXJ0QW5nbGU7XHJcbiAgICAgICAgdGhpcy5lbmRBbmdsZSA9IGVuZEFuZ2xlO1xyXG4gICAgICAgIHRoaXMuY291bnRlckNsb2Nrd2lzZSA9IGNvdW50ZXJDbG9ja3dpc2U7XHJcbiAgICAgICAgdGhpcy5pc0NvbGxpZGFibGUgPSBpc0NvbGxpZGFibGU7XHJcbiAgICAgIH1cclxuXHJcblxyXG4gICAgZHJhdyhjb250ZXh0OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsIGNvbG9yOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgICAgICBjb250ZXh0LmxpbmVDYXAgPSBcInJvdW5kXCI7XHJcbiAgICAgICAgY29udGV4dC5zdHJva2VTdHlsZSA9IGNvbG9yO1xyXG4gICAgICAgIGlmICh0aGlzLmlzQ29sbGlkYWJsZSA9PSB0cnVlKXtcclxuICAgICAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuICAgICAgICAgICAgY29udGV4dC5hcmModGhpcy5jZW50ZXIueCwgdGhpcy5jZW50ZXIueSwgdGhpcy5yYWRpdXMsIHRoaXMuc3RhcnRBbmdsZSwgdGhpcy5lbmRBbmdsZSwgdGhpcy5jb3VudGVyQ2xvY2t3aXNlKTtcclxuICAgICAgICAgICAgY29udGV4dC5zdHJva2UoKTtcclxuICAgICAgICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZHJhd0RlYnVnKGNvbnRleHQ6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCwgY29sb3I6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgICAgIC8vIGNvbnRleHQuc3Ryb2tlU3R5bGUgPSAnI2ZmMDBmZmZmJ1xyXG4gICAgICAgIGxldCB0YW5nZW50X2FuZ2xlID0gdGhpcy5jb3VudGVyQ2xvY2t3aXNlID8tIE1hdGguUEkgIDogTWF0aC5QSTtcclxuXHJcbiAgICAgICAgdGFuZ2VudF9hbmdsZSArPSB0aGlzLmVuZEFuZ2xlO1xyXG4gICAgICAgIGNvbnRleHQubGluZUNhcCA9IFwicm91bmRcIjtcclxuICAgICAgICBkcmF3RG90KHRoaXMuY2VudGVyLngsIHRoaXMuY2VudGVyLnksIDUsICcjMDAwMDAwJyk7XHJcbiAgICAgICAgZHJhd0Fycm93KGNvbnRleHQsbmV3IFZlYzJELlZlY3Rvcih0aGlzLmVuZFBvaW50LngsdGhpcy5lbmRQb2ludC55KSwgbmV3IFZlYzJELlZlY3Rvcih0aGlzLmVuZFBvaW50LnggKyB0aGlzLnJhZGl1cyAqIE1hdGguY29zKHRhbmdlbnRfYW5nbGUpLHRoaXMuZW5kUG9pbnQueSArIHRoaXMucmFkaXVzICogTWF0aC5zaW4odGFuZ2VudF9hbmdsZSkpKTtcclxuICAgICAgICBkcmF3QXJjKHRoaXMuY2VudGVyLngsIHRoaXMuY2VudGVyLnksIHRoaXMucmFkaXVzLCAwLCAwLCBmYWxzZSk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIGdldCBlbmRQb2ludCgpOiBWZWMyRC5WZWN0b3Ige1xyXG4gICAgICAgIHJldHVybiBuZXcgVmVjMkQuVmVjdG9yKFxyXG4gICAgICAgIHRoaXMuY2VudGVyLnggKyB0aGlzLnJhZGl1cyAqIE1hdGguY29zKHRoaXMuZW5kQW5nbGUpLFxyXG4gICAgICAgIHRoaXMuY2VudGVyLnkgKyB0aGlzLnJhZGl1cyAqIE1hdGguc2luKHRoaXMuZW5kQW5nbGUpXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgcGVucGVuZGljdWxhckVuZEFuZ2xlKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNDb3VudGVyQ2xvY2t3aXNlPyB0aGlzLmVuZEFuZ2xlIC0gTWF0aC5QSSAvMiA6IHRoaXMuZW5kQW5nbGUgKyBNYXRoLlBJIC8gMjtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgcGVucGVuZGljdWxhclN0YXJ0QW5nbGUoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5pc0NvdW50ZXJDbG9ja3dpc2U/IHRoaXMuc3RhcnRBbmdsZS0gTWF0aC5QSSAvMiA6IHRoaXMuc3RhcnRBbmdsZSArIE1hdGguUEkgLyAyO1xyXG4gICAgfVxyXG5cclxuICAgIGlzQ291bnRlckNsb2Nrd2lzZSgpOiBib29sZWFue1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvdW50ZXJDbG9ja3dpc2U7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Q29udGludWluZ1NlZ21lbnQodHJhbnNmb3JtOiBWZWMyRC5WZWN0b3IpOiBTZWdtZW50IHtcclxuICAgICAgICByZXR1cm4gbmV3IEFyY1NlZ21lbnQodGhpcy5jZW50ZXIuY2xvbmUoKS5hZGQodHJhbnNmb3JtKSBhcyBWZWMyRC5WZWN0b3IsIHRoaXMucmFkaXVzLCB0aGlzLmVuZEFuZ2xlLCB0aGlzLmVuZEFuZ2xlLCB0aGlzLmNvdW50ZXJDbG9ja3dpc2UsIHRoaXMuaXNDb2xsaWRhYmxlKTtcclxuICAgIH1cclxufSIsImltcG9ydCB7IFZlY3RvciB9IGZyb20gXCJ2ZWN0b3IyZFwiO1xyXG5pbXBvcnQgQXJjU2VnbWVudCBmcm9tIFwiLi9BcmNTZWdtZW50XCI7XHJcbmltcG9ydCB7IGRyYXdBcmMsIGRyYXdEb3QgfSBmcm9tIFwiLi9EcmF3ZXJcIjtcclxuaW1wb3J0IExpbmVTZWdtZW50IGZyb20gXCIuL0xpbmVTZWdtZW50XCI7XHJcbmltcG9ydCBTbmFrZSBmcm9tIFwiLi9TbmFrZVwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29sbGlzaW9uSGFuZGxlciB7XHJcbiAgICBwcml2YXRlIHNuYWtlczogU25ha2VbXTtcclxuXHJcblxyXG4gICAgY29uc3RydWN0b3Ioc25ha2VzOiBTbmFrZVtdKSB7XHJcbiAgICAgICAgdGhpcy5zbmFrZXMgPSBzbmFrZXM7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHB1YmxpYyBjaGVja0NvbGxpc2lvbnMoKTogU25ha2Uge1xyXG5cclxuICAgICAgICAvL3dlIHdpbGwgb25seSBjaGVjayB0aGUgaGVhZCBvZiBzbmFrZTEgYWdhaW5zdCBhbGwgb3RoZXIgc2VnbWVudHMgb24gdGhlIGJvYXJkIChzbG93KVxyXG4gICAgICAgIHRoaXMuc25ha2VzLmZvckVhY2goc25ha2UxID0+IHtcclxuICAgICAgICAgICAgLy9pZiB0aGUgc25ha2UgaXMgZGVhZCBpZ25vcmUgaXRcclxuICAgICAgICAgICAgaWYgKCFzbmFrZTEuaXNBbGl2ZSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgLy9pZiB0aGUgaGVhZCBvZiB0aGUgc25ha2UgaXMgbm90IGNvbGxpZGFibGUgd2UgY2FuIHNraXAgYWxsIGZ1cnRoZXIgY2hlY2tzXHJcbiAgICAgICAgICAgIGlmICghc25ha2UxLmhlYWQuaXNDb2xsaWRhYmxlKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICAvL2lmIHRoZSBhbmdsZSBvZiB0aGUgYXJjIHNlZ21lbnQgYXQgdGhlIGhlYWQgZXhlZWRzIDM2MCBkZWcga2lsbCB0aGUgc25ha2VcclxuICAgICAgICAgICAgaWYgKHNuYWtlMS5oZWFkIGluc3RhbmNlb2YgQXJjU2VnbWVudCAmJiBNYXRoLmFicyhzbmFrZTEuaGVhZC5lbmRBbmdsZSAtIHNuYWtlMS5oZWFkLnN0YXJ0QW5nbGUpID4gMiAqIE1hdGguUEkpIHtcclxuICAgICAgICAgICAgICAgIHNuYWtlMS5raWxsKCk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgc25ha2UgJHtzbmFrZTF9IGNvbW1pdGVkIGNpcmNsaWNpZGVgKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5zbmFrZXMuZm9yRWFjaChzbmFrZTIgPT4ge1xyXG5cclxuICAgICAgICAgICAgICAgIHNuYWtlMi5zZWdtZW50cy5mb3JFYWNoKHNlZ21lbnQgPT4ge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL3NraXAgdGhlIGNoZWNrcyBpZiB0aGUgc2VnbWVudCBpcyBub24gY29sbGlkYWJsZSBvciBpZiB0aGUgc2VnbWVudCBpcyBpdHNlbGZcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXNlZ21lbnQuaXNDb2xsaWRhYmxlIHx8IHNlZ21lbnQgPT09IHNuYWtlMS5oZWFkKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vd2hlbiB0dXJuaW5nIGlnbm9yZSB0aGUgbGluZSByaWdodCBiZWZvcmUsIHNob3VsZCBub3QgYmUgcG9zc2libGUgdG8gaGl0IGl0XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNuYWtlMiA9PT0gc25ha2UxICYmIHNlZ21lbnQgPT09IHNuYWtlMS5zZWdtZW50cy5zbGljZSgtMiwgLTEpLnBvcCgpKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWdtZW50IGluc3RhbmNlb2YgTGluZVNlZ21lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNQb2ludE9uTGluZShzZWdtZW50LCBzbmFrZTEuaGVhZC5lbmRQb2ludCwgMC41KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coc2VnbWVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbmFrZTEua2lsbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChzZWdtZW50IGluc3RhbmNlb2YgQXJjU2VnbWVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pc1BvaW50T25BcmMoc2VnbWVudCwgc25ha2UxLmhlYWQuZW5kUG9pbnQsIDUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhzZWdtZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNuYWtlMS5raWxsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHByaXZhdGUgaXNQb2ludE9uTGluZShsaW5lOiBMaW5lU2VnbWVudCwgcG9pbnQ6IFZlY3RvciwgZXBzaWxvbjogbnVtYmVyKSB7XHJcbiAgICAgICAgbGV0IGxpbmVMZW5ndGggPSBsaW5lLmxlbmd0aFxyXG4gICAgICAgIGxldCBkMSA9IHBvaW50LmRpc3RhbmNlKGxpbmUuc3RhcnRQb2ludClcclxuICAgICAgICBsZXQgZDIgPSBwb2ludC5kaXN0YW5jZShsaW5lLmVuZFBvaW50KVxyXG5cclxuICAgICAgICBpZiAoTWF0aC5hYnMoZDEgKyBkMiAtIGxpbmVMZW5ndGgpID4gZXBzaWxvbikge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgaXNQb2ludE9uQXJjKGFyYzogQXJjU2VnbWVudCwgcG9pbnQ6IFZlY3RvciwgZXBzaWxvbjogbnVtYmVyKSB7XHJcbiAgICAgICAgLy9pZiAoTWF0aC5hdGFuKChhcmMuY2VudGVyLnkgLSBwb2ludC55KSAvIChhcmMuY2VudGVyLnggLSBwb2ludC54KSkpXHJcbiAgICAgICAgbGV0IGRpc3RhbmNlID0gcG9pbnQuZGlzdGFuY2UoYXJjLmNlbnRlcik7XHJcblxyXG4gICAgICAgIGlmIChNYXRoLmFicyhkaXN0YW5jZSAtIGFyYy5yYWRpdXMpID4gZXBzaWxvbikge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBhbmdsZSBvZiB0aGUgcG9pbnQgcmVsYXRpdmUgdG8gdGhlIGFyYydzIGNlbnRlclxyXG4gICAgICAgIGNvbnN0IGFuZ2xlID0gTWF0aC5hdGFuMihwb2ludC55IC0gYXJjLmNlbnRlci55LCBwb2ludC54IC0gYXJjLmNlbnRlci54KTtcclxuICAgICAgICBjb25zdCBzdGFydEFuZ2xlID0gYXJjLnN0YXJ0QW5nbGU7XHJcbiAgICAgICAgY29uc3QgZW5kQW5nbGUgPSBhcmMuZW5kQW5nbGU7XHJcblxyXG4gICAgICAgIC8vIE5vcm1hbGl6ZSBhbmdsZXMgdG8gYmUgYmV0d2VlbiAwIGFuZCAyKlBJXHJcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplQW5nbGUgPSAoYW5nbGU6IG51bWJlcik6IG51bWJlciA9PiB7XHJcbiAgICAgICAgICAgIGxldCBub3JtYWxpemVkID0gYW5nbGUgJSAoMiAqIE1hdGguUEkpO1xyXG4gICAgICAgICAgICBpZiAobm9ybWFsaXplZCA8IDApIHtcclxuICAgICAgICAgICAgICAgIG5vcm1hbGl6ZWQgKz0gMiAqIE1hdGguUEk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG5vcm1hbGl6ZWQ7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZEFuZ2xlID0gbm9ybWFsaXplQW5nbGUoYW5nbGUpO1xyXG4gICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRTdGFydEFuZ2xlID0gbm9ybWFsaXplQW5nbGUoc3RhcnRBbmdsZSk7XHJcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZEVuZEFuZ2xlID0gbm9ybWFsaXplQW5nbGUoZW5kQW5nbGUpO1xyXG5cclxuICAgICAgICAvLyBDaGVjayBpZiB0aGUgYW5nbGUgbGllcyB3aXRoaW4gdGhlIHN0YXJ0IGFuZCBlbmQgYW5nbGVzXHJcbiAgICAgICAgLy9UaGUgaXNDb3VudGVyQ2xvY2t3aXNlIGNoZWNrIGlzIGZvciB3aGVuIHRoZSBzdGFydCB0byBlbmQgaGFzIHJvbGxlZCBvdmVyIDJwaVxyXG4gICAgICAgIC8vVE9ETyBUSElTIElTIFdST05HXHJcbiAgICAgICAgaWYgKG5vcm1hbGl6ZWRTdGFydEFuZ2xlIDw9IG5vcm1hbGl6ZWRFbmRBbmdsZSkge1xyXG4gICAgICAgICAgICAgaWYobm9ybWFsaXplZEFuZ2xlID49IG5vcm1hbGl6ZWRTdGFydEFuZ2xlICYmIG5vcm1hbGl6ZWRBbmdsZSA8PSBub3JtYWxpemVkRW5kQW5nbGUgJiYgIWFyYy5pc0NvdW50ZXJDbG9ja3dpc2UoKSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYCR7bm9ybWFsaXplZFN0YXJ0QW5nbGV9IDwgJHtub3JtYWxpemVkQW5nbGV9IDwgJHtub3JtYWxpemVkRW5kQW5nbGV9YCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZihub3JtYWxpemVkQW5nbGUgPj0gbm9ybWFsaXplZEVuZEFuZ2xlICYmIG5vcm1hbGl6ZWRBbmdsZSA8PSBub3JtYWxpemVkU3RhcnRBbmdsZSAmJiBhcmMuaXNDb3VudGVyQ2xvY2t3aXNlKCkgKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgJHtub3JtYWxpemVkU3RhcnRBbmdsZX0gPiAke25vcm1hbGl6ZWRBbmdsZX0gPiAke25vcm1hbGl6ZWRFbmRBbmdsZX1gKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH0gICAgICAgICAgICBcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IFZlY3RvciB9IGZyb20gXCJ2ZWN0b3IyZFwiO1xuaW1wb3J0IHsgYmFja2dyb3VuZENhbnZhcywgYmFja2dyb3VuZENhbnZhc0N0eCwgZ3JpZFNpemUgfSBmcm9tIFwiLi9pbmRleFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gZHJhd0dyaWQoKSB7XG4gICAgYmFja2dyb3VuZENhbnZhc0N0eC5jbGVhclJlY3QoMCwgMCwgYmFja2dyb3VuZENhbnZhcy53aWR0aCwgYmFja2dyb3VuZENhbnZhcy5oZWlnaHQpO1xuICAgIGJhY2tncm91bmRDYW52YXNDdHguc3Ryb2tlU3R5bGUgPSAncmdiYSgwLCAwLCAwLCAwLjMpJztcbiAgICBiYWNrZ3JvdW5kQ2FudmFzQ3R4LmxpbmVXaWR0aCA9IDI7XG4gICAgZm9yICh2YXIgeCA9IGdyaWRTaXplOyB4IDwgYmFja2dyb3VuZENhbnZhcy53aWR0aDsgeCArPSBncmlkU2l6ZSkge1xuICAgICAgICBiYWNrZ3JvdW5kQ2FudmFzQ3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICBiYWNrZ3JvdW5kQ2FudmFzQ3R4Lm1vdmVUbyh4LCAwKTtcbiAgICAgICAgYmFja2dyb3VuZENhbnZhc0N0eC5saW5lVG8oeCwgYmFja2dyb3VuZENhbnZhcy5oZWlnaHQpO1xuICAgICAgICBiYWNrZ3JvdW5kQ2FudmFzQ3R4LnN0cm9rZSgpO1xuICAgIH1cbiAgICBmb3IgKHZhciB5ID0gZ3JpZFNpemU7IHkgPCBiYWNrZ3JvdW5kQ2FudmFzLmhlaWdodDsgeSArPSBncmlkU2l6ZSkge1xuICAgICAgICBiYWNrZ3JvdW5kQ2FudmFzQ3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICBiYWNrZ3JvdW5kQ2FudmFzQ3R4Lm1vdmVUbygwLCB5KTtcbiAgICAgICAgYmFja2dyb3VuZENhbnZhc0N0eC5saW5lVG8oYmFja2dyb3VuZENhbnZhcy53aWR0aCwgeSk7XG4gICAgICAgIGJhY2tncm91bmRDYW52YXNDdHguc3Ryb2tlKCk7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZHJhd0RvdChkb3RYOiBudW1iZXIsIGRvdFk6IG51bWJlciwgZG90U2l6ZTogbnVtYmVyLCBjb2xvcjogc3RyaW5nKSB7XG4gICAgYmFja2dyb3VuZENhbnZhc0N0eC5iZWdpblBhdGgoKTtcbiAgICBiYWNrZ3JvdW5kQ2FudmFzQ3R4LmFyYyhcbiAgICAgICAgZG90WCxcbiAgICAgICAgZG90WSxcbiAgICAgICAgZG90U2l6ZSxcbiAgICAgICAgMCxcbiAgICAgICAgMiAqIE1hdGguUEksXG4gICAgICAgIGZhbHNlXG4gICAgKTtcblxuICAgIGJhY2tncm91bmRDYW52YXNDdHguZmlsbFN0eWxlID0gY29sb3I7XG4gICAgYmFja2dyb3VuZENhbnZhc0N0eC5maWxsKCk7XG5cbiAgICBiYWNrZ3JvdW5kQ2FudmFzQ3R4LmNsb3NlUGF0aCgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZHJhd0FyYyhkb3RYOiBudW1iZXIsIGRvdFk6IG51bWJlciwgcmFkaXVzOiBudW1iZXIsIHN0YXJ0QW5nbGU6IG51bWJlciwgZW5kQW5nbGU6IG51bWJlciwgY291bnRlckNsb2Nrd2lzZTogYm9vbGVhbikge1xuICAgIGJhY2tncm91bmRDYW52YXNDdHgubGluZUNhcCA9IFwicm91bmRcIjtcbiAgICBiYWNrZ3JvdW5kQ2FudmFzQ3R4LnN0cm9rZVN0eWxlID0gXCIjMzQ2NmFhXCI7XG4gICAgYmFja2dyb3VuZENhbnZhc0N0eC5iZWdpblBhdGgoKTtcbiAgICBiYWNrZ3JvdW5kQ2FudmFzQ3R4LmFyYyhkb3RYLCBkb3RZLCByYWRpdXMsIDAsIDIgKiBNYXRoLlBJLCBjb3VudGVyQ2xvY2t3aXNlKTtcblxuICAgIGJhY2tncm91bmRDYW52YXNDdHgubGluZVdpZHRoID0gNTtcbiAgICBiYWNrZ3JvdW5kQ2FudmFzQ3R4LnN0cm9rZSgpO1xuXG4gICAgYmFja2dyb3VuZENhbnZhc0N0eC5jbG9zZVBhdGgoKTtcbn1cblxuXG5cblxuZXhwb3J0IGZ1bmN0aW9uIGRyYXdBcnJvdyhjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCwgZnJvbTogVmVjdG9yLCB0bzogVmVjdG9yKSB7XG4gICAgaWYgKGZyb20ueCAhPSB0by54ICYmIGZyb20ueSAhPSB0by55KSB7XG4gICAgICAgIHZhciBhbmdsZSA9IE1hdGguYXRhbjIodG8ueSAtIGZyb20ueSwgdG8ueCAtIGZyb20ueCk7XG4gICAgICAgIGNvbnN0IHdpZHRoID0gMTA7XG4gICAgICAgIHZhciBoZWFkTGVuZ3RoID0gMTA7XG4gICAgICAgIHZhciBuZXdfdG8gPSBuZXcgVmVjdG9yKHRvLngsIHRvLnkpO1xuICAgICAgICAvLyBUaGlzIG1ha2VzIGl0IHNvIHRoZSBlbmQgb2YgdGhlIGFycm93IGhlYWQgaXMgbG9jYXRlZCBhdCB0b3gsIHRveSwgZG9uJ3QgYXNrIHdoZXJlIDEuMTUgY29tZXMgZnJvbVxuICAgICAgICBuZXdfdG8ueCAtPSBNYXRoLmNvcyhhbmdsZSkgKiAoKHdpZHRoICogMS4xNSkpO1xuICAgICAgICBuZXdfdG8ueSAtPSBNYXRoLnNpbihhbmdsZSkgKiAoKHdpZHRoICogMS4xNSkpO1xuXG5cblxuICAgICAgICAvL3N0YXJ0aW5nIHBhdGggb2YgdGhlIGFycm93IGZyb20gdGhlIHN0YXJ0IHNxdWFyZSB0byB0aGUgZW5kIHNxdWFyZSBhbmQgZHJhd2luZyB0aGUgc3Ryb2tlXG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgY3R4Lm1vdmVUbyhmcm9tLngsIGZyb20ueSk7XG4gICAgICAgIGN0eC5saW5lVG8obmV3X3RvLngsIG5ld190by55KTtcbiAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gXCIjYmJiYmJiXCI7XG4gICAgICAgIGN0eC5saW5lV2lkdGggPSB3aWR0aDtcbiAgICAgICAgY3R4LnN0cm9rZSgpO1xuXG4gICAgICAgIC8vc3RhcnRpbmcgYSBuZXcgcGF0aCBmcm9tIHRoZSBoZWFkIG9mIHRoZSBhcnJvdyB0byBvbmUgb2YgdGhlIHNpZGVzIG9mIHRoZSBwb2ludFxuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIGN0eC5tb3ZlVG8obmV3X3RvLngsIG5ld190by55KTtcbiAgICAgICAgY3R4LmxpbmVUbyhuZXdfdG8ueCAtIGhlYWRMZW5ndGggKiBNYXRoLmNvcyhhbmdsZSAtIE1hdGguUEkgLyA3KSwgbmV3X3RvLnkgLSBoZWFkTGVuZ3RoICogTWF0aC5zaW4oYW5nbGUgLSBNYXRoLlBJIC8gNykpO1xuXG4gICAgICAgIC8vcGF0aCBmcm9tIHRoZSBzaWRlIHBvaW50IG9mIHRoZSBhcnJvdywgdG8gdGhlIG90aGVyIHNpZGUgcG9pbnRcbiAgICAgICAgY3R4LmxpbmVUbyhuZXdfdG8ueCAtIGhlYWRMZW5ndGggKiBNYXRoLmNvcyhhbmdsZSArIE1hdGguUEkgLyA3KSwgbmV3X3RvLnkgLSBoZWFkTGVuZ3RoICogTWF0aC5zaW4oYW5nbGUgKyBNYXRoLlBJIC8gNykpO1xuXG4gICAgICAgIC8vcGF0aCBmcm9tIHRoZSBzaWRlIHBvaW50IGJhY2sgdG8gdGhlIHRpcCBvZiB0aGUgYXJyb3csIGFuZCB0aGVuIGFnYWluIHRvIHRoZSBvcHBvc2l0ZSBzaWRlIHBvaW50XG4gICAgICAgIGN0eC5saW5lVG8obmV3X3RvLngsIG5ld190by55KTtcbiAgICAgICAgY3R4LmxpbmVUbyhuZXdfdG8ueCAtIGhlYWRMZW5ndGggKiBNYXRoLmNvcyhhbmdsZSAtIE1hdGguUEkgLyA3KSwgbmV3X3RvLnkgLSBoZWFkTGVuZ3RoICogTWF0aC5zaW4oYW5nbGUgLSBNYXRoLlBJIC8gNykpO1xuXG4gICAgICAgIC8vZHJhd3MgdGhlIHBhdGhzIGNyZWF0ZWQgYWJvdmVcbiAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gXCIjYmJiYmJiXCI7XG4gICAgICAgIGN0eC5saW5lV2lkdGggPSB3aWR0aDtcbiAgICAgICAgY3R4LnN0cm9rZSgpO1xuICAgICAgICBjdHguZmlsbFN0eWxlID0gXCIjYmJiYmJiXCI7XG4gICAgICAgIGN0eC5maWxsKCk7XG4gICAgICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICB9XG59IiwiaW1wb3J0IHsgVmVjdG9yIH0gZnJvbSBcInZlY3RvcjJkXCI7XHJcbmltcG9ydCBBcmNTZWdtZW50IGZyb20gXCIuL0FyY1NlZ21lbnRcIjtcclxuaW1wb3J0IExpbmVTZWdtZW50IGZyb20gXCIuL0xpbmVTZWdtZW50XCI7XHJcbmltcG9ydCBTbmFrZSBmcm9tIFwiLi9TbmFrZVwiO1xyXG5pbXBvcnQgeyBzZW5kS2V5RXZlbnRUb1NlcnZlciB9IGZyb20gXCIuL1dlYlNvY2tldENsaWVudC93ZWJzb2NrZXRcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIElucHV0TWFuYWdlciB7XHJcbiAgcHJpdmF0ZSBrZXlNYXA6IHsgW2tleTogc3RyaW5nXTogYm9vbGVhbiB9ID0ge307XHJcbiAgcHJpdmF0ZSBzbmFrZTogU25ha2U7XHJcbiAgcHJpdmF0ZSBsZWZ0S2V5OiBzdHJpbmc7XHJcbiAgcHJpdmF0ZSByaWdodEtleTogc3RyaW5nO1xyXG5cclxuICBjb25zdHJ1Y3RvcihzbmFrZTogU25ha2UsIGxlZnRLZXk6IHN0cmluZywgcmlnaHRLZXk6IHN0cmluZykge1xyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLm9uS2V5RG93bi5iaW5kKHRoaXMpKTtcclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIHRoaXMub25LZXlVcC5iaW5kKHRoaXMpKTtcclxuICAgIHRoaXMuc25ha2UgPSBzbmFrZTtcclxuICAgIHRoaXMubGVmdEtleSA9IGxlZnRLZXk7XHJcbiAgICB0aGlzLnJpZ2h0S2V5ID0gcmlnaHRLZXk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIG9uS2V5RG93bihldmVudDogS2V5Ym9hcmRFdmVudCk6IHZvaWQge1xyXG4gICAgLy9pZiBzbmFrZSBpcyBkZWFkLCBpZ25vcmUgdGhlIGtleSBwcmVzc2VzXHJcbiAgICBpZighdGhpcy5zbmFrZS5pc0FsaXZlKSByZXR1cm47XHJcblxyXG4gICAgY29uc3Qga2V5ID0gZXZlbnQua2V5LnRvVXBwZXJDYXNlKCk7XHJcbiAgICBcclxuXHJcbiAgICAvL2lnbm9yZSBrZXlzIG5vdCBhc3NpZ25lZCB0byBzZWxmLCB0aGlzIHdvdWxkIHJlc3VsdCBpbiB0aGUga2V5bWFwIGhhdmluZyB1bm5lY2Vzc2FyeSBrZXlzIGFuZCB0cmlnZ2VyaW5nIHRoZSBvbmtleVVwIGV2ZW50c1xyXG4gICAgaWYoa2V5ICE9IHRoaXMubGVmdEtleSAmJiBrZXkgIT0gdGhpcy5yaWdodEtleSl7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICAvL3N3aXRjaCBvZmYgdGhlIGN1cnJlbnQgZG93biBrZXkgaWYgdGhlIG90aGVyIGRpcmVjdGlvbiBpcyBwcmVzc2VkXHJcbiAgICBpZiAodGhpcy5rZXlNYXBbdGhpcy5yaWdodEtleV0gJiYga2V5ID09IHRoaXMubGVmdEtleSkge1xyXG4gICAgICB0aGlzLmtleU1hcFt0aGlzLnJpZ2h0S2V5XSA9IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAodGhpcy5rZXlNYXBbdGhpcy5sZWZ0S2V5XSAmJiBrZXkgPT0gdGhpcy5yaWdodEtleSkge1xyXG4gICAgICB0aGlzLmtleU1hcFt0aGlzLmxlZnRLZXldID0gZmFsc2U7XHJcbiAgICB9XHJcbiAgICAvL3JldHVybiBpZiB0aGUga2V5IGlzIGFscmFlZHkgaW4gdGhlIG1hcCwgcHJldmVudHMgYXV0b2NsaWNraW5nXHJcbiAgICBlbHNlIGlmICh0aGlzLmtleU1hcFtrZXldKSB7XHJcbiAgICAgIHJldHVyblxyXG4gICAgfVxyXG4gICAgdGhpcy5rZXlNYXBba2V5XSA9IHRydWU7XHJcblxyXG5cclxuICAgIGxldCBoZWFkID0gdGhpcy5zbmFrZS5oZWFkO1xyXG4gICAgbGV0IGVuZFBvaW50ID0gaGVhZC5lbmRQb2ludDtcclxuICAgIGxldCB0YW5nZW50QW5nbGUgPSAwO1xyXG5cclxuICAgIC8vY2FsY3VsYXRlIHRoZSBzdGFydGluZyB0YW5nZW50IGFuZ2xlIG9mIHRoZSBsaW5lXHJcblxyXG4gICAgc2VuZEtleUV2ZW50VG9TZXJ2ZXIoa2V5LCB0cnVlKTtcclxuXHJcbiAgICBpZiAoaGVhZCBpbnN0YW5jZW9mIExpbmVTZWdtZW50KSB7XHJcbiAgICAgIHRhbmdlbnRBbmdsZSArPSBNYXRoLlBJIC8gMjtcclxuXHJcbiAgICAgIGlmIChrZXkgPT0gdGhpcy5yaWdodEtleSkge1xyXG5cclxuICAgICAgICB0aGlzLnNuYWtlLmFkZFNlZ21lbnQobmV3IEFyY1NlZ21lbnQobmV3IFZlY3RvcihcclxuICAgICAgICAgIGVuZFBvaW50LnggKyB0aGlzLnNuYWtlLnR1cm5SYWRpdXMgKiBNYXRoLmNvcyh0aGlzLnNuYWtlLmhlYWQuZW5kQW5nbGUgKyB0YW5nZW50QW5nbGUpLFxyXG4gICAgICAgICAgZW5kUG9pbnQueSArIHRoaXMuc25ha2UudHVyblJhZGl1cyAqIE1hdGguc2luKHRoaXMuc25ha2UuaGVhZC5lbmRBbmdsZSArIHRhbmdlbnRBbmdsZSkpLFxyXG4gICAgICAgICAgdGhpcy5zbmFrZS50dXJuUmFkaXVzLCB0aGlzLnNuYWtlLmhlYWQuZW5kQW5nbGUgLSB0YW5nZW50QW5nbGUsIHRoaXMuc25ha2UuaGVhZC5lbmRBbmdsZSAtIHRhbmdlbnRBbmdsZSwgZmFsc2UsIGhlYWQuaXNDb2xsaWRhYmxlKSlcclxuICAgICAgfVxyXG4gICAgICBpZiAoa2V5ID09IHRoaXMubGVmdEtleSkge1xyXG4gICAgICAgIHRoaXMuc25ha2UuYWRkU2VnbWVudChuZXcgQXJjU2VnbWVudChuZXcgVmVjdG9yKFxyXG4gICAgICAgICAgZW5kUG9pbnQueCArIHRoaXMuc25ha2UudHVyblJhZGl1cyAqIE1hdGguY29zKHRoaXMuc25ha2UuaGVhZC5lbmRBbmdsZSAtIHRhbmdlbnRBbmdsZSksXHJcbiAgICAgICAgICBlbmRQb2ludC55ICsgdGhpcy5zbmFrZS50dXJuUmFkaXVzICogTWF0aC5zaW4odGhpcy5zbmFrZS5oZWFkLmVuZEFuZ2xlIC0gdGFuZ2VudEFuZ2xlKSksXHJcbiAgICAgICAgICB0aGlzLnNuYWtlLnR1cm5SYWRpdXMsIHRoaXMuc25ha2UuaGVhZC5lbmRBbmdsZSArIHRhbmdlbnRBbmdsZSwgdGhpcy5zbmFrZS5oZWFkLmVuZEFuZ2xlICsgdGFuZ2VudEFuZ2xlLCB0cnVlLCBoZWFkLmlzQ29sbGlkYWJsZSkpXHJcbiAgICAgIH1cclxuXHJcbiAgICB9IFxyXG4gICAgLy8gXHJcbiAgICBlbHNlIGlmIChoZWFkIGluc3RhbmNlb2YgQXJjU2VnbWVudCkge1xyXG5cclxuICAgICAgdGFuZ2VudEFuZ2xlID0gaGVhZC5pc0NvdW50ZXJDbG9ja3dpc2UgPyAtTWF0aC5QSSA6IE1hdGguUEk7XHJcbiAgICAgIGlmIChrZXkgPT0gdGhpcy5yaWdodEtleSkge1xyXG4gICAgICAgIHRoaXMuc25ha2UuYWRkU2VnbWVudChuZXcgQXJjU2VnbWVudChuZXcgVmVjdG9yKFxyXG4gICAgICAgICAgZW5kUG9pbnQueCAtIHRoaXMuc25ha2UudHVyblJhZGl1cyAqIE1hdGguY29zKHRoaXMuc25ha2UuaGVhZC5lbmRBbmdsZSArIHRhbmdlbnRBbmdsZSksXHJcbiAgICAgICAgICBlbmRQb2ludC55IC0gdGhpcy5zbmFrZS50dXJuUmFkaXVzICogTWF0aC5zaW4odGhpcy5zbmFrZS5oZWFkLmVuZEFuZ2xlICsgdGFuZ2VudEFuZ2xlKSksXHJcbiAgICAgICAgICB0aGlzLnNuYWtlLnR1cm5SYWRpdXMsIHRoaXMuc25ha2UuaGVhZC5lbmRBbmdsZSAtIHRhbmdlbnRBbmdsZSwgdGhpcy5zbmFrZS5oZWFkLmVuZEFuZ2xlIC0gdGFuZ2VudEFuZ2xlLCBmYWxzZSwgaGVhZC5pc0NvbGxpZGFibGUpKVxyXG4gICAgICB9XHJcbiAgICAgIGlmIChrZXkgPT0gdGhpcy5sZWZ0S2V5KSB7XHJcbiAgICAgICAgdGhpcy5zbmFrZS5hZGRTZWdtZW50KG5ldyBBcmNTZWdtZW50KG5ldyBWZWN0b3IoXHJcbiAgICAgICAgICBlbmRQb2ludC54IC0gdGhpcy5zbmFrZS50dXJuUmFkaXVzICogTWF0aC5jb3ModGhpcy5zbmFrZS5oZWFkLmVuZEFuZ2xlIC0gdGFuZ2VudEFuZ2xlKSxcclxuICAgICAgICAgIGVuZFBvaW50LnkgLSB0aGlzLnNuYWtlLnR1cm5SYWRpdXMgKiBNYXRoLnNpbih0aGlzLnNuYWtlLmhlYWQuZW5kQW5nbGUgLSB0YW5nZW50QW5nbGUpKSxcclxuICAgICAgICAgIHRoaXMuc25ha2UudHVyblJhZGl1cywgdGhpcy5zbmFrZS5oZWFkLmVuZEFuZ2xlICsgdGFuZ2VudEFuZ2xlLCB0aGlzLnNuYWtlLmhlYWQuZW5kQW5nbGUgKyB0YW5nZW50QW5nbGUsIHRydWUsIGhlYWQuaXNDb2xsaWRhYmxlKSlcclxuICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcbiAgICBcclxuICB9XHJcbiAgcHJpdmF0ZSBvbktleVVwKGV2ZW50OiBLZXlib2FyZEV2ZW50KTogdm9pZCB7XHJcbiAgICAvL2lmIHNuYWtlIGlzIGRlYWQsIGlnbm9yZSB0aGUga2V5IHByZXNzZXNcclxuICAgIGlmKCF0aGlzLnNuYWtlLmlzQWxpdmUpIHJldHVybjtcclxuICAgIFxyXG4gICAgY29uc3Qga2V5ID0gZXZlbnQua2V5LnRvVXBwZXJDYXNlKCk7XHJcblxyXG4gICAgLy9jaGVjayBpZiB0aGUga2V5IGlzIGluIHRoZSBrZXltYXAsIGlmIG5vdCBqdXN0IGlnbm9yZSBpdFxyXG4gICAgaWYgKCF0aGlzLmtleU1hcFtrZXldKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHRoaXMua2V5TWFwW2tleV0gPSBmYWxzZTtcclxuXHJcbiAgICAvL2NvbnNvbGUubG9nKHRoaXMuc25ha2UuaGVhZCk7XHJcbiAgICBzZW5kS2V5RXZlbnRUb1NlcnZlcihrZXksIGZhbHNlKTtcclxuXHJcbiAgICBsZXQgaGVhZCA9IHRoaXMuc25ha2UuaGVhZDtcclxuICAgIGxldCBlbmRQb2ludCA9IGhlYWQuZW5kUG9pbnQ7XHJcbiAgICBsZXQgYW5nbGUgPSBoZWFkLmVuZEFuZ2xlO1xyXG5cclxuICAgIGlmIChrZXkgPT0gdGhpcy5sZWZ0S2V5ICYmIGhlYWQgaW5zdGFuY2VvZiBBcmNTZWdtZW50ICYmIGhlYWQuaXNDb3VudGVyQ2xvY2t3aXNlKCkpIHtcclxuXHJcbiAgICAgIGFuZ2xlIC09IE1hdGguUEkgLyAyO1xyXG4gICAgfSBlbHNlIGlmIChrZXkgPT0gdGhpcy5yaWdodEtleSAmJiBoZWFkIGluc3RhbmNlb2YgQXJjU2VnbWVudCAmJiAhaGVhZC5pc0NvdW50ZXJDbG9ja3dpc2UoKSkge1xyXG5cclxuICAgICAgYW5nbGUgKz0gTWF0aC5QSSAvIDI7XHJcbiAgICB9XHJcblxyXG5cclxuXHJcbiAgICB0aGlzLnNuYWtlLmFkZFNlZ21lbnQobmV3IExpbmVTZWdtZW50KGVuZFBvaW50LFxyXG4gICAgICBuZXcgVmVjdG9yKGVuZFBvaW50LnggKyA1ICogTWF0aC5jb3MoYW5nbGUpLCBlbmRQb2ludC55ICsgNSAqIE1hdGguc2luKGFuZ2xlKSksIGhlYWQuaXNDb2xsaWRhYmxlICxhbmdsZSkpO1xyXG4gICAgLy9jb25zb2xlLmxvZyh0aGlzLnNuYWtlLmhlYWQpO1xyXG4gIH1cclxuXHJcblxyXG4gIHB1YmxpYyBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLm9uS2V5RG93bi5iaW5kKHRoaXMpKTtcclxuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXl1cCcsIHRoaXMub25LZXlVcC5iaW5kKHRoaXMpKTtcclxuICB9XHJcblxyXG5cclxuXHJcbn1cclxuXHJcbiIsImltcG9ydCB7IFZlY3RvciB9IGZyb20gXCJ2ZWN0b3IyZFwiO1xyXG5pbXBvcnQgU2VnbWVudCBmcm9tIFwiLi9TZWdtZW50XCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMaW5lU2VnbWVudCBleHRlbmRzIFNlZ21lbnQge1xyXG5cclxuXHJcbiAgICBwdWJsaWMgc3RhcnRQb2ludDogVmVjdG9yO1xyXG4gICAgcHVibGljIGVuZFBvaW50OiBWZWN0b3I7XHJcbiAgICBwdWJsaWMgZW5kQW5nbGU6IG51bWJlcjtcclxuICAgIHB1YmxpYyBpc0NvbGxpZGFibGU6IGJvb2xlYW4gPSB0cnVlO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHN0YXJ0OiBWZWN0b3IsIGVuZDogVmVjdG9yLCBpc0NvbGxpZGFibGU6IGJvb2xlYW4sIGFuZ2xlPzogbnVtYmVyKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLnN0YXJ0UG9pbnQgPSBzdGFydDtcclxuICAgICAgICB0aGlzLmVuZFBvaW50ID0gZW5kO1xyXG4gICAgICAgIHRoaXMuaXNDb2xsaWRhYmxlID0gaXNDb2xsaWRhYmxlO1xyXG4gICAgICAgIHRoaXMuZW5kQW5nbGUgPSBhbmdsZTtcclxuICAgICAgICBcclxuICAgICAgfVxyXG5cclxuICAgICAgZHJhdyhjb250ZXh0OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsIGNvbG9yOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgICAgICAvLyBjb250ZXh0LnN0cm9rZVN0eWxlID0gJyNmZjAwZmZmZidcclxuICAgICAgICBjb250ZXh0LnN0cm9rZVN0eWxlID0gY29sb3I7XHJcbiAgICAgICAgY29udGV4dC5saW5lQ2FwID0gXCJyb3VuZFwiO1xyXG4gICAgICAgIGlmICh0aGlzLmlzQ29sbGlkYWJsZSA9PSB0cnVlKXtcclxuICAgICAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuICAgICAgICAgICAgY29udGV4dC5tb3ZlVG8odGhpcy5zdGFydFBvaW50LngsIHRoaXMuc3RhcnRQb2ludC55KTtcclxuICAgICAgICAgICAgY29udGV4dC5saW5lVG8odGhpcy5lbmRQb2ludC54LCB0aGlzLmVuZFBvaW50LnkpO1xyXG4gICAgICAgICAgICBjb250ZXh0LnN0cm9rZSgpO1xyXG4gICAgICAgICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHByaXZhdGUgY2FsY0VuZEFuZ2xlKCk6IG51bWJlcntcclxuICAgICAgICByZXR1cm4gTWF0aC5hdGFuKCh0aGlzLmVuZFBvaW50LnkgLSB0aGlzLnN0YXJ0UG9pbnQueSkgLyAodGhpcy5lbmRQb2ludC54IC0gdGhpcy5zdGFydFBvaW50LngpKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgbGVuZ3RoKCk6IG51bWJlcntcclxuICAgICAgICByZXR1cm4gTWF0aC5zcXJ0KCh0aGlzLnN0YXJ0UG9pbnQueCAtIHRoaXMuZW5kUG9pbnQueCkqKjIgKyAodGhpcy5zdGFydFBvaW50LnkgLSB0aGlzLmVuZFBvaW50LnkpKioyKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRDb250aW51aW5nU2VnbWVudCh0cmFuc2Zvcm06IFZlY3Rvcik6IFNlZ21lbnQge1xyXG4gICAgICAgIGNvbnN0IHRyYW5zZm9ybWVkRW5kcG9pbnQgPSB0aGlzLmVuZFBvaW50LmNsb25lKCkuYWRkKHRyYW5zZm9ybSkgYXMgVmVjdG9yO1xyXG4gICAgICAgIHJldHVybiBuZXcgTGluZVNlZ21lbnQoXHJcbiAgICAgICAgICAgIHRyYW5zZm9ybWVkRW5kcG9pbnQsIFxyXG4gICAgICAgICAgICB0cmFuc2Zvcm1lZEVuZHBvaW50LCBcclxuICAgICAgICAgICAgdGhpcy5pc0NvbGxpZGFibGUsIFxyXG4gICAgICAgICAgICB0aGlzLmVuZEFuZ2xlXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbn0iLCJpbXBvcnQgeyBQbGF5ZXIgfSBmcm9tIFwiLi4vVmlld01vZGVscy9QbGF5ZXJcIjtcclxuaW1wb3J0IHsgUm9vbSB9IGZyb20gXCIuLi9WaWV3TW9kZWxzL1Jvb21cIjtcclxuaW1wb3J0IHsgY3JlYXRlUm9vbSwgam9pblJvb20sIHNldFBsYXllckRhdGEgfSBmcm9tIFwiLi4vV2ViU29ja2V0Q2xpZW50L3dlYnNvY2tldFwiO1xyXG5cclxuXHJcbmxldCBjdXJyZW50Um9vbTogUm9vbSB8IG51bGwgPSBudWxsO1xyXG5sZXQgY3VycmVudFBsYXllcjogUGxheWVyIHwgbnVsbCA9IG51bGw7XHJcblxyXG5jb25zdCByb29tQ29kZUlucHV0ID0gKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyb29tQ29kZUlucHV0JykgYXMgSFRNTElucHV0RWxlbWVudCk7XHJcbmNvbnN0IHVzZXJuYW1lSW5wdXQgPSAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3VzZXJuYW1lSW5wdXQnKSBhcyBIVE1MSW5wdXRFbGVtZW50KTtcclxuY29uc3Qgcm9vbUJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdqb2luQnV0dG9uJykgYXMgSFRNTEJ1dHRvbkVsZW1lbnQ7XHJcbmNvbnN0IHJlYWR5QnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JlYWR5QnV0dG9uJykgYXMgSFRNTEJ1dHRvbkVsZW1lbnQ7XHJcbmNvbnN0IGxvZ2luRGl2PSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbG9naW4tZGl2JykgYXMgSFRNTEJ1dHRvbkVsZW1lbnQ7XHJcbmNvbnN0IHJvb21EaXY9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyb29tLWRpdicpIGFzIEhUTUxCdXR0b25FbGVtZW50O1xyXG5jb25zdCBjb2xvclBpY2tlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb2xvci1waWNrZXInKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xyXG5jb25zdCByb29tVXNlcnNMaXN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jvb20tdXNlcnMtbGlzdCcpIGFzIEhUTUxVTGlzdEVsZW1lbnQ7XHJcbmNvbnN0IHJvb21Db2RlU3Bhbj0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jvb20tY29kZScpIGFzIEhUTUxQYXJhZ3JhcGhFbGVtZW50O1xyXG5jb25zdCBwbGF5ZXJDb3VudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwbGF5ZXItY291bnQnKSBhcyBIVE1MUGFyYWdyYXBoRWxlbWVudDtcclxuY29uc3QgY29sb3JQaWNrZXJEaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29sb3ItcGlja2VyLWNvbnRhaW5lcicpO1xyXG5jb25zdCBzdGFydFByb2dyZXNzQmFyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N0YXJ0LXByb2dyZXNzLWJhcicpO1xyXG4vLyBzcmMvbG9naW4udHNcclxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZUJ1dHRvbigpIHtcclxuICAgIFxyXG5cclxuICAgIGlmICh1c2VybmFtZUlucHV0LnZhbHVlLnRyaW0oKSA9PSAnJykge1xyXG4gICAgICAgIHJvb21CdXR0b24uZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICByb29tQnV0dG9uLmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHJvb21Db2RlSW5wdXQudmFsdWUudHJpbSgpLmxlbmd0aCA9PSA1KSB7XHJcbiAgICAgICAgcm9vbUJ1dHRvbi50ZXh0Q29udGVudCA9ICdKT0lOIFJPT00nO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICByb29tQnV0dG9uLnRleHRDb250ZW50ID0gJ0NSRUFURSBST09NJztcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGhhbmRsZVJvb21BY3Rpb24oKSB7XHJcbiAgICBjb25zdCB1c2VybmFtZSA9IHVzZXJuYW1lSW5wdXQudmFsdWU7XHJcbiAgICBpZiAoIXVzZXJuYW1lKSByZXR1cm47XHJcbiAgICBcclxuICAgIGN1cnJlbnRQbGF5ZXIgPSBuZXcgUGxheWVyKHVzZXJuYW1lKTtcclxuXHJcbiAgICBpZiAocm9vbUJ1dHRvbi5pbm5lclRleHQgPT09ICdDUkVBVEUgUk9PTScpIHtcclxuICAgICAgICBjcmVhdGVSb29tKHVzZXJuYW1lSW5wdXQudmFsdWUpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBcclxuICAgICAgICBqb2luUm9vbShyb29tQ29kZUlucHV0LnZhbHVlLnRvVXBwZXJDYXNlKCksIHVzZXJuYW1lSW5wdXQudmFsdWUpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaGFuZGxlUmVhZHlTdGF0ZSgpIHtcclxuICAgIFxyXG4gICAgY3VycmVudFBsYXllci5pc1JlYWR5ID0gIWN1cnJlbnRQbGF5ZXIuaXNSZWFkeTtcclxuICAgIHNldFBsYXllckRhdGEoY3VycmVudFBsYXllciwgY3VycmVudFJvb20uZ2V0Q29kZSgpKTtcclxuICAgIHVwZGF0ZVJlYWR5QnV0dG9uKGN1cnJlbnRQbGF5ZXIuaXNSZWFkeSk7XHJcbiAgICBcclxufVxyXG5cclxuZnVuY3Rpb24gdXBkYXRlUmVhZHlCdXR0b24oaXNSZWFkeTogYm9vbGVhbikge1xyXG4gICAgaWYoaXNSZWFkeSl7XHJcbiAgICAgICAgcmVhZHlCdXR0b24uY2xhc3NMaXN0LnJlbW92ZSgncmVkLWJ1dHRvbicpO1xyXG4gICAgICAgIHJlYWR5QnV0dG9uLmNsYXNzTGlzdC5hZGQoJ2dyZWVuLWJ1dHRvbicpO1xyXG4gICAgfVxyXG4gICAgZWxzZXtcclxuICAgICAgICByZWFkeUJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdyZWQtYnV0dG9uJyk7XHJcbiAgICAgICAgcmVhZHlCdXR0b24uY2xhc3NMaXN0LnJlbW92ZSgnZ3JlZW4tYnV0dG9uJyk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzaG93Um9vbVZpZXcoZGF0YTogSlNPTil7XHJcbiAgICAvL3NldCB0aGUgY2xpZW50IFZpZXdNb2RlbCBvZiB0aGUgcm9vbSB0byB0aGUgc2VydmVycyByZXNwb25zZVxyXG4gICAgbGV0IHJvb21JbmZvID0gSlNPTi5wYXJzZShkYXRhLnRvU3RyaW5nKCkpO1xyXG4gICAgY3VycmVudFJvb20gPSBuZXcgUm9vbSAocm9vbUluZm9bJ3Jvb20nXVsnY29kZSddLCByb29tSW5mb1sncm9vbSddWydob3N0J10sIHJvb21JbmZvWydyb29tJ11bJ3BsYXllcnMnXSwgcm9vbUluZm9bJ3Jvb20nXVsnbWF4U2l6ZSddKVxyXG5cclxuICAgICAgICAvL3Nob3cgc3RhcnRHYW1lQnV0dG9uIFxyXG4gICAgICAgIGlmKGN1cnJlbnRQbGF5ZXIudXNlcm5hbWUgPT0gY3VycmVudFJvb20uZ2V0SG9zdCgpLnVzZXJuYW1lKSBcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N0YXJ0QnV0dG9uJykuY2xhc3NMaXN0LnJlbW92ZSgnZGlzcGxheS1ub25lJyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAvL3NldCBhIHJhbmRvbSBjb2xvciBmb3IgYSBwbGF5ZXJcclxuICAgIGNvbG9yUGlja2VyRGl2LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IGN1cnJlbnRQbGF5ZXIuY29sb3I7XHJcbiAgICBjb2xvclBpY2tlci52YWx1ZSA9IGN1cnJlbnRQbGF5ZXIuY29sb3I7XHJcbiAgICBsZXQgY29sb3JQaWNrZXJMYWJlbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb2xvci1sYWJlbCcpO1xyXG4gICAgY29sb3JQaWNrZXJMYWJlbC5zdHlsZS5jb2xvciA9IHBpY2tUZXh0Q29sb3JCYXNlZE9uQmdDb2xvckFkdmFuY2VkKGNvbG9yUGlja2VyLnZhbHVlLCAnI0ZGRkZGRicsICcjMDAwMDAwJyk7XHJcblxyXG4gICAgLy9zaG93IHRoZSBuZXcgZWxlbWVudFxyXG4gICAgbG9naW5EaXYuY2xhc3NMaXN0LmFkZCgnZGlzcGxheS1ub25lJyk7XHJcbiAgICByb29tRGl2LmNsYXNzTGlzdC5hZGQoJ2Rpc3BsYXktZmxleCcpO1xyXG5cclxuXHJcblxyXG4gICAgcm9vbUNvZGVJbnB1dC52YWx1ZSA9IGN1cnJlbnRSb29tLmdldENvZGUoKTtcclxuICAgIHJvb21Db2RlU3Bhbi5pbm5lckhUTUwgID0gY3VycmVudFJvb20uZ2V0Q29kZSgpO1xyXG4gICAgc2V0UGxheWVyRGF0YShjdXJyZW50UGxheWVyLCBjdXJyZW50Um9vbS5nZXRDb2RlKCkpO1xyXG4gICAgdXBkYXRlUm9vbUxpc3QoZGF0YSk7XHJcbiAgICBcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZVJvb21MaXN0KGRhdGE6IEpTT04pe1xyXG4gICAgbGV0IHJvb21JbmZvID0gSlNPTi5wYXJzZShkYXRhLnRvU3RyaW5nKCkpO1xyXG5cclxuICAgIC8vIHVwZGF0aW5nIHRoZSBjdXJyZW50IHJvb20gcGxheWVycyBhbmQgaG9zdFxyXG4gICAgY3VycmVudFJvb20uc2V0UGxheWVycyhyb29tSW5mb1sncm9vbSddWydwbGF5ZXJzJ10pO1xyXG4gICAgY3VycmVudFJvb20uc2V0SG9zdChyb29tSW5mb1sncm9vbSddWydob3N0J10pO1xyXG4gICAgY3VycmVudFJvb20uc2V0TWF4U2l6ZShyb29tSW5mb1sncm9vbSddWydtYXhTaXplJ10pXHJcbiAgICBcclxuXHJcbiAgICBwbGF5ZXJDb3VudC5pbm5lckhUTUwgPSBgJHtjdXJyZW50Um9vbS5nZXRQbGF5ZXJzKCkubGVuZ3RofS8ke2N1cnJlbnRSb29tLmdldE1heFNpemUoKX1gO1xyXG4gICAgcm9vbVVzZXJzTGlzdC5pbm5lckhUTUwgPSAnJztcclxuXHJcbiAgICBjdXJyZW50Um9vbS5nZXRQbGF5ZXJzKCkuZm9yRWFjaCgocGxheWVyOiB7IHVzZXJuYW1lOiBzdHJpbmcgfCBudW1iZXI7IGlzUmVhZHk6IGJvb2xlYW47IGNvbG9yOiBzdHJpbmc7fSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHBsYXllckl0ZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpO1xyXG5cclxuICAgICAgICBwbGF5ZXJJdGVtLnRleHRDb250ZW50ID0gcGxheWVyLnVzZXJuYW1lICsgJyc7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYocGxheWVyLnVzZXJuYW1lID09IGN1cnJlbnRSb29tLmdldEhvc3QoKS51c2VybmFtZSkge1xyXG4gICAgICAgICAgICBwbGF5ZXJJdGVtLmluc2VydEFkamFjZW50SFRNTCgnYWZ0ZXJiZWdpbicsIGA8aSBjbGFzcz1cImZhLXNvbGlkIGZhLWNyb3duXCIgc3R5bGU9XCJjb2xvcjogJHtwbGF5ZXIuY29sb3J9O1wiPjwvaT5gKVxyXG4gICAgICAgICAgICBcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgcGxheWVySXRlbS5pbnNlcnRBZGphY2VudEhUTUwoJ2FmdGVyYmVnaW4nLCBgPGkgY2xhc3M9XCJmYS1zb2xpZCBmYS1jaXJjbGVcIiBzdHlsZT1cImNvbG9yOiAke3BsYXllci5jb2xvcn07IG1hcmdpbi1sZWZ0OiA0cHhcIj48L2k+YClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChwbGF5ZXIuaXNSZWFkeSkge1xyXG4gICAgICAgICAgICBwbGF5ZXJJdGVtLmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlZW5kJywgJyA8aSBjbGFzcz1cImZhLXNvbGlkIGZhLWNpcmNsZVwiIHN0eWxlPVwiY29sb3I6ICMzN2NiNDg7XCI+PC9pPicpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHBsYXllckl0ZW0uaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVlbmQnLCAnIDxpIGNsYXNzPVwiZmEtc29saWQgZmEtY2lyY2xlXCIgc3R5bGU9XCJjb2xvcjogI2NiMzczNztcIj48L2k+Jyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByb29tVXNlcnNMaXN0LmFwcGVuZENoaWxkKHBsYXllckl0ZW0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdXBkYXRlU3RhcnRCdXR0b25Qcm9ncmVzcyhjdXJyZW50Um9vbS5nZXRQbGF5ZXJzKCkuZmlsdGVyKHAgPT4gcC5pc1JlYWR5KS5sZW5ndGgsIGN1cnJlbnRSb29tLmdldE1heFNpemUoKSk7XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiB1cGRhdGVTdGFydEJ1dHRvblByb2dyZXNzKHJlYWR5UGxheWVyQ291bnQ6IG51bWJlciwgbWF4UGxheWVyQ291bnQ6IG51bWJlcil7XHJcbiAgICBpZiAobWF4UGxheWVyQ291bnQgPT0gMCl7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgc3RhcnRQcm9ncmVzc0Jhci5zdHlsZS53aWR0aCA9ICBNYXRoLmZsb29yKHJlYWR5UGxheWVyQ291bnQvbWF4UGxheWVyQ291bnQqMTAwKSArICclJztcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gc2hvd0Vycm9yQW5pbWF0aW9uKCkge1xyXG4gICAgcm9vbUJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdyZWQtYnV0dG9uJyk7XHJcbiAgICByb29tQnV0dG9uLmNsYXNzTGlzdC5hZGQoJ3dpZ2dsZScpO1xyXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICByb29tQnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ3JlZC1idXR0b24nKTtcclxuICAgIHJvb21CdXR0b24uY2xhc3NMaXN0LnJlbW92ZSgnd2lnZ2xlJyk7XHJcbiAgICB9LCA2MDApXHJcbn1cclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlQ29sb3JQaWNrZXIoKSB7XHJcbiAgICBjb2xvclBpY2tlckRpdi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBjb2xvclBpY2tlci52YWx1ZTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZVBsYXllckNvbG9yKCkge1xyXG4gICAgY3VycmVudFBsYXllci5jb2xvciA9IGNvbG9yUGlja2VyLnZhbHVlO1xyXG4gICAgbGV0IGNvbG9yUGlja2VyTGFiZWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29sb3ItbGFiZWwnKTtcclxuICAgIGNvbG9yUGlja2VyTGFiZWwuc3R5bGUuY29sb3IgPSBwaWNrVGV4dENvbG9yQmFzZWRPbkJnQ29sb3JBZHZhbmNlZChjb2xvclBpY2tlci52YWx1ZSwgJyNGRkZGRkYnLCAnIzAwMDAwMCcpO1xyXG4gICAgc2V0UGxheWVyRGF0YShjdXJyZW50UGxheWVyLCBjdXJyZW50Um9vbS5nZXRDb2RlKCkpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBwaWNrVGV4dENvbG9yQmFzZWRPbkJnQ29sb3JBZHZhbmNlZChiZ0NvbG9yOnN0cmluZywgbGlnaHRDb2xvcjogc3RyaW5nLCBkYXJrQ29sb3I6IHN0cmluZykge1xyXG4gICAgdmFyIGNvbG9yID0gKGJnQ29sb3IuY2hhckF0KDApID09PSAnIycpID8gYmdDb2xvci5zdWJzdHJpbmcoMSwgNykgOiBiZ0NvbG9yO1xyXG4gICAgdmFyIHIgPSBwYXJzZUludChjb2xvci5zdWJzdHJpbmcoMCwgMiksIDE2KTsgLy8gaGV4VG9SXHJcbiAgICB2YXIgZyA9IHBhcnNlSW50KGNvbG9yLnN1YnN0cmluZygyLCA0KSwgMTYpOyAvLyBoZXhUb0dcclxuICAgIHZhciBiID0gcGFyc2VJbnQoY29sb3Iuc3Vic3RyaW5nKDQsIDYpLCAxNik7IC8vIGhleFRvQlxyXG4gICAgdmFyIHVpY29sb3JzID0gW3IgLyAyNTUsIGcgLyAyNTUsIGIgLyAyNTVdO1xyXG4gICAgdmFyIGMgPSB1aWNvbG9ycy5tYXAoKGNvbCkgPT4ge1xyXG4gICAgICBpZiAoY29sIDw9IDAuMDM5MjgpIHtcclxuICAgICAgICByZXR1cm4gY29sIC8gMTIuOTI7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIE1hdGgucG93KChjb2wgKyAwLjA1NSkgLyAxLjA1NSwgMi40KTtcclxuICAgIH0pO1xyXG4gICAgdmFyIEwgPSAoMC4yMTI2ICogY1swXSkgKyAoMC43MTUyICogY1sxXSkgKyAoMC4wNzIyICogY1syXSk7XHJcbiAgICByZXR1cm4gKEwgPiAwLjQpID8gZGFya0NvbG9yIDogbGlnaHRDb2xvcjtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHN0YXJ0R2FtZSgpIHtcclxuXHJcbiAgfVxyXG5cclxud2luZG93Lm9ubG9hZCA9ICgpID0+IHtcclxuICAgIHVwZGF0ZUJ1dHRvbigpO1xyXG59O1xyXG5cclxuKHdpbmRvdyBhcyBhbnkpLnVwZGF0ZUJ1dHRvbiA9IHVwZGF0ZUJ1dHRvbjtcclxuKHdpbmRvdyBhcyBhbnkpLmhhbmRsZVJvb21BY3Rpb24gPSBoYW5kbGVSb29tQWN0aW9uO1xyXG4od2luZG93IGFzIGFueSkuaGFuZGxlUmVhZHlTdGF0ZSA9IGhhbmRsZVJlYWR5U3RhdGU7XHJcbih3aW5kb3cgYXMgYW55KS51cGRhdGVDb2xvclBpY2tlciA9IHVwZGF0ZUNvbG9yUGlja2VyO1xyXG4od2luZG93IGFzIGFueSkudXBkYXRlUGxheWVyQ29sb3IgPSB1cGRhdGVQbGF5ZXJDb2xvcjtcclxuKHdpbmRvdyBhcyBhbnkpLnN0YXJ0R2FtZSA9IHN0YXJ0R2FtZTsiLCJpbXBvcnQgeyBWZWN0b3IgfSBmcm9tIFwidmVjdG9yMmRcIjtcclxuaW1wb3J0IFBhcnRpY2xlLCB7IHNoYXBlIH0gZnJvbSBcIi4vUGFydGljbGVcIjtcclxuaW1wb3J0IHsgZ2V0UmFuZG9tRGlyZWN0aW9uIH0gZnJvbSBcIi4vUGFydGljbGVTeXN0ZW1VdGlsc1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRW1pdHRlcntcclxuICAgIHByaXZhdGUgYWxpdmVQYXJ0aWNsZXM6IFBhcnRpY2xlW10gPSBbXTtcclxuICAgIHB1YmxpYyBwb3NpdGlvbjogVmVjdG9yO1xyXG4gICAgcHVibGljIGVtaXRUaW1lOiBudW1iZXI7XHJcbiAgICBwdWJsaWMgc2hhcGU6IHNoYXBlO1xyXG4gICAgcHVibGljIHNpemU6IG51bWJlcjtcclxuICAgIHB1YmxpYyBzcGVlZDogbnVtYmVyO1xyXG4gICAgcHVibGljIGNvbG9yOiB7cjogbnVtYmVyLCBnOiBudW1iZXIsIGI6IG51bWJlciwgYTogbnVtYmVyfTtcclxuICAgIHB1YmxpYyBmYWRlQ29sb3I6IGJvb2xlYW47XHJcbiAgICBwdWJsaWMgZmFkZVNpemU6IGJvb2xlYW47XHJcbiAgICBwdWJsaWMgcGFydGljbGVNYXhBZ2U6IG51bWJlcjtcclxuICAgIHB1YmxpYyBjYW52YXNDdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRDtcclxuICAgIHB1YmxpYyBlbWl0VGltZU1pbGxpczogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSB0aWNrczogbnVtYmVyID0gMDtcclxuICAgIFxyXG5cclxuICAgIFxyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHBvc2l0aW9uOiBWZWN0b3IsIGVtaXRJbnRlcnZhbDogbnVtYmVyLCBzaXplOiBudW1iZXIsIHNwZWVkOiBudW1iZXIsIHNoYXBlOiBzaGFwZSA9ICdjaXJjbGUnLCBjb2xvcjoge3I6IG51bWJlciwgZzogbnVtYmVyLCBiOiBudW1iZXIsIGE6IG51bWJlcn0sIGNhbnZhc0N0eDpDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsICBmYWRlQ29sb3I6IGJvb2xlYW4gPSB0cnVlLCBmYWRlU2l6ZTogYm9vbGVhbiA9IHRydWUsIGFnZTogbnVtYmVyLCBlbWl0VGltZU1pbGxpczogbnVtYmVyID0gMCl7XHJcbiAgICB0aGlzLnBvc2l0aW9uID0gcG9zaXRpb247XHJcbiAgICB0aGlzLmVtaXRUaW1lID0gZW1pdEludGVydmFsO1xyXG4gICAgdGhpcy5zaXplID0gc2l6ZTtcclxuICAgIHRoaXMuc3BlZWQgPSBzcGVlZDtcclxuICAgIHRoaXMuc2hhcGUgPSBzaGFwZTtcclxuICAgIHRoaXMuY29sb3IgPSBjb2xvcjtcclxuICAgIHRoaXMuY2FudmFzQ3R4ID0gY2FudmFzQ3R4O1xyXG4gICAgdGhpcy5mYWRlQ29sb3IgPSBmYWRlQ29sb3I7XHJcbiAgICB0aGlzLmZhZGVTaXplID0gZmFkZVNpemU7IFxyXG4gICAgdGhpcy5wYXJ0aWNsZU1heEFnZSA9IGFnZTtcclxuICAgIHRoaXMuZW1pdFRpbWVNaWxsaXMgPSBlbWl0VGltZU1pbGxpcztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgdGljayhkdDogbnVtYmVyKXtcclxuICAgICAgICBpZiAoKHRoaXMuZW1pdFRpbWVNaWxsaXMgKyB0aGlzLnBhcnRpY2xlTWF4QWdlKSA8IDApIHJldHVybjtcclxuXHJcbiAgICAgICAgdGhpcy5lbWl0VGltZU1pbGxpcyAtPSBkdDtcclxuXHJcblxyXG4gICAgICAgIGlmICh0aGlzLnRpY2tzICUgdGhpcy5lbWl0VGltZSA9PSAwICYmIHRoaXMuZW1pdFRpbWVNaWxsaXMgPiAwKXtcclxuICAgICAgICAgICAgdGhpcy5hbGl2ZVBhcnRpY2xlcy5wdXNoKG5ldyBQYXJ0aWNsZSh0aGlzLnBvc2l0aW9uLmNsb25lKCkgYXMgVmVjdG9yLCBnZXRSYW5kb21EaXJlY3Rpb24oKSwgdGhpcy5zaXplLCB0aGlzLnNwZWVkLCB0aGlzLnNoYXBlLHsuLi50aGlzLmNvbG9yfSx0aGlzLmNhbnZhc0N0eCwgdGhpcy5wYXJ0aWNsZU1heEFnZSwgdGhpcy5mYWRlQ29sb3IsIHRoaXMuZmFkZVNpemUpKTtcclxuICAgICAgICAgICAgdGhpcy5hbGl2ZVBhcnRpY2xlcy5wdXNoKG5ldyBQYXJ0aWNsZSh0aGlzLnBvc2l0aW9uLmNsb25lKCkgYXMgVmVjdG9yLCBnZXRSYW5kb21EaXJlY3Rpb24oKSwgdGhpcy5zaXplLCB0aGlzLnNwZWVkLCB0aGlzLnNoYXBlLHsuLi50aGlzLmNvbG9yfSx0aGlzLmNhbnZhc0N0eCwgdGhpcy5wYXJ0aWNsZU1heEFnZSwgdGhpcy5mYWRlQ29sb3IsIHRoaXMuZmFkZVNpemUpKTtcclxuICAgICAgICAgICAgdGhpcy5hbGl2ZVBhcnRpY2xlcy5wdXNoKG5ldyBQYXJ0aWNsZSh0aGlzLnBvc2l0aW9uLmNsb25lKCkgYXMgVmVjdG9yLCBnZXRSYW5kb21EaXJlY3Rpb24oKSwgdGhpcy5zaXplLCB0aGlzLnNwZWVkLCB0aGlzLnNoYXBlLHsuLi50aGlzLmNvbG9yfSx0aGlzLmNhbnZhc0N0eCwgdGhpcy5wYXJ0aWNsZU1heEFnZSwgdGhpcy5mYWRlQ29sb3IsIHRoaXMuZmFkZVNpemUpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5hbGl2ZVBhcnRpY2xlcy5mb3JFYWNoKHBhcnRpY2xlID0+IHtcclxuICAgICAgICAgICAgcGFydGljbGUudGljayhkdClcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5hbGl2ZVBhcnRpY2xlcyA9IHRoaXMuYWxpdmVQYXJ0aWNsZXMuZmlsdGVyKHBhcnRpY2xlID0+IHBhcnRpY2xlLmFnZSA+IDApO1xyXG5cclxuXHJcbiAgICAgICAgdGhpcy50aWNrcysrO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBkcmF3KCl7XHJcbiAgICAgICAgdGhpcy5hbGl2ZVBhcnRpY2xlcy5mb3JFYWNoKHBhcnRpY2xlID0+IHtcclxuICAgICAgICAgICAgcGFydGljbGUuZHJhdygpXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG59IiwiaW1wb3J0IHsgVmVjdG9yIH0gZnJvbSBcInZlY3RvcjJkXCI7XHJcbmV4cG9ydCB0eXBlIHNoYXBlID0gJ2NpcmNsZScgfCAnc3F1YXJlJztcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGFydGljbGUge1xyXG4gICAgcG9zaXRpb246IFZlY3RvcjtcclxuICAgIHZlbG9jaXR5OiBWZWN0b3I7XHJcbiAgICBzaGFwZTogc2hhcGU7XHJcbiAgICBzaXplOiBudW1iZXI7XHJcbiAgICBzcGVlZDogbnVtYmVyO1xyXG4gICAgY29sb3I6IHtyOiBudW1iZXIsIGc6IG51bWJlciwgYjogbnVtYmVyLCBhOiBudW1iZXJ9O1xyXG4gICAgZmFkZUNvbG9yOiBib29sZWFuO1xyXG4gICAgZmFkZVNpemU6IGJvb2xlYW47XHJcbiAgICBhZ2U6IG51bWJlcjtcclxuICAgIGNhbnZhc0N0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEO1xyXG4gICAgcHJpdmF0ZSBzaXplRmFkZUFtb3VudDogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBjb2xvckZhZGVBbW91bnQ6IG51bWJlcjtcclxuXHJcbiBcclxuXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IocG9zaXRpb246IFZlY3RvciwgdmVsb2NpdHk6IFZlY3Rvciwgc2l6ZTogbnVtYmVyLCBzcGVlZDogbnVtYmVyLCAgc2hhcGU6IHNoYXBlID0gJ2NpcmNsZScsIGNvbG9yOiB7cjogbnVtYmVyLCBnOiBudW1iZXIsIGI6IG51bWJlciwgYTogbnVtYmVyfSwgY2FudmFzQ3R4OkNhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCwgYWdlOiBudW1iZXIsICBmYWRlQ29sb3I/OiBib29sZWFuLCBmYWRlU2l6ZT86IGJvb2xlYW4pe1xyXG4gICAgICAgIHRoaXMucG9zaXRpb24gPSBwb3NpdGlvbjtcclxuICAgICAgICB0aGlzLnZlbG9jaXR5ID0gdmVsb2NpdHk7XHJcbiAgICAgICAgdGhpcy5zaXplID0gc2l6ZTtcclxuICAgICAgICB0aGlzLnNwZWVkID0gc3BlZWQ7XHJcbiAgICAgICAgdGhpcy5zaGFwZSA9IHNoYXBlO1xyXG4gICAgICAgIHRoaXMuY29sb3IgPSBjb2xvcjtcclxuICAgICAgICB0aGlzLmNhbnZhc0N0eCA9IGNhbnZhc0N0eDtcclxuICAgICAgICB0aGlzLmZhZGVDb2xvciA9IGZhZGVDb2xvcjtcclxuICAgICAgICB0aGlzLmZhZGVTaXplID0gZmFkZVNpemU7IFxyXG4gICAgICAgIHRoaXMuYWdlID0gYWdlO1xyXG4gICAgICAgIHRoaXMuY29sb3JGYWRlQW1vdW50ID0gdGhpcy5jb2xvci5hL3RoaXMuYWdlO1xyXG4gICAgICAgIHRoaXMuc2l6ZUZhZGVBbW91bnQgPSB0aGlzLnNpemUvdGhpcy5hZ2U7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHRpY2soZHQ6IG51bWJlcil7XHJcblxyXG4gICAgICAgIHRoaXMucG9zaXRpb24uYWRkKHRoaXMudmVsb2NpdHkuY2xvbmUoKS5tdWx0aXBseUJ5U2NhbGFyKGR0ICogdGhpcy5zcGVlZCkpO1xyXG4gICAgICAgIGlmKHRoaXMuZmFkZUNvbG9yKXtcclxuICAgICAgICAgICAgdGhpcy5jb2xvci5hIC09IHRoaXMuY29sb3JGYWRlQW1vdW50O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZih0aGlzLmZhZGVTaXplKXtcclxuICAgICAgICAgICAgdGhpcy5zaXplIC09ICB0aGlzLnNpemVGYWRlQW1vdW50O1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmFnZS0tO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBkcmF3KCl7XHJcbiAgICAgICAgdGhpcy5jYW52YXNDdHgubW92ZVRvKHRoaXMucG9zaXRpb24ueCwgdGhpcy5wb3NpdGlvbi55KTtcclxuICAgICAgICB0aGlzLmNhbnZhc0N0eC5maWxsU3R5bGUgPSBgcmdiYSgke3RoaXMuY29sb3Iucn0sJHt0aGlzLmNvbG9yLmd9LCAke3RoaXMuY29sb3IuYn0sICR7dGhpcy5jb2xvci5hfSlgO1xyXG4gICAgICAgIHRoaXMuY2FudmFzQ3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIHN3aXRjaCAodGhpcy5zaGFwZSkge1xyXG4gICAgICAgICAgICBjYXNlICdjaXJjbGUnOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5jYW52YXNDdHguYXJjKHRoaXMucG9zaXRpb24ueCwgdGhpcy5wb3NpdGlvbi55LCB0aGlzLnNpemUsIDAsIDIqTWF0aC5QSSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhbnZhc0N0eC5maWxsKCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnc3F1YXJlJzpcclxuICAgICAgICAgICAgICAgIHRoaXMuY2FudmFzQ3R4LmZpbGxSZWN0KHRoaXMucG9zaXRpb24ueC10aGlzLnNpemUsIHRoaXMucG9zaXRpb24ueS10aGlzLnNpemUsIHRoaXMuc2l6ZSoyLCB0aGlzLnNpemUqMik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jYW52YXNDdHguY2xvc2VQYXRoKCk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgVmVjdG9yIH0gZnJvbSBcInZlY3RvcjJkXCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0UmFuZG9tRGlyZWN0aW9uKCk6IFZlY3RvcntcclxuXHJcbiAgICByZXR1cm4obmV3IFZlY3RvcihNYXRoLnJhbmRvbSgpKjItMSwgTWF0aC5yYW5kb20oKSoyLTEpKVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaGV4VG9SZ2IoaGV4OiBzdHJpbmcpIHtcclxuICAgIHZhciByZXN1bHQgPSAvXiM/KFthLWZcXGRdezJ9KShbYS1mXFxkXXsyfSkoW2EtZlxcZF17Mn0pJC9pLmV4ZWMoaGV4KTtcclxuICAgIHJldHVybiByZXN1bHQgPyB7XHJcbiAgICAgIHI6IHBhcnNlSW50KHJlc3VsdFsxXSwgMTYpLFxyXG4gICAgICBnOiBwYXJzZUludChyZXN1bHRbMl0sIDE2KSxcclxuICAgICAgYjogcGFyc2VJbnQocmVzdWx0WzNdLCAxNilcclxuICAgIH0gOiBudWxsO1xyXG4gIH0iLCJpbXBvcnQgeyBWZWN0b3IgfSBmcm9tIFwidmVjdG9yMmRcIjtcblxuZXhwb3J0IGRlZmF1bHQgYWJzdHJhY3QgY2xhc3MgU2VnbWVudCB7XG4gICAgYWJzdHJhY3QgaXNDb2xsaWRhYmxlOiBib29sZWFuO1xuICAgIGFic3RyYWN0IGRyYXcoY29udGV4dDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELCBjb2xvcjogc3RyaW5nKTogdm9pZDtcbiAgICBhYnN0cmFjdCBnZXQgZW5kQW5nbGUoKTogbnVtYmVyO1xuICAgIGFic3RyYWN0IGdldCBlbmRQb2ludCgpOiBWZWN0b3I7XG4gICAgYWJzdHJhY3QgZ2V0Q29udGludWluZ1NlZ21lbnQodHJhbnNmb3JtOiBWZWN0b3IpOiBTZWdtZW50O1xufSIsImltcG9ydCB7IFZlY3RvciB9IGZyb20gXCJ2ZWN0b3IyZFwiO1xuaW1wb3J0IEFyY1NlZ21lbnQgZnJvbSBcIi4vQXJjU2VnbWVudFwiO1xuaW1wb3J0IExpbmVTZWdtZW50IGZyb20gXCIuL0xpbmVTZWdtZW50XCI7XG5pbXBvcnQgU2VnbWVudCBmcm9tIFwiLi9TZWdtZW50XCI7XG5pbXBvcnQgRW1pdHRlciBmcm9tIFwiLi9QYXJ0aWNsZVN5c3RlbS9FbWl0dGVyXCI7XG5pbXBvcnQgeyBoZXhUb1JnYiB9IGZyb20gXCIuL1BhcnRpY2xlU3lzdGVtL1BhcnRpY2xlU3lzdGVtVXRpbHNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU25ha2Uge1xuICAgIHB1YmxpYyBzZWdtZW50czogU2VnbWVudFtdID0gW107XG4gICAgcHJpdmF0ZSBjb2xvcjogc3RyaW5nO1xuICAgIHB1YmxpYyBpc0FsaXZlOiBib29sZWFuID0gdHJ1ZTtcbiAgICBwdWJsaWMgdHVyblJhZGl1czogbnVtYmVyID0gNjA7XG4gICAgcHJpdmF0ZSBlbWl0dGVyOiBFbWl0dGVyIHwgbnVsbCA9IG51bGw7XG4gICAgcHJpdmF0ZSBjYW52YXNDdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRDtcbiAgICBwcml2YXRlIGRpc3RhbmNlVG9DaGFuZ2VPZlN0YXRlOiBudW1iZXIgPSAxMDtcblxuXG4gICAgY29uc3RydWN0b3Ioc3RhcnRQb3M6IExpbmVTZWdtZW50LCBjb2xvcjogc3RyaW5nLCBjYW52YXNDdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCkge1xuICAgICAgICB0aGlzLmFkZFNlZ21lbnQoc3RhcnRQb3MpO1xuICAgICAgICB0aGlzLmNvbG9yID0gY29sb3I7XG4gICAgICAgIHRoaXMuY2FudmFzQ3R4ID0gY2FudmFzQ3R4XG4gICAgfVxuICAgIGFkZFNlZ21lbnQoc2VnbWVudDogU2VnbWVudCkge1xuICAgICAgICB0aGlzLnNlZ21lbnRzLnB1c2goc2VnbWVudCk7XG4gICAgfVxuXG4gICAgZ2V0IGhlYWQoKTogU2VnbWVudCB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlZ21lbnRzLnNsaWNlKC0xKS5wb3AoKTtcbiAgICB9XG5cbiAgICBkcmF3KCkge1xuICAgICAgICB0aGlzLmNhbnZhc0N0eC5saW5lV2lkdGggPSAxMjtcbiAgICAgICAgLy9UT0RPIGZpeCB0aGlzIHRvIGJlIGEgc2luZ2xlIHBhdGhcbiAgICAgICAgLy8gY29udGV4dC5iZWdpblBhdGgoKTtcblxuICAgICAgICB0aGlzLnNlZ21lbnRzLmZvckVhY2goKHNlZ21lbnQsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBzZWdtZW50LmRyYXcodGhpcy5jYW52YXNDdHgsIHRoaXMuY29sb3IpO1xuICAgICAgICAgICAgaWYgKHRoaXMuaGVhZCAhPSBzZWdtZW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNlZ21lbnQgaW5zdGFuY2VvZiBBcmNTZWdtZW50KSB7XG4gICAgICAgICAgICAgICAgLy8gc2VnbWVudC5kcmF3RGVidWcodGhpcy5jYW52YXNDdHgsICcjNjY2NjY2Jyk7XG4gICAgICAgICAgICAgICAgdGhpcy5jYW52YXNDdHguYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5jYW52YXNDdHguYXJjKHNlZ21lbnQuY2VudGVyLngsIHNlZ21lbnQuY2VudGVyLnksIHNlZ21lbnQucmFkaXVzLCBzZWdtZW50LmVuZEFuZ2xlLCBzZWdtZW50LmVuZEFuZ2xlLCBzZWdtZW50LmlzQ291bnRlckNsb2Nrd2lzZSgpKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNhbnZhc0N0eC5zdHJva2UoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNhbnZhc0N0eC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHNlZ21lbnQgaW5zdGFuY2VvZiBMaW5lU2VnbWVudCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2FudmFzQ3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgICAgIHRoaXMuY2FudmFzQ3R4Lm1vdmVUbyhzZWdtZW50LmVuZFBvaW50LngsIHNlZ21lbnQuZW5kUG9pbnQueSk7XG4gICAgICAgICAgICAgICAgdGhpcy5jYW52YXNDdHgubGluZVRvKHNlZ21lbnQuZW5kUG9pbnQueCwgc2VnbWVudC5lbmRQb2ludC55KTtcbiAgICAgICAgICAgICAgICB0aGlzLmNhbnZhc0N0eC5zdHJva2UoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNhbnZhc0N0eC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIC8vIGNvbnRleHQuc3Ryb2tlKCk7XG4gICAgfVxuXG4gICAgbW92ZShkaXN0YW5jZTogbnVtYmVyKSB7XG4gICAgICAgIC8vZG8gbm90IG1vdmUgaXMgZGVhZCwgc2ltcGxlXG4gICAgICAgIGlmICghdGhpcy5pc0FsaXZlKSByZXR1cm47XG5cbiAgICAgICAgdGhpcy5jaGVja1dhbGxzKCk7XG5cbiAgICAgICAgLy8gZG8gbm90IG1vdmUgaWYgc25ha2UgaGFzIG5vIHNlZ21lbnRzXG4gICAgICAgIGNvbnN0IGxhc3RTZWdtZW50ID0gdGhpcy5oZWFkO1xuICAgICAgICBpZiAoIWxhc3RTZWdtZW50KSByZXR1cm47XG5cblxuICAgICAgICBcblxuXG4gICAgICAgIC8vbW92ZSB0aGUgc25ha2UgdGhlIGNvcnJlY3QgYW1vdW50LCBkZXBlbmRpbmcgb24gdGhlIGhlYWQgc2VnbWVudFxuICAgICAgICBpZiAobGFzdFNlZ21lbnQgaW5zdGFuY2VvZiBMaW5lU2VnbWVudCkge1xuICAgICAgICAgICAgY29uc3QgZHggPSBkaXN0YW5jZSAqIE1hdGguY29zKGxhc3RTZWdtZW50LmVuZEFuZ2xlKTtcbiAgICAgICAgICAgIGNvbnN0IGR5ID0gZGlzdGFuY2UgKiBNYXRoLnNpbihsYXN0U2VnbWVudC5lbmRBbmdsZSk7XG5cbiAgICAgICAgICAgIGNvbnN0IG5ld0VuZCA9IG5ldyBWZWN0b3IobGFzdFNlZ21lbnQuZW5kUG9pbnQueCArIGR4LCBsYXN0U2VnbWVudC5lbmRQb2ludC55ICsgZHkpO1xuICAgICAgICAgICAgbGFzdFNlZ21lbnQuZW5kUG9pbnQgPSBuZXdFbmQ7XG5cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChsYXN0U2VnbWVudCBpbnN0YW5jZW9mIEFyY1NlZ21lbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IGFuZ2xlRXh0ZW5zaW9uID0gZGlzdGFuY2UgLyBsYXN0U2VnbWVudC5yYWRpdXM7XG5cbiAgICAgICAgICAgIGxhc3RTZWdtZW50LmVuZEFuZ2xlID0gbGFzdFNlZ21lbnQuaXNDb3VudGVyQ2xvY2t3aXNlKCkgPyBsYXN0U2VnbWVudC5lbmRBbmdsZSAtIGFuZ2xlRXh0ZW5zaW9uIDogbGFzdFNlZ21lbnQuZW5kQW5nbGUgKyBhbmdsZUV4dGVuc2lvbjtcblxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvL2FkZCBuZXcgc2VnbWVudCBsYXN0c2VnbWVudC5jcmVhdGVmbGlwcGVkc3RhdGVcbiAgICAgICAgaWYgKGxhc3RTZWdtZW50LmlzQ29sbGlkYWJsZSAmJiB0aGlzLmRpc3RhbmNlVG9DaGFuZ2VPZlN0YXRlIDwgMCkge1xuXG4gICAgICAgICAgICB0aGlzLmRpc3RhbmNlVG9DaGFuZ2VPZlN0YXRlID0gTWF0aC5yYW5kb20oKSAqIDgwICsgMzAgLy8gNDAtOTBcblxuICAgICAgICAgICAgaWYgKGxhc3RTZWdtZW50IGluc3RhbmNlb2YgTGluZVNlZ21lbnQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZFNlZ21lbnQobmV3IExpbmVTZWdtZW50KGxhc3RTZWdtZW50LmVuZFBvaW50LCBuZXcgVmVjdG9yKGxhc3RTZWdtZW50LmVuZFBvaW50LngsIGxhc3RTZWdtZW50LmVuZFBvaW50LnkpLCBmYWxzZSwgbGFzdFNlZ21lbnQuZW5kQW5nbGUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGxhc3RTZWdtZW50IGluc3RhbmNlb2YgQXJjU2VnbWVudCkge1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkU2VnbWVudChuZXcgQXJjU2VnbWVudChsYXN0U2VnbWVudC5jZW50ZXIsIGxhc3RTZWdtZW50LnJhZGl1cywgbGFzdFNlZ21lbnQuZW5kQW5nbGUsIGxhc3RTZWdtZW50LmVuZEFuZ2xlLCBsYXN0U2VnbWVudC5pc0NvdW50ZXJDbG9ja3dpc2UoKSwgZmFsc2UpKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFsYXN0U2VnbWVudC5pc0NvbGxpZGFibGUgJiYgdGhpcy5kaXN0YW5jZVRvQ2hhbmdlT2ZTdGF0ZSA8IDApIHtcblxuICAgICAgICAgICAgdGhpcy5kaXN0YW5jZVRvQ2hhbmdlT2ZTdGF0ZSA9IE1hdGgucmFuZG9tKCkgKiA1MDAgKyA4MCAvLyA4MC0zMjBcblxuICAgICAgICAgICAgaWYgKGxhc3RTZWdtZW50IGluc3RhbmNlb2YgTGluZVNlZ21lbnQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZFNlZ21lbnQobmV3IExpbmVTZWdtZW50KGxhc3RTZWdtZW50LmVuZFBvaW50LCBuZXcgVmVjdG9yKGxhc3RTZWdtZW50LmVuZFBvaW50LngsIGxhc3RTZWdtZW50LmVuZFBvaW50LnkpLCB0cnVlLCBsYXN0U2VnbWVudC5lbmRBbmdsZSkpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChsYXN0U2VnbWVudCBpbnN0YW5jZW9mIEFyY1NlZ21lbnQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZFNlZ21lbnQobmV3IEFyY1NlZ21lbnQobGFzdFNlZ21lbnQuY2VudGVyLCBsYXN0U2VnbWVudC5yYWRpdXMsIGxhc3RTZWdtZW50LmVuZEFuZ2xlLCBsYXN0U2VnbWVudC5lbmRBbmdsZSwgbGFzdFNlZ21lbnQuaXNDb3VudGVyQ2xvY2t3aXNlKCksIHRydWUpKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICAvL3VwZGF0ZSB0aGUgZGlzdGFuY2UgdHJhdmVsbGVkXG4gICAgICAgIHRoaXMuZGlzdGFuY2VUb0NoYW5nZU9mU3RhdGUgLT0gZGlzdGFuY2U7XG4gICAgfVxuXG5raWxsKCkge1xuICAgIGNvbnNvbGUubG9nKFwiU05BS0UgREVBRFwiKVxuICAgIHRoaXMuaXNBbGl2ZSA9IGZhbHNlO1xuICAgIHRoaXMuZW1pdHRlciA9IG5ldyBFbWl0dGVyKHRoaXMuaGVhZC5lbmRQb2ludCwgMSwgNywgNCwgJ2NpcmNsZScsIHsgLi4uaGV4VG9SZ2IodGhpcy5jb2xvciksIGE6IDEgfSwgdGhpcy5jYW52YXNDdHgsIHRydWUsIHRydWUsIDcwLCA0KTtcbn1cblxudXBkYXRlRW1pdHRlcihkdDogbnVtYmVyKSB7XG4gICAgaWYgKHRoaXMuZW1pdHRlcikge1xuICAgICAgICB0aGlzLmVtaXR0ZXIudGljayhkdCk7XG4gICAgICAgIHRoaXMuZW1pdHRlci5kcmF3KCk7XG4gICAgfVxufVxuXG5jaGVja1dhbGxzKCkge1xuICAgIGNvbnN0IGxhc3RTZWdtZW50ID0gdGhpcy5oZWFkO1xuICAgIGlmIChsYXN0U2VnbWVudC5lbmRQb2ludC54IDwgMCkge1xuICAgICAgICB0aGlzLmFkZFNlZ21lbnQobGFzdFNlZ21lbnQuZ2V0Q29udGludWluZ1NlZ21lbnQobmV3IFZlY3Rvcih0aGlzLmNhbnZhc0N0eC5jYW52YXMud2lkdGgsIDApKSk7XG4gICAgfSBcbiAgICBlbHNlIGlmIChsYXN0U2VnbWVudC5lbmRQb2ludC54ID4gdGhpcy5jYW52YXNDdHguY2FudmFzLndpZHRoKSB7XG4gICAgICAgIHRoaXMuYWRkU2VnbWVudChsYXN0U2VnbWVudC5nZXRDb250aW51aW5nU2VnbWVudChuZXcgVmVjdG9yKC10aGlzLmNhbnZhc0N0eC5jYW52YXMud2lkdGgsIDApKSk7XG4gICAgfVxuICAgIFxuICAgIGlmIChsYXN0U2VnbWVudC5lbmRQb2ludC55IDwgMCkge1xuICAgICAgICB0aGlzLmFkZFNlZ21lbnQobGFzdFNlZ21lbnQuZ2V0Q29udGludWluZ1NlZ21lbnQobmV3IFZlY3RvcigwLCB0aGlzLmNhbnZhc0N0eC5jYW52YXMuaGVpZ2h0KSkpO1xuICAgIH0gXG4gICAgZWxzZSBpZiAobGFzdFNlZ21lbnQuZW5kUG9pbnQueSA+IHRoaXMuY2FudmFzQ3R4LmNhbnZhcy5oZWlnaHQpIHtcbiAgICAgICAgdGhpcy5hZGRTZWdtZW50KGxhc3RTZWdtZW50LmdldENvbnRpbnVpbmdTZWdtZW50KG5ldyBWZWN0b3IoMCwgLXRoaXMuY2FudmFzQ3R4LmNhbnZhcy5oZWlnaHQpKSk7XG4gICAgfVxuICAgIFxufVxuXG4gICAgXG59IiwiZXhwb3J0IGNsYXNzIFBsYXllciB7XHJcbiAgICBwdWJsaWMgdXNlcm5hbWU6IHN0cmluZztcclxuICAgIHB1YmxpYyBpc1JlYWR5OiBib29sZWFuO1xyXG4gICAgcHVibGljIGNvbG9yOiBzdHJpbmc7XHJcbiAgICBcclxuICAgIGNvbnN0cnVjdG9yKHVzZXJuYW1lOiBzdHJpbmcsIGlzUmVhZHk6IGJvb2xlYW4gPSBmYWxzZSkge1xyXG4gICAgICAgIHRoaXMudXNlcm5hbWUgPSB1c2VybmFtZTtcclxuICAgICAgICB0aGlzLmlzUmVhZHkgPSBpc1JlYWR5O1xyXG4gICAgICAgIHRoaXMuY29sb3IgPSBcIiMwMDAwMDBcIi5yZXBsYWNlKC8wL2csZnVuY3Rpb24oKXtyZXR1cm4gKH5+KE1hdGgucmFuZG9tKCkqMTYpKS50b1N0cmluZygxNik7fSk7XHJcbiAgICB9XHJcblxyXG4gICAgdG9KU09OKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICB1c2VybmFtZTogdGhpcy51c2VybmFtZSxcclxuICAgICAgICAgIGlzUmVhZHk6IHRoaXMuaXNSZWFkeSxcclxuICAgICAgICAgIGNvbG9yOiB0aGlzLmNvbG9yXHJcbiAgICAgICAgfTtcclxuICAgICAgfVxyXG5cclxufSIsImltcG9ydCB7IFBsYXllciB9IGZyb20gXCIuL1BsYXllclwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFJvb20ge1xyXG4gICAgcHJpdmF0ZSBwbGF5ZXJzOiBQbGF5ZXJbXSA9IFtdO1xyXG4gICAgcHJpdmF0ZSBtYXhTaXplOiBudW1iZXI7XHJcbiAgICBwcml2YXRlIGhvc3Q6IFBsYXllcjtcclxuICAgIHByaXZhdGUgY29kZTogc3RyaW5nO1xyXG5cclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihjb2RlOiBzdHJpbmcsIGhvc3Q6IFBsYXllciwgcGxheWVycz86IFBsYXllcltdLCBtYXhTaXplOiBudW1iZXIgPSA1KSB7XHJcbiAgICAgICAgdGhpcy5jb2RlID0gY29kZTtcclxuICAgICAgICB0aGlzLmhvc3QgPSBob3N0O1xyXG4gICAgICAgIHRoaXMubWF4U2l6ZSA9IG1heFNpemU7XHJcblxyXG4gICAgICAgIGlmIChwbGF5ZXJzICE9IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLnBsYXllcnMgPSBwbGF5ZXJzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICB0aGlzLmFkZFBsYXllcihob3N0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhZGRQbGF5ZXIocGxheWVyOiBQbGF5ZXIpOiBib29sZWFuIHtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMucGxheWVycy5sZW5ndGggPj0gdGhpcy5tYXhTaXplKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMucGxheWVycy5wdXNoKHBsYXllcilcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0Q29kZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jb2RlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRQbGF5ZXJzKCk6IFBsYXllcltdIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5wbGF5ZXJzO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRIb3N0KCk6IFBsYXllciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaG9zdDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0SG9zdChwbGF5ZXI6IFBsYXllcikge1xyXG4gICAgICAgIHRoaXMuaG9zdCA9IHBsYXllcjtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0UGxheWVycyhwbGF5ZXJzOiBQbGF5ZXJbXSl7XHJcbiAgICAgICAgdGhpcy5wbGF5ZXJzID0gcGxheWVycztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0TWF4U2l6ZShuZXdTaXplOiBudW1iZXIpe1xyXG4gICAgICAgIHRoaXMubWF4U2l6ZSA9IG5ld1NpemU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldE1heFNpemUoKXtcclxuICAgICAgICByZXR1cm4gdGhpcy5tYXhTaXplO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgc2hvd0Vycm9yQW5pbWF0aW9uLCBzaG93Um9vbVZpZXcsIHVwZGF0ZVJvb21MaXN0IH0gZnJvbSBcIi4uL01lbnVNYW5hZ2VyL2xvZ2luXCI7XHJcbmltcG9ydCB7IFBsYXllciB9IGZyb20gXCIuLi9WaWV3TW9kZWxzL1BsYXllclwiO1xyXG5cclxubGV0IHNvY2tldDogV2ViU29ja2V0O1xyXG5cclxuZnVuY3Rpb24gaW5pdFdlYlNvY2tldCgpIHtcclxuICAgIHNvY2tldCA9IG5ldyBXZWJTb2NrZXQoYHdzOi8vJHt3aW5kb3cubG9jYXRpb24uaG9zdG5hbWV9OjgwODBgKTtcclxuICAgIFxyXG4gICAgc29ja2V0Lm9ub3BlbiA9ICgpID0+IHtcclxuICAgICAgICBjb25zb2xlLmxvZygnV2ViU29ja2V0IGNvbm5lY3Rpb24gZXN0YWJsaXNoZWQnKTtcclxuICAgIH07XHJcblxyXG4gICAgc29ja2V0Lm9ubWVzc2FnZSA9IChldmVudCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGRhdGEgPSBKU09OLnBhcnNlKGV2ZW50LmRhdGEpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdNZXNzYWdlIGZyb20gc2VydmVyOicsIGRhdGEpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHN3aXRjaCAoZGF0YS50eXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ0pPSU5FRF9ST09NJzpcclxuICAgICAgICAgICAgICAgIHNob3dSb29tVmlldyhldmVudC5kYXRhKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdST09NX0RPRVNfTk9UX0VYSVNUJzpcclxuICAgICAgICAgICAgICAgIHNob3dFcnJvckFuaW1hdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ1JPT01fREFUQSc6XHJcbiAgICAgICAgICAgICAgICB1cGRhdGVSb29tTGlzdChldmVudC5kYXRhKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdHQU1FUExBWSc6XHJcbiAgICAgICAgICAgICAgICAvLyB1cGRhdGVHYW1lQ2FudmFzKCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnRVJST1InOlxyXG4gICAgICAgICAgICAgICAgYWxlcnQoYEVycm9yOiAke2RhdGEubWVzc2FnZX1gKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBcclxuICAgIHNvY2tldC5vbmNsb3NlID0gKCkgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdXZWJTb2NrZXQgY29ubmVjdGlvbiBjbG9zZWQnKTtcclxuICAgIH07XHJcbiAgICBcclxuICAgIHNvY2tldC5vbmVycm9yID0gKGVycm9yKSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignV2ViU29ja2V0IGVycm9yOicsIGVycm9yKTtcclxuICAgIH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVSb29tKHVzZXJuYW1lOiBzdHJpbmcpIHtcclxuICAgIGlmIChzb2NrZXQgJiYgc29ja2V0LnJlYWR5U3RhdGUgPT09IFdlYlNvY2tldC5PUEVOKSB7XHJcbiAgICAgICAgc29ja2V0LnNlbmQoSlNPTi5zdHJpbmdpZnkoeyB0eXBlOiAnQ1JFQVRFX1JPT00nLCB1c2VybmFtZTogdXNlcm5hbWUgfSkpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKCdXZWJTb2NrZXQgY29ubmVjdGlvbiBpcyBub3Qgb3BlbicpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gam9pblJvb20ocm9vbUNvZGU6IHN0cmluZywgdXNlcm5hbWU6IHN0cmluZykge1xyXG4gICAgaWYgKHNvY2tldCAmJiBzb2NrZXQucmVhZHlTdGF0ZSA9PT0gV2ViU29ja2V0Lk9QRU4pIHtcclxuICAgICAgICBzb2NrZXQuc2VuZChKU09OLnN0cmluZ2lmeSh7IHR5cGU6ICdKT0lOX1JPT00nLCByb29tQ29kZTogcm9vbUNvZGUsIHVzZXJuYW1lOiB1c2VybmFtZSB9KSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ1dlYlNvY2tldCBjb25uZWN0aW9uIGlzIG5vdCBvcGVuJyk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXRQbGF5ZXJEYXRhKHBsYXllcjogUGxheWVyLCByb29tQ29kZTogc3RyaW5nKSB7XHJcbiAgICBpZiAoc29ja2V0ICYmIHNvY2tldC5yZWFkeVN0YXRlID09PSBXZWJTb2NrZXQuT1BFTikge1xyXG4gICAgICAgIHNvY2tldC5zZW5kKEpTT04uc3RyaW5naWZ5KHsgdHlwZTogJ1BMQVlFUl9EQVRBJywgcGxheWVyOiBwbGF5ZXIsIHJvb21Db2RlOiByb29tQ29kZX0pKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignV2ViU29ja2V0IGNvbm5lY3Rpb24gaXMgbm90IG9wZW4nKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNlbmRLZXlFdmVudFRvU2VydmVyKGtleTogc3RyaW5nLCBwcmVzc2VkOiBib29sZWFuKXtcclxuICAgIGlmIChzb2NrZXQgJiYgc29ja2V0LnJlYWR5U3RhdGUgPT09IFdlYlNvY2tldC5PUEVOKSB7XHJcbiAgICAgICAgc29ja2V0LnNlbmQoSlNPTi5zdHJpbmdpZnkoeyB0eXBlOiAnS0VZX0VWRU5UJywga2V5OiBrZXksIHByZXNzZWQ6IHByZXNzZWQgfSkpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKCdXZWJTb2NrZXQgY29ubmVjdGlvbiBpcyBub3Qgb3BlbicpO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuaW5pdFdlYlNvY2tldCgpO1xyXG4iLCJpbXBvcnQgeyBWZWN0b3IgfSBmcm9tIFwidmVjdG9yMmRcIjtcbmltcG9ydCBBcmNTZWdtZW50IGZyb20gXCIuL0FyY1NlZ21lbnRcIjtcbmltcG9ydCB7IGRyYXdHcmlkIH0gZnJvbSBcIi4vRHJhd2VyXCI7XG5pbXBvcnQgSW5wdXRNYW5hZ2VyIGZyb20gXCIuL0lucHV0TWFuYWdlclwiO1xuaW1wb3J0IExpbmVTZWdtZW50IGZyb20gXCIuL0xpbmVTZWdtZW50XCI7XG5pbXBvcnQgU25ha2UgZnJvbSBcIi4vU25ha2VcIjtcbmltcG9ydCBFbWl0dGVyIGZyb20gXCIuL1BhcnRpY2xlU3lzdGVtL0VtaXR0ZXJcIjtcbmltcG9ydCBDb2xsaXNpb25IYW5kbGVyIGZyb20gXCIuL0NvbGxpc2lvbkhhbmRsZXJcIjtcblxudmFyIGZwc0NvdW50ZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbmZwc0NvdW50ZXIuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuZnBzQ291bnRlci5zdHlsZS50b3AgPSAnMTBweCc7XG5mcHNDb3VudGVyLnN0eWxlLmxlZnQgPSAnMTBweCc7XG5mcHNDb3VudGVyLnN0eWxlLmNvbG9yID0gJ2JsYWNrJztcbmRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZnBzQ291bnRlcik7XG5leHBvcnQgdmFyIGZwcyA9IDYwO1xuXG5leHBvcnQgdmFyIGdhbWVDYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZ2FtZS1jYW52YXMnKSAgYXMgSFRNTENhbnZhc0VsZW1lbnQ7XG5leHBvcnQgdmFyIGdhbWVDYW52YXNDdHggPSBnYW1lQ2FudmFzLmdldENvbnRleHQoJzJkJykhO1xuXG5leHBvcnQgdmFyIGJhY2tncm91bmRDYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYmFja2dyb3VuZC1jYW52YXMnKSAgYXMgSFRNTENhbnZhc0VsZW1lbnQ7XG5leHBvcnQgdmFyIGJhY2tncm91bmRDYW52YXNDdHggPSBiYWNrZ3JvdW5kQ2FudmFzLmdldENvbnRleHQoJzJkJykhO1xuXG5iYWNrZ3JvdW5kQ2FudmFzIS53aWR0aCA9IGJhY2tncm91bmRDYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg7XG5iYWNrZ3JvdW5kQ2FudmFzIS5oZWlnaHQgPSBiYWNrZ3JvdW5kQ2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodDtcbmdhbWVDYW52YXMhLndpZHRoID0gZ2FtZUNhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aDtcbmdhbWVDYW52YXMhLmhlaWdodCA9IGdhbWVDYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xuZXhwb3J0IHZhciBncmlkU2l6ZSA9IDYwO1xuXG5mdW5jdGlvbiB1cGRhdGVDYW52YXNTaXplKCkge1xuICAgIGdhbWVDYW52YXMud2lkdGggPSBnYW1lQ2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoO1xuICAgIGdhbWVDYW52YXMuaGVpZ2h0ID0gZ2FtZUNhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQ7XG4gICAgYmFja2dyb3VuZENhbnZhcy53aWR0aCA9IGJhY2tncm91bmRDYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg7XG4gICAgYmFja2dyb3VuZENhbnZhcy5oZWlnaHQgPSBiYWNrZ3JvdW5kQ2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodDtcbiAgICBkcmF3R3JpZCgpO1xuICB9XG5cbmZ1bmN0aW9uIGFuaW1hdGUoKSB7XG4gICAgdmFyIG11bHQgPSBmcHMgLyA2MDtcbiAgICBmcmFtZUNvdW50Kys7XG4gICAgaWYgKGZyYW1lQ291bnQgJSAxMCA9PT0gMCkge1xuICAgICAgICBmcHMgPSBjYWxjdWxhdGVGUFMoKTtcbiAgICAgICAgZnBzQ291bnRlci5pbm5lclRleHQgPSBgRlBTOiAke2Zwc31gO1xuICAgIH1cbiAgICBnYW1lQ2FudmFzQ3R4LmNsZWFyUmVjdCgwLCAwLCBnYW1lQ2FudmFzLndpZHRoLCBnYW1lQ2FudmFzLmhlaWdodCk7XG5cbiAgICBzbmFrZXMuZm9yRWFjaChzbmFrZSA9PiB7XG4gICAgICAgIHNuYWtlLmRyYXcoKTtcbiAgICAgICAgaWYocGVyZm9ybWFuY2Uubm93KCkgPiAyMDAwKXtcbiAgICAgICAgICAgIHNuYWtlLm1vdmUoKHBlcmZvcm1hbmNlLm5vdygpLzEwIC0gbGFzdFRpbWUpLzIpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBzbmFrZS51cGRhdGVFbWl0dGVyKChwZXJmb3JtYW5jZS5ub3coKS8xMCAtIGxhc3RUaW1lKS8xMCk7XG4gICAgfSk7XG4gICAgY29sbGlzaW9uSGFuZGxlci5jaGVja0NvbGxpc2lvbnMoKTtcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoYW5pbWF0ZSk7XG4gICAgXG4gICAgLy8gZW1pdHRlci50aWNrKDAuMyk7XG4gICAgLy8gZW1pdHRlci5kcmF3KCk7XG59XG52YXIgZnJhbWVDb3VudCA9IDA7XG52YXIgbGFzdFRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKSAvIDEwO1xuZnVuY3Rpb24gY2FsY3VsYXRlRlBTKCkge1xuICAgIHZhciBjdXJyZW50VGltZSA9IHBlcmZvcm1hbmNlLm5vdygpIC8gMTA7XG4gICAgdmFyIHRpbWVEaWZmID0gY3VycmVudFRpbWUgLSBsYXN0VGltZTtcbiAgICB2YXIgZnBzID0gTWF0aC5yb3VuZCgxMDAwIC8gdGltZURpZmYpO1xuICAgIGxhc3RUaW1lID0gY3VycmVudFRpbWU7XG4gICAgcmV0dXJuIGZwcztcbn1cblxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgdXBkYXRlQ2FudmFzU2l6ZSk7XG5kcmF3R3JpZCgpO1xuY29uc3Qgc25ha2VzOiBTbmFrZVtdID0gW11cbmNvbnN0IGlucHV0TWFuYWdlcnM6IElucHV0TWFuYWdlcltdID0gW11cbmNvbnN0IGNvbG9yczogc3RyaW5nW10gPSBbXCIjZWY4ODg4XCIsIFwiI2ZmMDAwMFwiLCBcIiMwMGFhYmJcIiwgXCIjMDAwMGVlXCJdXG5jb25zdCBrZXltYXBzOiBzdHJpbmdbXVtdID1bWydBJywnRCddLFsnRicsJ0gnXSxbJ0onLCdMJ10sIFsnOCcsJzAnXV0gXG5mb3IgKGxldCBpID0gMDsgaSA8IDI7IGkrKyl7XG4gICAgbGV0IHN0YXJ0UG9zID0gbmV3IFZlY3RvcihNYXRoLnJhbmRvbSgpKiAxODAwLCBNYXRoLnJhbmRvbSgpKjkwMCk7XG4gICAgc25ha2VzLnB1c2gobmV3IFNuYWtlKG5ldyBMaW5lU2VnbWVudChzdGFydFBvcywgc3RhcnRQb3MuYWRkKG5ldyBWZWN0b3IoMTAsMTApKSwgdHJ1ZSAsTWF0aC5yYW5kb20oKSogMiogTWF0aC5QSSksIGNvbG9yc1tpXSwgZ2FtZUNhbnZhc0N0eCkpO1xuICAgIGlucHV0TWFuYWdlcnMucHVzaChuZXcgSW5wdXRNYW5hZ2VyKHNuYWtlc1tpXSwga2V5bWFwc1tpXVswXSwga2V5bWFwc1tpXVsxXSkpXG59XG5cbmNvbnN0IGNvbGxpc2lvbkhhbmRsZXIgPSBuZXcgQ29sbGlzaW9uSGFuZGxlcihzbmFrZXMpXG4vLyBjb25zdCBlbWl0dGVyID0gbmV3IEVtaXR0ZXIobmV3IFZlY3RvcihnYW1lQ2FudmFzLndpZHRoLzIsIGdhbWVDYW52YXMuaGVpZ2h0LzIpLCAyLCAxMCwgNSwgJ2NpcmNsZScsIHtyOjI1NSwgZzowLCBiOjI1NSwgYTowLjV9LCBnYW1lQ2FudmFzQ3R4LCB0cnVlLCB0cnVlLCAyMDApXG5cbnJlcXVlc3RBbmltYXRpb25GcmFtZShhbmltYXRlKTsiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKlxuICogVGhlc2UgdmFsdWVzIGFyZSB1c2VkIGJ5IHRoZSBgQWJzdHJhY3RWZWN0b3Iucm91bmRgIG1ldGhvZCB0byBpbmNyZWFzZVxuICogcGVyZm9ybWFuY2UgdnMuIHVzaW5nICBOdW1iZXIudG9GaXhlZC5cbiAqL1xudmFyIHByZWNpc2lvbiA9IFtcbiAgICAxLFxuICAgIDEwLFxuICAgIDEwMCxcbiAgICAxMDAwLFxuICAgIDEwMDAwLFxuICAgIDEwMDAwMCxcbiAgICAxMDAwMDAwLFxuICAgIDEwMDAwMDAwLFxuICAgIDEwMDAwMDAwMCxcbiAgICAxMDAwMDAwMDAwLFxuICAgIDEwMDAwMDAwMDAwXG5dO1xuLyoqXG4gKiBUaGUgY2xhc3MgdGhhdCBhbGwgb3RoZXIgdmVjdG9yIHJlcHJlc2VudGF0aW9ucyBhcmUgZGVyaXZlZCBmcm9tLlxuICpcbiAqIENvbnRhaW5zIHRoZSBjb3JlIGltcGxlbWVudGF0aW9uIGZvciBhbGwgbWV0aG9kcyB0aGF0IHdpbGwgYmUgZXhwb3NlZCBieVxuICogdmVjdG9yIGluc3RhbmNlcy5cbiAqXG4gKiBFeGFtcGxlIG9mIGNyZWF0aW5nIGEgY3VzdG9tIGltcGxlbWVudGF0aW9uOlxuICpcbiAqIGBgYHRzXG4gKiBpbXBvcnQgeyBBYnN0cmFjdFZlY3RvciB9IGZyb20gXCIuL0Fic3RyYWN0VmVjdG9yXCJcbiAqXG4gKiBleHBvcnQgY2xhc3MgTXlDdXN0b21WZWN0b3IgZXh0ZW5kcyBBYnN0cmFjdFZlY3RvciB7XG4gKiAgY29uc3RydWN0b3IgKHg6IG51bWJlciwgeTogbnVtYmVyKSB7XG4gKiAgICBzdXBlcihDdXN0b21WZWN0b3JUeXBlKVxuICogIH1cbiAqIH1cbiAqIGBgYFxuICovXG52YXIgQWJzdHJhY3RWZWN0b3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQWJzdHJhY3RWZWN0b3IoY3Rvcikge1xuICAgICAgICB0aGlzLmN0b3IgPSBjdG9yO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXQgYm90aCB4IGFuZCB5IGF4aXMgdmFsdWVcbiAgICAgKiBAcGFyYW0geCAgIE5ldyB4IHZhbFxuICAgICAqIEBwYXJhbSB5ICAgTmV3IHkgdmFsXG4gICAgICovXG4gICAgQWJzdHJhY3RWZWN0b3IucHJvdG90eXBlLnNldEF4ZXMgPSBmdW5jdGlvbiAoeCwgeSkge1xuICAgICAgICB0aGlzLnggPSB4O1xuICAgICAgICB0aGlzLnkgPSB5O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEdldHRlciBmb3IgeCB0aGUgYXhpcyB2YWx1ZVxuICAgICAqL1xuICAgIEFic3RyYWN0VmVjdG9yLnByb3RvdHlwZS5nZXRYID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy54O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogU2V0dGVyIGZvciB4IGF4aXMgdmFsdWVcbiAgICAgKi9cbiAgICBBYnN0cmFjdFZlY3Rvci5wcm90b3R5cGUuc2V0WCA9IGZ1bmN0aW9uICh4KSB7XG4gICAgICAgIHRoaXMueCA9IHg7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogR2V0dGVyIGZvciB5IGF4aXMgdmFsdWVcbiAgICAgKi9cbiAgICBBYnN0cmFjdFZlY3Rvci5wcm90b3R5cGUuZ2V0WSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMueTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNldHRlciBmb3IgeSBheGlzLlxuICAgICAqL1xuICAgIEFic3RyYWN0VmVjdG9yLnByb3RvdHlwZS5zZXRZID0gZnVuY3Rpb24gKHkpIHtcbiAgICAgICAgdGhpcy55ID0geTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm4gdGhlIHZlY3RvciBhcyBhIGZvcm1hdHRlZCBzdHJpbmcsIGUuZyBcIigwLCA0KVwiXG4gICAgICovXG4gICAgQWJzdHJhY3RWZWN0b3IucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKHJvdW5kKSB7XG4gICAgICAgIGlmIChyb3VuZCA9PT0gdm9pZCAwKSB7IHJvdW5kID0gZmFsc2U7IH1cbiAgICAgICAgaWYgKHJvdW5kKSB7XG4gICAgICAgICAgICByZXR1cm4gXCIoXCIgKyBNYXRoLnJvdW5kKHRoaXMueCkgKyBcIiwgXCIgKyBNYXRoLnJvdW5kKHRoaXMueSkgKyBcIilcIjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gXCIoXCIgKyB0aGlzLnggKyBcIiwgXCIgKyB0aGlzLnkgKyBcIilcIjtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybiBhbiBBcnJheSBjb250YWluaW5nIHRoZSB2ZWN0b3IgYXhlcywgZS5nIFswLCA0XVxuICAgICAqL1xuICAgIEFic3RyYWN0VmVjdG9yLnByb3RvdHlwZS50b0FycmF5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gW3RoaXMueCwgdGhpcy55XTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybiBhbiBPYmplY3QgY29udGFpbmluZyB0aGUgdmVjdG9yIGF4ZXMsIGUuZyB7IHg6IDAsIHk6IDQgfVxuICAgICAqL1xuICAgIEFic3RyYWN0VmVjdG9yLnByb3RvdHlwZS50b09iamVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHg6IHRoaXMueCxcbiAgICAgICAgICAgIHk6IHRoaXMueVxuICAgICAgICB9O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQWRkIHRoZSBwcm92aWRlZCB2ZWN0b3IgdG8gdGhpcyBvbmVcbiAgICAgKi9cbiAgICBBYnN0cmFjdFZlY3Rvci5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKHZlYykge1xuICAgICAgICB0aGlzLnggKz0gdmVjLng7XG4gICAgICAgIHRoaXMueSArPSB2ZWMueTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTdWJ0cmFjdCB0aGUgcHJvdmlkZWQgdmVjdG9yIGZyb20gdGhpcyBvbmVcbiAgICAgKi9cbiAgICBBYnN0cmFjdFZlY3Rvci5wcm90b3R5cGUuc3VidHJhY3QgPSBmdW5jdGlvbiAodmVjKSB7XG4gICAgICAgIHRoaXMueCAtPSB2ZWMueDtcbiAgICAgICAgdGhpcy55IC09IHZlYy55O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIHRoZSBwcm92aWRlZCB2ZWN0b3IgZXF1YWwgdG8gdGhpcyBvbmVcbiAgICAgKi9cbiAgICBBYnN0cmFjdFZlY3Rvci5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gKHZlYykge1xuICAgICAgICByZXR1cm4gdmVjLnggPT09IHRoaXMueCAmJiB2ZWMueSA9PT0gdGhpcy55O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogTXVsdGlwbHkgdGhpcyB2ZWN0b3IgYnkgdGhlIHByb3ZpZGVkIHZlY3RvclxuICAgICAqL1xuICAgIEFic3RyYWN0VmVjdG9yLnByb3RvdHlwZS5tdWx0aXBseUJ5VmVjdG9yID0gZnVuY3Rpb24gKHZlYykge1xuICAgICAgICB0aGlzLnggKj0gdmVjLng7XG4gICAgICAgIHRoaXMueSAqPSB2ZWMueTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBNdWx0aXBseSB0aGlzIHZlY3RvciBieSB0aGUgcHJvdmlkZWQgdmVjdG9yXG4gICAgICovXG4gICAgQWJzdHJhY3RWZWN0b3IucHJvdG90eXBlLm11bFYgPSBmdW5jdGlvbiAodmVjKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm11bHRpcGx5QnlWZWN0b3IodmVjKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIERpdmlkZSB0aGlzIHZlY3RvciBieSB0aGUgcHJvdmlkZWQgdmVjdG9yXG4gICAgICovXG4gICAgQWJzdHJhY3RWZWN0b3IucHJvdG90eXBlLmRpdmlkZUJ5VmVjdG9yID0gZnVuY3Rpb24gKHZlYykge1xuICAgICAgICB0aGlzLnggLz0gdmVjLng7XG4gICAgICAgIHRoaXMueSAvPSB2ZWMueTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBEaXZpZGUgdGhpcyB2ZWN0b3IgYnkgdGhlIHByb3ZpZGVkIHZlY3RvclxuICAgICAqL1xuICAgIEFic3RyYWN0VmVjdG9yLnByb3RvdHlwZS5kaXZWID0gZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGl2aWRlQnlWZWN0b3Iodik7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBNdWx0aXBseSB0aGlzIHZlY3RvciBieSB0aGUgcHJvdmlkZWQgbnVtYmVyXG4gICAgICovXG4gICAgQWJzdHJhY3RWZWN0b3IucHJvdG90eXBlLm11bHRpcGx5QnlTY2FsYXIgPSBmdW5jdGlvbiAobikge1xuICAgICAgICB0aGlzLnggKj0gbjtcbiAgICAgICAgdGhpcy55ICo9IG47XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogTXVsdGlwbHkgdGhpcyB2ZWN0b3IgYnkgdGhlIHByb3ZpZGVkIG51bWJlclxuICAgICAqL1xuICAgIEFic3RyYWN0VmVjdG9yLnByb3RvdHlwZS5tdWxTID0gZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubXVsdGlwbHlCeVNjYWxhcihuKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIERpdml2ZSB0aGlzIHZlY3RvciBieSB0aGUgcHJvdmlkZWQgbnVtYmVyXG4gICAgICovXG4gICAgQWJzdHJhY3RWZWN0b3IucHJvdG90eXBlLmRpdmlkZUJ5U2NhbGFyID0gZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgdGhpcy54IC89IG47XG4gICAgICAgIHRoaXMueSAvPSBuO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIERpdml2ZSB0aGlzIHZlY3RvciBieSB0aGUgcHJvdmlkZWQgbnVtYmVyXG4gICAgICovXG4gICAgQWJzdHJhY3RWZWN0b3IucHJvdG90eXBlLmRpdlMgPSBmdW5jdGlvbiAobikge1xuICAgICAgICByZXR1cm4gdGhpcy5kaXZpZGVCeVNjYWxhcihuKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIE5vcm1hbGlzZSB0aGlzIHZlY3RvclxuICAgICAqL1xuICAgIEFic3RyYWN0VmVjdG9yLnByb3RvdHlwZS5ub3JtYWxpc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpdmlkZUJ5U2NhbGFyKHRoaXMubWFnbml0dWRlKCkpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogRm9yIEFtZXJpY2FuIHNwZWxsaW5nLiBTYW1lIGFzIHVuaXQvbm9ybWFsaXNlIGZ1bmN0aW9uXG4gICAgICovXG4gICAgQWJzdHJhY3RWZWN0b3IucHJvdG90eXBlLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubm9ybWFsaXNlKCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBUaGUgc2FtZSBhcyBub3JtYWxpc2UgYW5kIG5vcm1hbGl6ZVxuICAgICAqL1xuICAgIEFic3RyYWN0VmVjdG9yLnByb3RvdHlwZS51bml0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ub3JtYWxpc2UoKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIG1hZ25pdHVkZSAobGVuZ3RoKSBvZiB0aGlzIHZlY3RvclxuICAgICAqL1xuICAgIEFic3RyYWN0VmVjdG9yLnByb3RvdHlwZS5tYWduaXR1ZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB4ID0gdGhpcy54O1xuICAgICAgICB2YXIgeSA9IHRoaXMueTtcbiAgICAgICAgcmV0dXJuIE1hdGguc3FydCh4ICogeCArIHkgKiB5KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIG1hZ25pdHVkZSAobGVuZ3RoKSBvZiB0aGlzIHZlY3RvclxuICAgICAqL1xuICAgIEFic3RyYWN0VmVjdG9yLnByb3RvdHlwZS5sZW5ndGggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1hZ25pdHVkZSgpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgc3F1cmVkIGxlbmd0aCBvZiB0aGlzIHZlY3RvclxuICAgICAqL1xuICAgIEFic3RyYWN0VmVjdG9yLnByb3RvdHlwZS5sZW5ndGhTcSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHggPSB0aGlzLng7XG4gICAgICAgIHZhciB5ID0gdGhpcy55O1xuICAgICAgICByZXR1cm4geCAqIHggKyB5ICogeTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGRvdCBwcm9kdWN0IG9mIHRoaXMgdmVjdG9yIGJ5IGFub3RoZXJcbiAgICAgKi9cbiAgICBBYnN0cmFjdFZlY3Rvci5wcm90b3R5cGUuZG90ID0gZnVuY3Rpb24gKHZlYykge1xuICAgICAgICByZXR1cm4gdmVjLnggKiB0aGlzLnggKyB2ZWMueSAqIHRoaXMueTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGNyb3NzIHByb2R1Y3Qgb2YgdGhpcyB2ZWN0b3IgYnkgYW5vdGhlci5cbiAgICAgKi9cbiAgICBBYnN0cmFjdFZlY3Rvci5wcm90b3R5cGUuY3Jvc3MgPSBmdW5jdGlvbiAodmVjKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnggKiB2ZWMueSAtIHRoaXMueSAqIHZlYy54O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV2ZXJzZXMgdGhpcyB2ZWN0b3IgaS5lIG11bHRpcGxpZXMgaXQgYnkgLTFcbiAgICAgKi9cbiAgICBBYnN0cmFjdFZlY3Rvci5wcm90b3R5cGUucmV2ZXJzZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy54ID0gLXRoaXMueDtcbiAgICAgICAgdGhpcy55ID0gLXRoaXMueTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIHZlY3RvciBheGVzIHZhbHVlcyB0byBhYnNvbHV0ZSB2YWx1ZXNcbiAgICAgKi9cbiAgICBBYnN0cmFjdFZlY3Rvci5wcm90b3R5cGUuYWJzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnggPSBNYXRoLmFicyh0aGlzLngpO1xuICAgICAgICB0aGlzLnkgPSBNYXRoLmFicyh0aGlzLnkpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFplcm9lcyB0aGUgdmVjdG9yIGkuZSBzZXRzIGFsbCBheGVzIHRvIDBcbiAgICAgKi9cbiAgICBBYnN0cmFjdFZlY3Rvci5wcm90b3R5cGUuemVybyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy54ID0gdGhpcy55ID0gMDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBkaXN0YW5jZSBiZXR3ZWVuIHRoaXMgdmVjdG9yIGFuZCBhbm90aGVyXG4gICAgICovXG4gICAgQWJzdHJhY3RWZWN0b3IucHJvdG90eXBlLmRpc3RhbmNlID0gZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgdmFyIHggPSB0aGlzLnggLSB2Lng7XG4gICAgICAgIHZhciB5ID0gdGhpcy55IC0gdi55O1xuICAgICAgICByZXR1cm4gTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUm90YXRlcyB0aGUgdmV0b3IgYnkgcHJvdmlkZWQgcmFkaWFuc1xuICAgICAqL1xuICAgIEFic3RyYWN0VmVjdG9yLnByb3RvdHlwZS5yb3RhdGUgPSBmdW5jdGlvbiAocmFkcykge1xuICAgICAgICB2YXIgY29zID0gTWF0aC5jb3MocmFkcyk7XG4gICAgICAgIHZhciBzaW4gPSBNYXRoLnNpbihyYWRzKTtcbiAgICAgICAgdmFyIG94ID0gdGhpcy54O1xuICAgICAgICB2YXIgb3kgPSB0aGlzLnk7XG4gICAgICAgIHRoaXMueCA9IG94ICogY29zIC0gb3kgKiBzaW47XG4gICAgICAgIHRoaXMueSA9IG94ICogc2luICsgb3kgKiBjb3M7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUm91bmRzIHRoaXMgdmVjdG9yIHRvIG4gZGVjaW1hbCBwbGFjZXNcbiAgICAgKi9cbiAgICBBYnN0cmFjdFZlY3Rvci5wcm90b3R5cGUucm91bmQgPSBmdW5jdGlvbiAobikge1xuICAgICAgICBpZiAobiA9PT0gdm9pZCAwKSB7IG4gPSAyOyB9XG4gICAgICAgIHZhciBwID0gcHJlY2lzaW9uW25dO1xuICAgICAgICAvLyBUaGlzIHBlcmZvcm1zIHdhYWF5IGJldHRlciB0aGFuIHRvRml4ZWQgYW5kIGdpdmUgRmxvYXQzMiB0aGUgZWRnZSBhZ2Fpbi5cbiAgICAgICAgLy8gaHR0cDovL3d3dy5keW5hbWljZ3VydS5jb20vamF2YXNjcmlwdC9yb3VuZC1udW1iZXJzLXdpdGgtcHJlY2lzaW9uL1xuICAgICAgICB0aGlzLnggPSAoKDAuNSArIHRoaXMueCAqIHApIDw8IDApIC8gcDtcbiAgICAgICAgdGhpcy55ID0gKCgwLjUgKyB0aGlzLnkgKiBwKSA8PCAwKSAvIHA7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIGNvcHkgb2YgdGhpcyB2ZWN0b3JcbiAgICAgKi9cbiAgICBBYnN0cmFjdFZlY3Rvci5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgdGhpcy5jdG9yKHRoaXMueCwgdGhpcy55KTtcbiAgICB9O1xuICAgIHJldHVybiBBYnN0cmFjdFZlY3Rvcjtcbn0oKSk7XG5leHBvcnRzLkFic3RyYWN0VmVjdG9yID0gQWJzdHJhY3RWZWN0b3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1BYnN0cmFjdFZlY3Rvci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEFic3RyYWN0VmVjdG9yXzEgPSByZXF1aXJlKFwiLi9BYnN0cmFjdFZlY3RvclwiKTtcbi8qKlxuICogQSB2ZWN0b3IgcmVwcmVzZW50YXRpb24gdGhhdCBzdG9yZXMgdGhlIGF4ZXMgaW4gYW4gQXJyYXlcbiAqXG4gKiBgYGBcbiAqIGNvbnN0IHYgPSBuZXcgVmVjMkQuQXJyYXlWZWN0b3IoMiwgNSlcbiAqIGBgYFxuICovXG52YXIgQXJyYXlWZWN0b3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEFycmF5VmVjdG9yLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEFycmF5VmVjdG9yKHgsIHkpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgQXJyYXlWZWN0b3IpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmF4ZXMgPSBbeCwgeV07XG4gICAgICAgIF90aGlzLmN0b3IgPSBBcnJheVZlY3RvcjtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQXJyYXlWZWN0b3IucHJvdG90eXBlLCBcInhcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmF4ZXNbMF07XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgIHRoaXMuYXhlc1swXSA9IHg7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBcnJheVZlY3Rvci5wcm90b3R5cGUsIFwieVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXhlc1sxXTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAoeSkge1xuICAgICAgICAgICAgdGhpcy5heGVzWzFdID0geTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIEFycmF5VmVjdG9yO1xufShBYnN0cmFjdFZlY3Rvcl8xLkFic3RyYWN0VmVjdG9yKSk7XG5leHBvcnRzLkFycmF5VmVjdG9yID0gQXJyYXlWZWN0b3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1BcnJheVZlY3Rvci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEFic3RyYWN0VmVjdG9yXzEgPSByZXF1aXJlKFwiLi9BYnN0cmFjdFZlY3RvclwiKTtcbi8qKlxuICogQSB2ZWN0b3IgcmVwcmVzZW50YXRpb24gdGhhdCBzdG9yZXMgdGhlIGF4ZXMgaW4gYSBGbG9hdDMyQXJyYXlcbiAqXG4gKiBgYGBcbiAqIGNvbnN0IHYgPSBuZXcgVmVjMkQuRmxvYXQzMlZlY3RvcigyLCA1KVxuICogYGBgXG4gKi9cbnZhciBGbG9hdDMyVmVjdG9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhGbG9hdDMyVmVjdG9yLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEZsb2F0MzJWZWN0b3IoeCwgeSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBGbG9hdDMyVmVjdG9yKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5heGVzID0gbmV3IEZsb2F0MzJBcnJheSgyKTtcbiAgICAgICAgX3RoaXMuYXhlc1swXSA9IHg7XG4gICAgICAgIF90aGlzLmF4ZXNbMV0gPSB5O1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGbG9hdDMyVmVjdG9yLnByb3RvdHlwZSwgXCJ4XCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5heGVzWzBdO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICB0aGlzLmF4ZXNbMF0gPSB4O1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmxvYXQzMlZlY3Rvci5wcm90b3R5cGUsIFwieVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXhlc1sxXTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAoeSkge1xuICAgICAgICAgICAgdGhpcy5heGVzWzFdID0geTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIEZsb2F0MzJWZWN0b3I7XG59KEFic3RyYWN0VmVjdG9yXzEuQWJzdHJhY3RWZWN0b3IpKTtcbmV4cG9ydHMuRmxvYXQzMlZlY3RvciA9IEZsb2F0MzJWZWN0b3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1GbG9hdDMyVmVjdG9yLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuZnVuY3Rpb24gX19leHBvcnQobSkge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKCFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcbn1cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL0Fic3RyYWN0VmVjdG9yXCIpKTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL0FycmF5VmVjdG9yXCIpKTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL0Zsb2F0MzJWZWN0b3JcIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vVmVjdG9yXCIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZlYzJELmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgQWJzdHJhY3RWZWN0b3JfMSA9IHJlcXVpcmUoXCIuL0Fic3RyYWN0VmVjdG9yXCIpO1xuLyoqXG4gKiBBIHZlY3RvciByZXByZXNlbnRhdGlvbiB0aGF0IHN0b3JlcyB0aGUgYXhlcyBhcyBwYXJ0IG9mIHRoZSBpbnN0YW5jZSBpdHNlbGZcbiAqXG4gKiBgYGB0c1xuICogY29uc3QgdiA9IG5ldyBWZWMyRC5WZWN0b3IoMiwgNSlcbiAqIGBgYFxuICovXG52YXIgVmVjdG9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhWZWN0b3IsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gVmVjdG9yKHgsIHkpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgVmVjdG9yKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5feCA9IHg7XG4gICAgICAgIF90aGlzLl95ID0geTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVmVjdG9yLnByb3RvdHlwZSwgXCJ4XCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5feDtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgdGhpcy5feCA9IHg7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWZWN0b3IucHJvdG90eXBlLCBcInlcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl95O1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh5KSB7XG4gICAgICAgICAgICB0aGlzLl95ID0geTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIFZlY3Rvcjtcbn0oQWJzdHJhY3RWZWN0b3JfMS5BYnN0cmFjdFZlY3RvcikpO1xuZXhwb3J0cy5WZWN0b3IgPSBWZWN0b3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WZWN0b3IuanMubWFwIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsIi8vIHN0YXJ0dXBcbi8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLy8gVGhpcyBlbnRyeSBtb2R1bGUgaXMgcmVmZXJlbmNlZCBieSBvdGhlciBtb2R1bGVzIHNvIGl0IGNhbid0IGJlIGlubGluZWRcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vc3JjL2luZGV4LnRzXCIpO1xuIl0sIm5hbWVzIjpbImNlbnRlciIsInJhZGl1cyIsInN0YXJ0QW5nbGUiLCJlbmRBbmdsZSIsImNvdW50ZXJDbG9ja3dpc2UiLCJpc0NvbGxpZGFibGUiLCJkcmF3IiwiY29udGV4dCIsImNvbG9yIiwibGluZUNhcCIsInN0cm9rZVN0eWxlIiwidGhpcyIsImJlZ2luUGF0aCIsImFyYyIsIngiLCJ5Iiwic3Ryb2tlIiwiY2xvc2VQYXRoIiwiZHJhd0RlYnVnIiwidGFuZ2VudF9hbmdsZSIsIk1hdGgiLCJQSSIsImRyYXdEb3QiLCJkcmF3QXJyb3ciLCJlbmRQb2ludCIsImNvcyIsInNpbiIsImRyYXdBcmMiLCJpc0NvdW50ZXJDbG9ja3dpc2UiLCJnZXRDb250aW51aW5nU2VnbWVudCIsInRyYW5zZm9ybSIsIkFyY1NlZ21lbnQiLCJjbG9uZSIsImFkZCIsInNuYWtlcyIsImNoZWNrQ29sbGlzaW9ucyIsImZvckVhY2giLCJzbmFrZTEiLCJpc0FsaXZlIiwiaGVhZCIsImFicyIsImtpbGwiLCJjb25zb2xlIiwibG9nIiwic25ha2UyIiwic2VnbWVudHMiLCJzZWdtZW50Iiwic2xpY2UiLCJwb3AiLCJpc1BvaW50T25MaW5lIiwiaXNQb2ludE9uQXJjIiwibGluZSIsInBvaW50IiwiZXBzaWxvbiIsImxpbmVMZW5ndGgiLCJsZW5ndGgiLCJkMSIsImRpc3RhbmNlIiwic3RhcnRQb2ludCIsImQyIiwiYW5nbGUiLCJhdGFuMiIsIm5vcm1hbGl6ZUFuZ2xlIiwibm9ybWFsaXplZCIsIm5vcm1hbGl6ZWRBbmdsZSIsIm5vcm1hbGl6ZWRTdGFydEFuZ2xlIiwibm9ybWFsaXplZEVuZEFuZ2xlIiwiZHJhd0dyaWQiLCJiYWNrZ3JvdW5kQ2FudmFzQ3R4IiwiY2xlYXJSZWN0IiwiYmFja2dyb3VuZENhbnZhcyIsIndpZHRoIiwiaGVpZ2h0IiwibGluZVdpZHRoIiwiZ3JpZFNpemUiLCJtb3ZlVG8iLCJsaW5lVG8iLCJkb3RYIiwiZG90WSIsImRvdFNpemUiLCJmaWxsU3R5bGUiLCJmaWxsIiwiY3R4IiwiZnJvbSIsInRvIiwiaGVhZExlbmd0aCIsIm5ld190byIsIlZlY3RvciIsInNuYWtlIiwibGVmdEtleSIsInJpZ2h0S2V5Iiwia2V5TWFwIiwid2luZG93IiwiYWRkRXZlbnRMaXN0ZW5lciIsIm9uS2V5RG93biIsImJpbmQiLCJvbktleVVwIiwiZXZlbnQiLCJrZXkiLCJ0b1VwcGVyQ2FzZSIsInRhbmdlbnRBbmdsZSIsInNlbmRLZXlFdmVudFRvU2VydmVyIiwiYWRkU2VnbWVudCIsInR1cm5SYWRpdXMiLCJkaXNwb3NlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInN0YXJ0IiwiZW5kIiwiY2FsY0VuZEFuZ2xlIiwiYXRhbiIsInNxcnQiLCJ0cmFuc2Zvcm1lZEVuZHBvaW50IiwiTGluZVNlZ21lbnQiLCJjdXJyZW50Um9vbSIsImN1cnJlbnRQbGF5ZXIiLCJyb29tQ29kZUlucHV0IiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsInVzZXJuYW1lSW5wdXQiLCJyb29tQnV0dG9uIiwicmVhZHlCdXR0b24iLCJsb2dpbkRpdiIsInJvb21EaXYiLCJjb2xvclBpY2tlciIsInJvb21Vc2Vyc0xpc3QiLCJyb29tQ29kZVNwYW4iLCJwbGF5ZXJDb3VudCIsImNvbG9yUGlja2VyRGl2Iiwic3RhcnRQcm9ncmVzc0JhciIsInVwZGF0ZUJ1dHRvbiIsInZhbHVlIiwidHJpbSIsImRpc2FibGVkIiwidGV4dENvbnRlbnQiLCJoYW5kbGVSb29tQWN0aW9uIiwidXNlcm5hbWUiLCJQbGF5ZXIiLCJpbm5lclRleHQiLCJjcmVhdGVSb29tIiwiam9pblJvb20iLCJoYW5kbGVSZWFkeVN0YXRlIiwiaXNSZWFkeSIsInNldFBsYXllckRhdGEiLCJnZXRDb2RlIiwiY2xhc3NMaXN0IiwicmVtb3ZlIiwic2hvd1Jvb21WaWV3IiwiZGF0YSIsInJvb21JbmZvIiwiSlNPTiIsInBhcnNlIiwidG9TdHJpbmciLCJSb29tIiwiZ2V0SG9zdCIsInN0eWxlIiwiYmFja2dyb3VuZENvbG9yIiwicGlja1RleHRDb2xvckJhc2VkT25CZ0NvbG9yQWR2YW5jZWQiLCJpbm5lckhUTUwiLCJ1cGRhdGVSb29tTGlzdCIsInJlYWR5UGxheWVyQ291bnQiLCJtYXhQbGF5ZXJDb3VudCIsInNldFBsYXllcnMiLCJzZXRIb3N0Iiwic2V0TWF4U2l6ZSIsImdldFBsYXllcnMiLCJnZXRNYXhTaXplIiwicGxheWVyIiwicGxheWVySXRlbSIsImNyZWF0ZUVsZW1lbnQiLCJpbnNlcnRBZGphY2VudEhUTUwiLCJhcHBlbmRDaGlsZCIsImZpbHRlciIsInAiLCJmbG9vciIsInNob3dFcnJvckFuaW1hdGlvbiIsInNldFRpbWVvdXQiLCJ1cGRhdGVDb2xvclBpY2tlciIsInVwZGF0ZVBsYXllckNvbG9yIiwiYmdDb2xvciIsImxpZ2h0Q29sb3IiLCJkYXJrQ29sb3IiLCJjaGFyQXQiLCJzdWJzdHJpbmciLCJjIiwicGFyc2VJbnQiLCJtYXAiLCJjb2wiLCJwb3ciLCJvbmxvYWQiLCJzdGFydEdhbWUiLCJwb3NpdGlvbiIsImVtaXRJbnRlcnZhbCIsInNpemUiLCJzcGVlZCIsInNoYXBlIiwiY2FudmFzQ3R4IiwiZmFkZUNvbG9yIiwiZmFkZVNpemUiLCJhZ2UiLCJlbWl0VGltZU1pbGxpcyIsImFsaXZlUGFydGljbGVzIiwidGlja3MiLCJlbWl0VGltZSIsInBhcnRpY2xlTWF4QWdlIiwidGljayIsImR0IiwicHVzaCIsImdldFJhbmRvbURpcmVjdGlvbiIsInBhcnRpY2xlIiwidmVsb2NpdHkiLCJjb2xvckZhZGVBbW91bnQiLCJhIiwic2l6ZUZhZGVBbW91bnQiLCJtdWx0aXBseUJ5U2NhbGFyIiwiciIsImciLCJiIiwiZmlsbFJlY3QiLCJyYW5kb20iLCJoZXhUb1JnYiIsImhleCIsInJlc3VsdCIsImV4ZWMiLCJzdGFydFBvcyIsImVtaXR0ZXIiLCJkaXN0YW5jZVRvQ2hhbmdlT2ZTdGF0ZSIsImluZGV4IiwibW92ZSIsImNoZWNrV2FsbHMiLCJsYXN0U2VnbWVudCIsImR4IiwiZHkiLCJuZXdFbmQiLCJhbmdsZUV4dGVuc2lvbiIsInVwZGF0ZUVtaXR0ZXIiLCJjYW52YXMiLCJyZXBsYWNlIiwidG9KU09OIiwiY29kZSIsImhvc3QiLCJwbGF5ZXJzIiwibWF4U2l6ZSIsInVuZGVmaW5lZCIsImFkZFBsYXllciIsIm5ld1NpemUiLCJzb2NrZXQiLCJyZWFkeVN0YXRlIiwiV2ViU29ja2V0IiwiT1BFTiIsInNlbmQiLCJzdHJpbmdpZnkiLCJ0eXBlIiwiZXJyb3IiLCJyb29tQ29kZSIsInByZXNzZWQiLCJsb2NhdGlvbiIsImhvc3RuYW1lIiwib25vcGVuIiwib25tZXNzYWdlIiwiYWxlcnQiLCJtZXNzYWdlIiwib25jbG9zZSIsIm9uZXJyb3IiLCJmcHNDb3VudGVyIiwidG9wIiwibGVmdCIsImJvZHkiLCJmcHMiLCJnYW1lQ2FudmFzIiwiZ2FtZUNhbnZhc0N0eCIsImdldENvbnRleHQiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJmcmFtZUNvdW50IiwibGFzdFRpbWUiLCJwZXJmb3JtYW5jZSIsIm5vdyIsImlucHV0TWFuYWdlcnMiLCJjb2xvcnMiLCJrZXltYXBzIiwiaSIsImNvbGxpc2lvbkhhbmRsZXIiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJhbmltYXRlIiwiY3VycmVudFRpbWUiLCJ0aW1lRGlmZiIsInJvdW5kIiwiY2FsY3VsYXRlRlBTIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwicHJlY2lzaW9uIiwiQWJzdHJhY3RWZWN0b3IiLCJjdG9yIiwicHJvdG90eXBlIiwic2V0QXhlcyIsImdldFgiLCJzZXRYIiwiZ2V0WSIsInNldFkiLCJ0b0FycmF5IiwidG9PYmplY3QiLCJ2ZWMiLCJzdWJ0cmFjdCIsImVxdWFscyIsIm11bHRpcGx5QnlWZWN0b3IiLCJtdWxWIiwiZGl2aWRlQnlWZWN0b3IiLCJkaXZWIiwidiIsIm4iLCJtdWxTIiwiZGl2aWRlQnlTY2FsYXIiLCJkaXZTIiwibm9ybWFsaXNlIiwibWFnbml0dWRlIiwibm9ybWFsaXplIiwidW5pdCIsImxlbmd0aFNxIiwiZG90IiwiY3Jvc3MiLCJyZXZlcnNlIiwiemVybyIsInJvdGF0ZSIsInJhZHMiLCJveCIsIm95IiwiZXh0ZW5kU3RhdGljcyIsIl9fZXh0ZW5kcyIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiQXJyYXkiLCJkIiwiaGFzT3duUHJvcGVydHkiLCJfXyIsImNvbnN0cnVjdG9yIiwiY3JlYXRlIiwiQXJyYXlWZWN0b3IiLCJfc3VwZXIiLCJfdGhpcyIsImNhbGwiLCJheGVzIiwiZ2V0Iiwic2V0IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIkZsb2F0MzJWZWN0b3IiLCJGbG9hdDMyQXJyYXkiLCJfX2V4cG9ydCIsIm0iLCJfeCIsIl95IiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwibW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkZWZpbml0aW9uIiwibyIsIm9iaiIsInByb3AiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyJdLCJzb3VyY2VSb290IjoiIn0=