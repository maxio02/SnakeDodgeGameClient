/*! For license information please see game.js.LICENSE.txt */
(()=>{"use strict";var t={"./src/ArcSegment.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>c});var o,i=n("./src/Drawer.ts"),s=n("./node_modules/vector2d/src/Vec2D.js"),r=n("./src/Segment.ts"),a=(o=function(t,e){return o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},o(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});const c=function(t){function e(e,n,o,i,s,r){var a=t.call(this)||this;return a.center=e,a.radius=n,a.startAngle=o,a.endAngle=i,a.counterClockwise=s,a.isCollidable=r,a}return a(e,t),e.prototype.draw=function(t,e){t.lineCap="round",t.strokeStyle=e,1==this.isCollidable&&(t.beginPath(),t.arc(this.center.x,this.center.y,this.radius,this.startAngle,this.endAngle,this.counterClockwise),t.stroke(),t.closePath())},e.prototype.drawDebug=function(t,e){var n=this.counterClockwise?-Math.PI:Math.PI;n+=this.endAngle,t.lineCap="round",(0,i.drawDot)(this.center.x,this.center.y,5,"#000000"),(0,i.drawArrow)(t,new s.Vector(this.endPoint.x,this.endPoint.y),new s.Vector(this.endPoint.x+this.radius*Math.cos(n),this.endPoint.y+this.radius*Math.sin(n))),(0,i.drawArc)(this.center.x,this.center.y,this.radius,0,0,!1)},Object.defineProperty(e.prototype,"endPoint",{get:function(){return new s.Vector(this.center.x+this.radius*Math.cos(this.endAngle),this.center.y+this.radius*Math.sin(this.endAngle))},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"penpendicularEndAngle",{get:function(){return this.isCounterClockwise?this.endAngle-Math.PI/2:this.endAngle+Math.PI/2},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"penpendicularStartAngle",{get:function(){return this.isCounterClockwise?this.startAngle-Math.PI/2:this.startAngle+Math.PI/2},enumerable:!1,configurable:!0}),e.prototype.isCounterClockwise=function(){return this.counterClockwise},e.prototype.getContinuingSegment=function(t){return new e(this.center.clone().add(t),this.radius,this.endAngle,this.endAngle,this.counterClockwise,this.isCollidable)},e}(r.default)},"./src/CollisionHandler.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>s});var o=n("./src/ArcSegment.ts"),i=n("./src/LineSegment.ts");const s=function(){function t(t){this.snakes=t}return t.prototype.checkCollisions=function(){var t=this;return this.snakes.forEach((function(e){e.isAlive&&e.head.isCollidable&&(e.head instanceof o.default&&Math.abs(e.head.endAngle-e.head.startAngle)>2*Math.PI&&(e.kill(),console.log("snake ".concat(e," commited circlicide"))),t.snakes.forEach((function(n){n.segments.forEach((function(s){if(s.isCollidable&&s!==e.head&&(n!==e||s!==e.segments.slice(-2,-1).pop()))if(s instanceof i.default){if(t.isPointOnLine(s,e.head.endPoint,.5))return console.log(s),void e.kill()}else if(s instanceof o.default&&t.isPointOnArc(s,e.head.endPoint,5))return console.log(s),void e.kill()}))})))})),null},t.prototype.isPointOnLine=function(t,e,n){var o=t.length,i=e.distance(t.startPoint),s=e.distance(t.endPoint);return!(Math.abs(i+s-o)>n)},t.prototype.isPointOnArc=function(t,e,n){var o=e.distance(t.center);if(Math.abs(o-t.radius)>n)return!1;var i=Math.atan2(e.y-t.center.y,e.x-t.center.x),s=t.startAngle,r=t.endAngle,a=function(t){var e=t%(2*Math.PI);return e<0&&(e+=2*Math.PI),e},c=a(i),d=a(s),h=a(r);if(d<=h){if(c>=d&&c<=h&&!t.isCounterClockwise())return console.log("".concat(d," < ").concat(c," < ").concat(h)),!0}else if(c>=h&&c<=d&&t.isCounterClockwise())return console.log("".concat(d," > ").concat(c," > ").concat(h)),!0;return!1},t}()},"./src/Drawer.ts":(t,e,n)=>{n.r(e),n.d(e,{drawArc:()=>a,drawArrow:()=>c,drawDot:()=>r,drawGrid:()=>s});var o=n("./node_modules/vector2d/src/Vec2D.js"),i=n("./src/index.ts");function s(){i.backgroundCanvasCtx.clearRect(0,0,i.backgroundCanvas.width,i.backgroundCanvas.height),i.backgroundCanvasCtx.strokeStyle="rgba(0, 0, 0, 0.3)",i.backgroundCanvasCtx.lineWidth=2;for(var t=i.gridSize;t<i.backgroundCanvas.width;t+=i.gridSize)i.backgroundCanvasCtx.beginPath(),i.backgroundCanvasCtx.moveTo(t,0),i.backgroundCanvasCtx.lineTo(t,i.backgroundCanvas.height),i.backgroundCanvasCtx.stroke();for(var e=i.gridSize;e<i.backgroundCanvas.height;e+=i.gridSize)i.backgroundCanvasCtx.beginPath(),i.backgroundCanvasCtx.moveTo(0,e),i.backgroundCanvasCtx.lineTo(i.backgroundCanvas.width,e),i.backgroundCanvasCtx.stroke()}function r(t,e,n,o){i.backgroundCanvasCtx.beginPath(),i.backgroundCanvasCtx.arc(t,e,n,0,2*Math.PI,!1),i.backgroundCanvasCtx.fillStyle=o,i.backgroundCanvasCtx.fill(),i.backgroundCanvasCtx.closePath()}function a(t,e,n,o,s,r){i.backgroundCanvasCtx.lineCap="round",i.backgroundCanvasCtx.strokeStyle="#3466aa",i.backgroundCanvasCtx.beginPath(),i.backgroundCanvasCtx.arc(t,e,n,0,2*Math.PI,r),i.backgroundCanvasCtx.lineWidth=5,i.backgroundCanvasCtx.stroke(),i.backgroundCanvasCtx.closePath()}function c(t,e,n){if(e.x!=n.x&&e.y!=n.y){var i=Math.atan2(n.y-e.y,n.x-e.x),s=10,r=new o.Vector(n.x,n.y);r.x-=11.5*Math.cos(i),r.y-=11.5*Math.sin(i),t.beginPath(),t.moveTo(e.x,e.y),t.lineTo(r.x,r.y),t.strokeStyle="#bbbbbb",t.lineWidth=10,t.stroke(),t.beginPath(),t.moveTo(r.x,r.y),t.lineTo(r.x-s*Math.cos(i-Math.PI/7),r.y-s*Math.sin(i-Math.PI/7)),t.lineTo(r.x-s*Math.cos(i+Math.PI/7),r.y-s*Math.sin(i+Math.PI/7)),t.lineTo(r.x,r.y),t.lineTo(r.x-s*Math.cos(i-Math.PI/7),r.y-s*Math.sin(i-Math.PI/7)),t.strokeStyle="#bbbbbb",t.lineWidth=10,t.stroke(),t.fillStyle="#bbbbbb",t.fill(),t.closePath()}}},"./src/InputManager.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>a});var o=n("./node_modules/vector2d/src/Vec2D.js"),i=n("./src/ArcSegment.ts"),s=n("./src/LineSegment.ts"),r=n("./src/WebSocketClient/websocket.ts");const a=function(){function t(t,e,n){this.keyMap={},window.addEventListener("keydown",this.onKeyDown.bind(this)),window.addEventListener("keyup",this.onKeyUp.bind(this)),this.snake=t,this.leftKey=e,this.rightKey=n}return t.prototype.onKeyDown=function(t){if(this.snake.isAlive){var e=t.key.toUpperCase();if(e==this.leftKey||e==this.rightKey){if(this.keyMap[this.rightKey]&&e==this.leftKey)this.keyMap[this.rightKey]=!1;else if(this.keyMap[this.leftKey]&&e==this.rightKey)this.keyMap[this.leftKey]=!1;else if(this.keyMap[e])return;this.keyMap[e]=!0;var n=this.snake.head,a=n.endPoint,c=0;(0,r.sendKeyEventToServer)(e,!0),n instanceof s.default?(c+=Math.PI/2,e==this.rightKey&&this.snake.addSegment(new i.default(new o.Vector(a.x+this.snake.turnRadius*Math.cos(this.snake.head.endAngle+c),a.y+this.snake.turnRadius*Math.sin(this.snake.head.endAngle+c)),this.snake.turnRadius,this.snake.head.endAngle-c,this.snake.head.endAngle-c,!1,n.isCollidable)),e==this.leftKey&&this.snake.addSegment(new i.default(new o.Vector(a.x+this.snake.turnRadius*Math.cos(this.snake.head.endAngle-c),a.y+this.snake.turnRadius*Math.sin(this.snake.head.endAngle-c)),this.snake.turnRadius,this.snake.head.endAngle+c,this.snake.head.endAngle+c,!0,n.isCollidable))):n instanceof i.default&&(c=n.isCounterClockwise?-Math.PI:Math.PI,e==this.rightKey&&this.snake.addSegment(new i.default(new o.Vector(a.x-this.snake.turnRadius*Math.cos(this.snake.head.endAngle+c),a.y-this.snake.turnRadius*Math.sin(this.snake.head.endAngle+c)),this.snake.turnRadius,this.snake.head.endAngle-c,this.snake.head.endAngle-c,!1,n.isCollidable)),e==this.leftKey&&this.snake.addSegment(new i.default(new o.Vector(a.x-this.snake.turnRadius*Math.cos(this.snake.head.endAngle-c),a.y-this.snake.turnRadius*Math.sin(this.snake.head.endAngle-c)),this.snake.turnRadius,this.snake.head.endAngle+c,this.snake.head.endAngle+c,!0,n.isCollidable)))}}},t.prototype.onKeyUp=function(t){if(this.snake.isAlive){var e=t.key.toUpperCase();if(this.keyMap[e]){this.keyMap[e]=!1,(0,r.sendKeyEventToServer)(e,!1);var n=this.snake.head,a=n.endPoint,c=n.endAngle;e==this.leftKey&&n instanceof i.default&&n.isCounterClockwise()?c-=Math.PI/2:e==this.rightKey&&n instanceof i.default&&!n.isCounterClockwise()&&(c+=Math.PI/2),this.snake.addSegment(new s.default(a,new o.Vector(a.x+5*Math.cos(c),a.y+5*Math.sin(c)),n.isCollidable,c))}}},t.prototype.dispose=function(){window.removeEventListener("keydown",this.onKeyDown.bind(this)),window.removeEventListener("keyup",this.onKeyUp.bind(this))},t}()},"./src/LineSegment.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>r});var o,i=n("./src/Segment.ts"),s=(o=function(t,e){return o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},o(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});const r=function(t){function e(e,n,o,i){var s=t.call(this)||this;return s.isCollidable=!0,s.startPoint=e,s.endPoint=n,s.isCollidable=o,s.endAngle=i,s}return s(e,t),e.prototype.draw=function(t,e){t.strokeStyle=e,t.lineCap="round",1==this.isCollidable&&(t.beginPath(),t.moveTo(this.startPoint.x,this.startPoint.y),t.lineTo(this.endPoint.x,this.endPoint.y),t.stroke(),t.closePath())},e.prototype.calcEndAngle=function(){return Math.atan((this.endPoint.y-this.startPoint.y)/(this.endPoint.x-this.startPoint.x))},Object.defineProperty(e.prototype,"length",{get:function(){return Math.sqrt(Math.pow(this.startPoint.x-this.endPoint.x,2)+Math.pow(this.startPoint.y-this.endPoint.y,2))},enumerable:!1,configurable:!0}),e.prototype.getContinuingSegment=function(t){var n=this.endPoint.clone().add(t);return new e(n,n,this.isCollidable,this.endAngle)},e}(i.default)},"./src/MenuManager/login.ts":(t,e,n)=>{n.r(e),n.d(e,{handleReadyState:()=>C,handleRoomAction:()=>b,showErrorAnimation:()=>P,showRoomView:()=>x,updateButton:()=>m,updateColorPicker:()=>k,updatePlayerColor:()=>S,updateRoomList:()=>w});var o=n("./src/ViewModels/Player.ts"),i=n("./src/ViewModels/Room.ts"),s=n("./src/WebSocketClient/websocket.ts"),r=null,a=null,c=document.getElementById("roomCodeInput"),d=document.getElementById("usernameInput"),h=document.getElementById("joinButton"),l=document.getElementById("readyButton"),u=document.getElementById("login-div"),p=document.getElementById("room-div"),f=document.getElementById("color-picker"),y=document.getElementById("room-users-list"),g=document.getElementById("room-code"),v=document.getElementById("player-count");function m(){""==d.value.trim()?h.disabled=!0:h.disabled=!1,5==c.value.trim().length?h.textContent="JOIN ROOM":h.textContent="CREATE ROOM"}function b(){var t=d.value;t&&(a=new o.Player(t),"CREATE ROOM"===h.innerText?(0,s.createRoom)(d.value):(0,s.joinRoom)(c.value.toUpperCase(),d.value))}function C(){a.isReady=!a.isReady,(0,s.setPlayerData)(a,r.getCode()),a.isReady?(l.classList.remove("red-button"),l.classList.add("green-button")):(l.classList.add("red-button"),l.classList.remove("green-button"))}function x(t){var e=JSON.parse(t.toString());r=new i.Room(e.room.code,e.room.host,e.room.players,e.room.maxSize),u.classList.add("display-none"),p.classList.add("display-flex"),c.value=r.getCode(),g.innerHTML=r.getCode(),w(t)}function w(t){var e=JSON.parse(t.toString());r.setPlayers(e.room.players),r.setHost(e.room.host),r.setMaxSize(e.room.maxSize),v.innerHTML="".concat(r.getPlayers().length,"/").concat(r.getMaxSize()),y.innerHTML="",r.getPlayers().forEach((function(t){var e=document.createElement("li");e.textContent=t.username+"",t.username==r.getHost().username&&e.insertAdjacentHTML("afterbegin",'<i class="fa-solid fa-crown" style="color: #eed700;"></i>'),t.isReady?e.insertAdjacentHTML("beforeend",' <i class="fa-solid fa-circle" style="color: #37cb48;"></i>'):e.insertAdjacentHTML("beforeend",' <i class="fa-solid fa-circle" style="color: #cb3737;"></i>'),y.appendChild(e)}))}function P(){h.classList.add("red-button"),h.classList.add("wiggle"),setTimeout((function(){h.classList.remove("red-button"),h.classList.remove("wiggle")}),600)}function k(){document.getElementById("color-picker-container").style.backgroundColor=f.value}function S(){var t,e,n;a.color=f.value,document.getElementById("color-label").style.color=("#FFFFFF","#000000",e="#"===(t=f.value).charAt(0)?t.substring(1,7):t,.2126*(n=[parseInt(e.substring(0,2),16)/255,parseInt(e.substring(2,4),16)/255,parseInt(e.substring(4,6),16)/255].map((function(t){return t<=.03928?t/12.92:Math.pow((t+.055)/1.055,2.4)})))[0]+.7152*n[1]+.0722*n[2]>.4?"#000000":"#FFFFFF"),(0,s.setPlayerData)(a,r.getCode())}window.onload=function(){m()},window.updateButton=m,window.handleRoomAction=b,window.handleReadyState=C,window.updateColorPicker=k,window.updatePlayerColor=S},"./src/ParticleSystem/Emitter.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>r});var o=n("./src/ParticleSystem/Particle.ts"),i=n("./src/ParticleSystem/ParticleSystemUtils.ts"),s=function(){return s=Object.assign||function(t){for(var e,n=1,o=arguments.length;n<o;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},s.apply(this,arguments)};const r=function(){function t(t,e,n,o,i,s,r,a,c,d,h){void 0===i&&(i="circle"),void 0===a&&(a=!0),void 0===c&&(c=!0),void 0===h&&(h=0),this.aliveParticles=[],this.ticks=0,this.position=t,this.emitTime=e,this.size=n,this.speed=o,this.shape=i,this.color=s,this.canvasCtx=r,this.fadeColor=a,this.fadeSize=c,this.particleMaxAge=d,this.emitTimeMillis=h}return t.prototype.tick=function(t){this.emitTimeMillis+this.particleMaxAge<0||(this.emitTimeMillis-=t,this.ticks%this.emitTime==0&&this.emitTimeMillis>0&&(this.aliveParticles.push(new o.default(this.position.clone(),(0,i.getRandomDirection)(),this.size,this.speed,this.shape,s({},this.color),this.canvasCtx,this.particleMaxAge,this.fadeColor,this.fadeSize)),this.aliveParticles.push(new o.default(this.position.clone(),(0,i.getRandomDirection)(),this.size,this.speed,this.shape,s({},this.color),this.canvasCtx,this.particleMaxAge,this.fadeColor,this.fadeSize)),this.aliveParticles.push(new o.default(this.position.clone(),(0,i.getRandomDirection)(),this.size,this.speed,this.shape,s({},this.color),this.canvasCtx,this.particleMaxAge,this.fadeColor,this.fadeSize))),this.aliveParticles.forEach((function(e){e.tick(t)})),this.aliveParticles=this.aliveParticles.filter((function(t){return t.age>0})),this.ticks++)},t.prototype.draw=function(){this.aliveParticles.forEach((function(t){t.draw()}))},t}()},"./src/ParticleSystem/Particle.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>o});const o=function(){function t(t,e,n,o,i,s,r,a,c,d){void 0===i&&(i="circle"),this.position=t,this.velocity=e,this.size=n,this.speed=o,this.shape=i,this.color=s,this.canvasCtx=r,this.fadeColor=c,this.fadeSize=d,this.age=a,this.colorFadeAmount=this.color.a/this.age,this.sizeFadeAmount=this.size/this.age}return t.prototype.tick=function(t){this.position.add(this.velocity.clone().multiplyByScalar(t*this.speed)),this.fadeColor&&(this.color.a-=this.colorFadeAmount),this.fadeSize&&(this.size-=this.sizeFadeAmount),this.age--},t.prototype.draw=function(){switch(this.canvasCtx.moveTo(this.position.x,this.position.y),this.canvasCtx.fillStyle="rgba(".concat(this.color.r,",").concat(this.color.g,", ").concat(this.color.b,", ").concat(this.color.a,")"),this.canvasCtx.beginPath(),this.shape){case"circle":this.canvasCtx.arc(this.position.x,this.position.y,this.size,0,2*Math.PI),this.canvasCtx.fill();break;case"square":this.canvasCtx.fillRect(this.position.x-this.size,this.position.y-this.size,2*this.size,2*this.size)}this.canvasCtx.closePath()},t}()},"./src/ParticleSystem/ParticleSystemUtils.ts":(t,e,n)=>{n.r(e),n.d(e,{getRandomDirection:()=>i,hexToRgb:()=>s});var o=n("./node_modules/vector2d/src/Vec2D.js");function i(){return new o.Vector(2*Math.random()-1,2*Math.random()-1)}function s(t){var e=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(t);return e?{r:parseInt(e[1],16),g:parseInt(e[2],16),b:parseInt(e[3],16)}:null}},"./src/Segment.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>o});const o=function(){}},"./src/Snake.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>d});var o=n("./node_modules/vector2d/src/Vec2D.js"),i=n("./src/ArcSegment.ts"),s=n("./src/LineSegment.ts"),r=n("./src/ParticleSystem/Emitter.ts"),a=n("./src/ParticleSystem/ParticleSystemUtils.ts"),c=function(){return c=Object.assign||function(t){for(var e,n=1,o=arguments.length;n<o;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},c.apply(this,arguments)};const d=function(){function t(t,e,n){this.segments=[],this.isAlive=!0,this.turnRadius=60,this.emitter=null,this.distanceToChangeOfState=10,this.addSegment(t),this.color=e,this.canvasCtx=n}return t.prototype.addSegment=function(t){this.segments.push(t)},Object.defineProperty(t.prototype,"head",{get:function(){return this.segments.slice(-1).pop()},enumerable:!1,configurable:!0}),t.prototype.draw=function(){var t=this;this.canvasCtx.lineWidth=12,this.segments.forEach((function(e,n){e.draw(t.canvasCtx,t.color),t.head==e&&(e instanceof i.default?(t.canvasCtx.beginPath(),t.canvasCtx.arc(e.center.x,e.center.y,e.radius,e.endAngle,e.endAngle,e.isCounterClockwise()),t.canvasCtx.stroke(),t.canvasCtx.closePath()):e instanceof s.default&&(t.canvasCtx.beginPath(),t.canvasCtx.moveTo(e.endPoint.x,e.endPoint.y),t.canvasCtx.lineTo(e.endPoint.x,e.endPoint.y),t.canvasCtx.stroke(),t.canvasCtx.closePath()))}))},t.prototype.move=function(t){if(this.isAlive){this.checkWalls();var e=this.head;if(e){if(e instanceof s.default){var n=t*Math.cos(e.endAngle),r=t*Math.sin(e.endAngle),a=new o.Vector(e.endPoint.x+n,e.endPoint.y+r);e.endPoint=a}else if(e instanceof i.default){var c=t/e.radius;e.endAngle=e.isCounterClockwise()?e.endAngle-c:e.endAngle+c}e.isCollidable&&this.distanceToChangeOfState<0&&(this.distanceToChangeOfState=80*Math.random()+30,e instanceof s.default?this.addSegment(new s.default(e.endPoint,new o.Vector(e.endPoint.x,e.endPoint.y),!1,e.endAngle)):e instanceof i.default&&this.addSegment(new i.default(e.center,e.radius,e.endAngle,e.endAngle,e.isCounterClockwise(),!1))),!e.isCollidable&&this.distanceToChangeOfState<0&&(this.distanceToChangeOfState=500*Math.random()+80,e instanceof s.default?this.addSegment(new s.default(e.endPoint,new o.Vector(e.endPoint.x,e.endPoint.y),!0,e.endAngle)):e instanceof i.default&&this.addSegment(new i.default(e.center,e.radius,e.endAngle,e.endAngle,e.isCounterClockwise(),!0))),this.distanceToChangeOfState-=t}}},t.prototype.kill=function(){console.log("SNAKE DEAD"),this.isAlive=!1,this.emitter=new r.default(this.head.endPoint,1,7,4,"circle",c(c({},(0,a.hexToRgb)(this.color)),{a:1}),this.canvasCtx,!0,!0,70,4)},t.prototype.updateEmitter=function(t){this.emitter&&(this.emitter.tick(t),this.emitter.draw())},t.prototype.checkWalls=function(){var t=this.head;t.endPoint.x<0?this.addSegment(t.getContinuingSegment(new o.Vector(this.canvasCtx.canvas.width,0))):t.endPoint.x>this.canvasCtx.canvas.width&&this.addSegment(t.getContinuingSegment(new o.Vector(-this.canvasCtx.canvas.width,0))),t.endPoint.y<0?this.addSegment(t.getContinuingSegment(new o.Vector(0,this.canvasCtx.canvas.height))):t.endPoint.y>this.canvasCtx.canvas.height&&this.addSegment(t.getContinuingSegment(new o.Vector(0,-this.canvasCtx.canvas.height)))},t}()},"./src/ViewModels/Player.ts":(t,e,n)=>{n.r(e),n.d(e,{Player:()=>o});var o=function(){function t(t,e){void 0===e&&(e=!1),this.username=t,this.isReady=e,this.color="#000000".replace(/0/g,(function(){return(~~(16*Math.random())).toString(16)}))}return t.prototype.toJSON=function(){return{username:this.username,isReady:this.isReady,color:this.color}},t}()},"./src/ViewModels/Room.ts":(t,e,n)=>{n.r(e),n.d(e,{Room:()=>o});var o=function(){function t(t,e,n,o){void 0===o&&(o=5),this.players=[],this.code=t,this.host=e,this.maxSize=o,null!=n?this.players=n:this.addPlayer(e)}return t.prototype.addPlayer=function(t){return!(this.players.length>=this.maxSize||(this.players.push(t),0))},t.prototype.getCode=function(){return this.code},t.prototype.getPlayers=function(){return this.players},t.prototype.getHost=function(){return this.host},t.prototype.setHost=function(t){this.host=t},t.prototype.setPlayers=function(t){this.players=t},t.prototype.setMaxSize=function(t){this.maxSize=t},t.prototype.getMaxSize=function(){return this.maxSize},t}()},"./src/WebSocketClient/websocket.ts":(t,e,n)=>{n.r(e),n.d(e,{createRoom:()=>s,joinRoom:()=>r,sendKeyEventToServer:()=>c,setPlayerData:()=>a});var o,i=n("./src/MenuManager/login.ts");function s(t){o&&o.readyState===WebSocket.OPEN?o.send(JSON.stringify({type:"CREATE_ROOM",username:t})):console.error("WebSocket connection is not open")}function r(t,e){o&&o.readyState===WebSocket.OPEN?o.send(JSON.stringify({type:"JOIN_ROOM",roomCode:t,username:e})):console.error("WebSocket connection is not open")}function a(t,e){o&&o.readyState===WebSocket.OPEN?o.send(JSON.stringify({type:"PLAYER_DATA",player:t,roomCode:e})):console.error("WebSocket connection is not open")}function c(t,e){o&&o.readyState===WebSocket.OPEN?o.send(JSON.stringify({type:"KEY_EVENT",key:t,pressed:e})):console.error("WebSocket connection is not open")}(o=new WebSocket("ws://".concat(window.location.hostname,":8080"))).onopen=function(){console.log("WebSocket connection established")},o.onmessage=function(t){var e=JSON.parse(t.data);switch(console.log("Message from server:",e),e.type){case"JOINED_ROOM":(0,i.showRoomView)(t.data);break;case"ROOM_DOES_NOT_EXIST":(0,i.showErrorAnimation)();break;case"ROOM_DATA":(0,i.updateRoomList)(t.data);break;case"GAMEPLAY":break;case"ERROR":alert("Error: ".concat(e.message))}},o.onclose=function(){console.log("WebSocket connection closed")},o.onerror=function(t){console.error("WebSocket error:",t)}},"./src/index.ts":(t,e,n)=>{n.r(e),n.d(e,{backgroundCanvas:()=>p,backgroundCanvasCtx:()=>f,fps:()=>h,gameCanvas:()=>l,gameCanvasCtx:()=>u,gridSize:()=>y});var o=n("./node_modules/vector2d/src/Vec2D.js"),i=n("./src/Drawer.ts"),s=n("./src/InputManager.ts"),r=n("./src/LineSegment.ts"),a=n("./src/Snake.ts"),c=n("./src/CollisionHandler.ts"),d=document.createElement("div");d.style.position="absolute",d.style.top="10px",d.style.left="10px",d.style.color="black",document.body.appendChild(d);var h=60,l=document.getElementById("game-canvas"),u=l.getContext("2d"),p=document.getElementById("background-canvas"),f=p.getContext("2d");p.width=p.getBoundingClientRect().width,p.height=p.getBoundingClientRect().height,l.width=l.getBoundingClientRect().width,l.height=l.getBoundingClientRect().height;var y=60,g=0,v=performance.now()/10;window.addEventListener("resize",(function(){l.width=l.getBoundingClientRect().width,l.height=l.getBoundingClientRect().height,p.width=p.getBoundingClientRect().width,p.height=p.getBoundingClientRect().height,(0,i.drawGrid)()})),(0,i.drawGrid)();for(var m=[],b=[],C=["#ef8888","#ff0000","#00aabb","#0000ee"],x=[["A","D"],["F","H"],["J","L"],["8","0"]],w=0;w<2;w++){var P=new o.Vector(1800*Math.random(),900*Math.random());m.push(new a.default(new r.default(P,P.add(new o.Vector(10,10)),!0,2*Math.random()*Math.PI),C[w],u)),b.push(new s.default(m[w],x[w][0],x[w][1]))}var k=new c.default(m);requestAnimationFrame((function t(){++g%10==0&&(h=function(){var t=performance.now()/10,e=t-v,n=Math.round(1e3/e);return v=t,n}(),d.innerText="FPS: ".concat(h)),u.clearRect(0,0,l.width,l.height),m.forEach((function(t){t.draw(),performance.now()>2e3&&t.move((performance.now()/10-v)/2),t.updateEmitter((performance.now()/10-v)/10)})),k.checkCollisions(),requestAnimationFrame(t)}))},"./node_modules/vector2d/src/AbstractVector.js":(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=[1,10,100,1e3,1e4,1e5,1e6,1e7,1e8,1e9,1e10],o=function(){function t(t){this.ctor=t}return t.prototype.setAxes=function(t,e){return this.x=t,this.y=e,this},t.prototype.getX=function(){return this.x},t.prototype.setX=function(t){return this.x=t,this},t.prototype.getY=function(){return this.y},t.prototype.setY=function(t){return this.y=t,this},t.prototype.toString=function(t){return void 0===t&&(t=!1),t?"("+Math.round(this.x)+", "+Math.round(this.y)+")":"("+this.x+", "+this.y+")"},t.prototype.toArray=function(){return[this.x,this.y]},t.prototype.toObject=function(){return{x:this.x,y:this.y}},t.prototype.add=function(t){return this.x+=t.x,this.y+=t.y,this},t.prototype.subtract=function(t){return this.x-=t.x,this.y-=t.y,this},t.prototype.equals=function(t){return t.x===this.x&&t.y===this.y},t.prototype.multiplyByVector=function(t){return this.x*=t.x,this.y*=t.y,this},t.prototype.mulV=function(t){return this.multiplyByVector(t)},t.prototype.divideByVector=function(t){return this.x/=t.x,this.y/=t.y,this},t.prototype.divV=function(t){return this.divideByVector(t)},t.prototype.multiplyByScalar=function(t){return this.x*=t,this.y*=t,this},t.prototype.mulS=function(t){return this.multiplyByScalar(t)},t.prototype.divideByScalar=function(t){return this.x/=t,this.y/=t,this},t.prototype.divS=function(t){return this.divideByScalar(t)},t.prototype.normalise=function(){return this.divideByScalar(this.magnitude())},t.prototype.normalize=function(){return this.normalise()},t.prototype.unit=function(){return this.normalise()},t.prototype.magnitude=function(){var t=this.x,e=this.y;return Math.sqrt(t*t+e*e)},t.prototype.length=function(){return this.magnitude()},t.prototype.lengthSq=function(){var t=this.x,e=this.y;return t*t+e*e},t.prototype.dot=function(t){return t.x*this.x+t.y*this.y},t.prototype.cross=function(t){return this.x*t.y-this.y*t.x},t.prototype.reverse=function(){return this.x=-this.x,this.y=-this.y,this},t.prototype.abs=function(){return this.x=Math.abs(this.x),this.y=Math.abs(this.y),this},t.prototype.zero=function(){return this.x=this.y=0,this},t.prototype.distance=function(t){var e=this.x-t.x,n=this.y-t.y;return Math.sqrt(e*e+n*n)},t.prototype.rotate=function(t){var e=Math.cos(t),n=Math.sin(t),o=this.x,i=this.y;return this.x=o*e-i*n,this.y=o*n+i*e,this},t.prototype.round=function(t){void 0===t&&(t=2);var e=n[t];return this.x=(.5+this.x*e<<0)/e,this.y=(.5+this.y*e<<0)/e,this},t.prototype.clone=function(){return new this.ctor(this.x,this.y)},t}();e.AbstractVector=o},"./node_modules/vector2d/src/ArrayVector.js":function(t,e,n){var o,i=this&&this.__extends||(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var s=function(t){function e(n,o){var i=t.call(this,e)||this;return i.axes=[n,o],i.ctor=e,i}return i(e,t),Object.defineProperty(e.prototype,"x",{get:function(){return this.axes[0]},set:function(t){this.axes[0]=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"y",{get:function(){return this.axes[1]},set:function(t){this.axes[1]=t},enumerable:!0,configurable:!0}),e}(n("./node_modules/vector2d/src/AbstractVector.js").AbstractVector);e.ArrayVector=s},"./node_modules/vector2d/src/Float32Vector.js":function(t,e,n){var o,i=this&&this.__extends||(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var s=function(t){function e(n,o){var i=t.call(this,e)||this;return i.axes=new Float32Array(2),i.axes[0]=n,i.axes[1]=o,i}return i(e,t),Object.defineProperty(e.prototype,"x",{get:function(){return this.axes[0]},set:function(t){this.axes[0]=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"y",{get:function(){return this.axes[1]},set:function(t){this.axes[1]=t},enumerable:!0,configurable:!0}),e}(n("./node_modules/vector2d/src/AbstractVector.js").AbstractVector);e.Float32Vector=s},"./node_modules/vector2d/src/Vec2D.js":(t,e,n)=>{function o(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}Object.defineProperty(e,"__esModule",{value:!0}),o(n("./node_modules/vector2d/src/AbstractVector.js")),o(n("./node_modules/vector2d/src/ArrayVector.js")),o(n("./node_modules/vector2d/src/Float32Vector.js")),o(n("./node_modules/vector2d/src/Vector.js"))},"./node_modules/vector2d/src/Vector.js":function(t,e,n){var o,i=this&&this.__extends||(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var s=function(t){function e(n,o){var i=t.call(this,e)||this;return i._x=n,i._y=o,i}return i(e,t),Object.defineProperty(e.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t},enumerable:!0,configurable:!0}),e}(n("./node_modules/vector2d/src/AbstractVector.js").AbstractVector);e.Vector=s}},e={};function n(o){var i=e[o];if(void 0!==i)return i.exports;var s=e[o]={exports:{}};return t[o].call(s.exports,s,s.exports,n),s.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var o in e)n.o(e,o)&&!n.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n("./src/index.ts")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,