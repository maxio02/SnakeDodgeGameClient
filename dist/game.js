/*! For license information please see game.js.LICENSE.txt */
(()=>{"use strict";var t={"./src/ArcSegment.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>c});var o,r=n("./src/Drawer.ts"),i=n("./node_modules/vector2d/src/Vec2D.js"),s=n("./src/Segment.ts"),a=(o=function(t,e){return o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},o(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});const c=function(t){function e(e,n,o,r,i,s){var a=t.call(this)||this;return a.center=e,a.radius=n,a.startAngle=o,a.endAngle=r,a.counterClockwise=i,a.isCollidable=s,a}return a(e,t),e.prototype.draw=function(t,e){var n=t.canvas.width/2e3,o=t.canvas.height/2e3;t.lineCap="round",t.strokeStyle=e,1==this.isCollidable&&(t.beginPath(),t.arc(this.center.x*n,this.center.y*o,this.radius*Math.min(n,o),this.startAngle,this.endAngle,this.counterClockwise),t.stroke(),t.closePath())},e.prototype.drawDebug=function(t,e){var n=this.counterClockwise?-Math.PI:Math.PI;n+=this.endAngle,t.lineCap="round",(0,r.drawDot)(this.center.x,this.center.y,5,"#000000"),(0,r.drawArrow)(t,new i.Vector(this.endPoint.x,this.endPoint.y),new i.Vector(this.endPoint.x+this.radius*Math.cos(n),this.endPoint.y+this.radius*Math.sin(n))),(0,r.drawArc)(this.center.x,this.center.y,this.radius,0,0,!1)},Object.defineProperty(e.prototype,"endPoint",{get:function(){return new i.Vector(this.center.x+this.radius*Math.cos(this.endAngle),this.center.y+this.radius*Math.sin(this.endAngle))},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"penpendicularEndAngle",{get:function(){return this.isCounterClockwise?this.endAngle-Math.PI/2:this.endAngle+Math.PI/2},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"penpendicularStartAngle",{get:function(){return this.isCounterClockwise?this.startAngle-Math.PI/2:this.startAngle+Math.PI/2},enumerable:!1,configurable:!0}),e.prototype.isCounterClockwise=function(){return this.counterClockwise},e.prototype.getContinuingSegment=function(t){return new e(this.center.clone().add(t),this.radius,this.endAngle,this.endAngle,this.counterClockwise,this.isCollidable)},e}(s.default)},"./src/Drawer.ts":(t,e,n)=>{n.r(e),n.d(e,{drawArc:()=>a,drawArrow:()=>c,drawDot:()=>s,drawGrid:()=>i});var o=n("./node_modules/vector2d/src/Vec2D.js"),r=n("./src/index.ts");function i(){var t=r.backgroundCanvasCtx.canvas.width/2e3,e=r.backgroundCanvasCtx.canvas.height/2e3;r.backgroundCanvasCtx.clearRect(0,0,r.backgroundCanvas.width,r.backgroundCanvas.height),r.backgroundCanvasCtx.strokeStyle="rgba(0, 0, 0, 0.3)",r.backgroundCanvasCtx.lineWidth=2;for(var n=r.gridSize;n<r.backgroundCanvas.width;n+=r.gridSize*t)r.backgroundCanvasCtx.beginPath(),r.backgroundCanvasCtx.moveTo(n,0),r.backgroundCanvasCtx.lineTo(n,r.backgroundCanvas.height),r.backgroundCanvasCtx.stroke();for(var o=r.gridSize;o<r.backgroundCanvas.height;o+=r.gridSize*e)r.backgroundCanvasCtx.beginPath(),r.backgroundCanvasCtx.moveTo(0,o),r.backgroundCanvasCtx.lineTo(r.backgroundCanvas.width,o),r.backgroundCanvasCtx.stroke()}function s(t,e,n,o){r.backgroundCanvasCtx.beginPath(),r.backgroundCanvasCtx.arc(t,e,n,0,2*Math.PI,!1),r.backgroundCanvasCtx.fillStyle=o,r.backgroundCanvasCtx.fill(),r.backgroundCanvasCtx.closePath()}function a(t,e,n,o,i,s){r.backgroundCanvasCtx.lineCap="round",r.backgroundCanvasCtx.strokeStyle="#3466aa",r.backgroundCanvasCtx.beginPath(),r.backgroundCanvasCtx.arc(t,e,n,0,2*Math.PI,s),r.backgroundCanvasCtx.lineWidth=5,r.backgroundCanvasCtx.stroke(),r.backgroundCanvasCtx.closePath()}function c(t,e,n){if(e.x!=n.x&&e.y!=n.y){var r=Math.atan2(n.y-e.y,n.x-e.x),i=10,s=new o.Vector(n.x,n.y);s.x-=11.5*Math.cos(r),s.y-=11.5*Math.sin(r),t.beginPath(),t.moveTo(e.x,e.y),t.lineTo(s.x,s.y),t.strokeStyle="#bbbbbb",t.lineWidth=10,t.stroke(),t.beginPath(),t.moveTo(s.x,s.y),t.lineTo(s.x-i*Math.cos(r-Math.PI/7),s.y-i*Math.sin(r-Math.PI/7)),t.lineTo(s.x-i*Math.cos(r+Math.PI/7),s.y-i*Math.sin(r+Math.PI/7)),t.lineTo(s.x,s.y),t.lineTo(s.x-i*Math.cos(r-Math.PI/7),s.y-i*Math.sin(r-Math.PI/7)),t.strokeStyle="#bbbbbb",t.lineWidth=10,t.stroke(),t.fillStyle="#bbbbbb",t.fill(),t.closePath()}}},"./src/InputManager.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>r});var o=n("./src/WebSocketClient/websocket.ts");const r=function(){function t(t,e,n){this.keyMap={},window.addEventListener("keydown",this.onKeyDown.bind(this)),window.addEventListener("keyup",this.onKeyUp.bind(this)),this.snake=t,this.leftKey=e,this.rightKey=n}return t.prototype.onKeyDown=function(t){if(this.snake.isAlive){var e=t.key.toUpperCase();if(e==this.leftKey||e==this.rightKey){if(this.keyMap[this.rightKey]&&e==this.leftKey)this.keyMap[this.rightKey]=!1;else if(this.keyMap[this.leftKey]&&e==this.rightKey)this.keyMap[this.leftKey]=!1;else if(this.keyMap[e])return;this.keyMap[e]=!0,(0,o.sendKeyEventToServer)(e==this.rightKey?1:0,!0)}}},t.prototype.onKeyUp=function(t){if(this.snake.isAlive){var e=t.key.toUpperCase();this.keyMap[e]&&(this.keyMap[e]=!1,(0,o.sendKeyEventToServer)(e==this.rightKey?1:0,!1))}},t.prototype.dispose=function(){window.removeEventListener("keydown",this.onKeyDown.bind(this)),window.removeEventListener("keyup",this.onKeyUp.bind(this))},t}()},"./src/LineSegment.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>s});var o,r=n("./src/Segment.ts"),i=(o=function(t,e){return o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},o(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});const s=function(t){function e(e,n,o,r){var i=t.call(this)||this;return i.isCollidable=!0,i.startPoint=e,i.endPoint=n,i.isCollidable=o,i.endAngle=r,i}return i(e,t),e.prototype.draw=function(t,e){var n=t.canvas.width/2e3,o=t.canvas.height/2e3;t.strokeStyle=e,t.lineCap="round",1==this.isCollidable&&(t.beginPath(),t.moveTo(this.startPoint.x*n,this.startPoint.y*o),t.lineTo(this.endPoint.x*n,this.endPoint.y*o),t.stroke(),t.closePath())},e.prototype.calcEndAngle=function(){return Math.atan((this.endPoint.y-this.startPoint.y)/(this.endPoint.x-this.startPoint.x))},Object.defineProperty(e.prototype,"length",{get:function(){return Math.sqrt(Math.pow(this.startPoint.x-this.endPoint.x,2)+Math.pow(this.startPoint.y-this.endPoint.y,2))},enumerable:!1,configurable:!0}),e.prototype.getContinuingSegment=function(t){var n=this.endPoint.clone().add(t);return new e(n,n,this.isCollidable,this.endAngle)},e}(r.default)},"./src/MenuManager/login.ts":(t,e,n)=>{n.r(e),n.d(e,{currentPlayer:()=>c,currentRoom:()=>a,handleReadyState:()=>S,handleRoomAction:()=>P,showErrorAnimation:()=>_,showRoomView:()=>k,switchGameView:()=>j,updateButton:()=>w,updateColorPicker:()=>A,updatePlayerColor:()=>O,updateRoomList:()=>M});var o=n("./src/index.ts"),r=n("./src/ViewModels/Player.ts"),i=n("./src/ViewModels/Room.ts"),s=n("./src/WebSocketClient/websocket.ts"),a=null,c=null,l=document.getElementById("roomCodeInput"),u=document.getElementById("usernameInput"),d=document.getElementById("joinButton"),h=document.getElementById("readyButton"),y=document.getElementById("login-div"),p=document.getElementById("room-div"),f=document.getElementById("game-canvas-container"),g=document.getElementById("color-picker"),m=document.getElementById("room-users-list"),v=document.getElementById("room-code"),b=document.getElementById("player-count"),x=document.getElementById("color-picker-container"),C=document.getElementById("start-progress-bar");function w(){""==u.value.trim()?d.disabled=!0:d.disabled=!1,5==l.value.trim().length?d.textContent="JOIN ROOM":d.textContent="CREATE ROOM"}function P(){var t=u.value;t&&(c=new r.Player(t),"CREATE ROOM"===d.innerText?(0,s.createRoom)(u.value):(0,s.joinRoom)(l.value.toUpperCase(),u.value))}function S(){c.isReady=!c.isReady,(0,s.setPlayerData)(c,a.getCode()),c.isReady?(h.classList.remove("red-button"),h.classList.add("green-button")):(h.classList.add("red-button"),h.classList.remove("green-button"))}function k(t){var e=JSON.parse(t.toString());a=new i.Room(e.room.code,e.room.host,e.room.players,e.room.maxSize),c.username==a.getHost().username&&document.getElementById("startButton").classList.remove("display-none"),x.style.backgroundColor=c.color,g.value=c.color,document.getElementById("color-label").style.color=E(g.value,"#FFFFFF","#000000"),y.classList.add("display-none"),p.classList.add("display-flex"),l.value=a.getCode(),v.innerHTML=a.getCode(),(0,s.setPlayerData)(c,a.getCode()),M(t)}function M(t){var e,n,o=JSON.parse(t.toString());a.setPlayers(o.room.players),a.setHost(o.room.host),a.setMaxSize(o.room.maxSize),b.innerHTML="".concat(Object.keys(a.getPlayers()).length,"/").concat(a.getMaxSize()),m.innerHTML="",Object.values(a.getPlayers()).forEach((function(t){var e=document.createElement("li");e.textContent=t.username+"",t.username==a.getHost().username?e.insertAdjacentHTML("afterbegin",'<i class="fa-solid fa-crown" style="color: '.concat(t.color,';"></i>')):e.insertAdjacentHTML("afterbegin",'<i class="fa-solid fa-circle" style="color: '.concat(t.color,'; margin-left: 4px"></i>')),t.isReady?e.insertAdjacentHTML("beforeend",' <i class="fa-solid fa-circle" style="color: #37cb48;"></i>'):e.insertAdjacentHTML("beforeend",' <i class="fa-solid fa-circle" style="color: #cb3737;"></i>'),m.appendChild(e)})),c.username==a.getHost().username&&document.getElementById("startButton").classList.remove("display-none"),e=Object.values(a.getPlayers()).filter((function(t){return t.isReady})).length,0!=(n=a.getMaxSize())&&(C.style.width=Math.floor(e/n*100)+"%")}function _(){d.classList.add("red-button"),d.classList.add("wiggle"),setTimeout((function(){d.classList.remove("red-button"),d.classList.remove("wiggle")}),600)}function A(){x.style.backgroundColor=g.value}function O(){c.color=g.value,document.getElementById("color-label").style.color=E(g.value,"#FFFFFF","#000000"),(0,s.setPlayerData)(c,a.getCode())}function E(t,e,n){var o="#"===t.charAt(0)?t.substring(1,7):t,r=[parseInt(o.substring(0,2),16)/255,parseInt(o.substring(2,4),16)/255,parseInt(o.substring(4,6),16)/255].map((function(t){return t<=.03928?t/12.92:Math.pow((t+.055)/1.055,2.4)}));return.2126*r[0]+.7152*r[1]+.0722*r[2]>.4?n:e}function j(t){switch(t.state){case 0:a.setGameState(0),y.classList.add("display-none"),p.classList.add("display-none"),p.classList.remove("display-flex"),f.classList.remove("display-none"),f.classList.add("display-flex"),(0,o.updateCanvasSize)();break;case 1:a.setGameState(1),y.classList.add("display-none"),p.classList.add("display-flex"),f.classList.add("display-none")}}window.onload=function(){w()},window.updateButton=w,window.handleRoomAction=P,window.handleReadyState=S,window.updateColorPicker=A,window.updatePlayerColor=O,window.startGame=function(){c.username==a.getHost().username&&(0,s.sendStartCommand)(a.getCode())}},"./src/ParticleSystem/Emitter.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>s});var o=n("./src/ParticleSystem/Particle.ts"),r=n("./src/ParticleSystem/ParticleSystemUtils.ts"),i=function(){return i=Object.assign||function(t){for(var e,n=1,o=arguments.length;n<o;n++)for(var r in e=arguments[n])Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t},i.apply(this,arguments)};const s=function(){function t(t,e,n,o,r,i,s,a,c,l,u){void 0===r&&(r="circle"),void 0===a&&(a=!0),void 0===c&&(c=!0),void 0===u&&(u=0),this.aliveParticles=[],this.ticks=0,this.position=t,this.emitTime=e,this.size=n,this.speed=o,this.shape=r,this.color=i,this.canvasCtx=s,this.fadeColor=a,this.fadeSize=c,this.particleMaxAge=l,this.emitTimeMillis=u}return t.prototype.tick=function(t){this.emitTimeMillis+this.particleMaxAge<0||(this.emitTimeMillis-=t,this.ticks%this.emitTime==0&&this.emitTimeMillis>0&&(this.aliveParticles.push(new o.default(this.position.clone(),(0,r.getRandomDirection)(),this.size,this.speed,this.shape,i({},this.color),this.canvasCtx,this.particleMaxAge,this.fadeColor,this.fadeSize)),this.aliveParticles.push(new o.default(this.position.clone(),(0,r.getRandomDirection)(),this.size,this.speed,this.shape,i({},this.color),this.canvasCtx,this.particleMaxAge,this.fadeColor,this.fadeSize)),this.aliveParticles.push(new o.default(this.position.clone(),(0,r.getRandomDirection)(),this.size,this.speed,this.shape,i({},this.color),this.canvasCtx,this.particleMaxAge,this.fadeColor,this.fadeSize))),this.aliveParticles.forEach((function(e){e.tick(t)})),this.aliveParticles=this.aliveParticles.filter((function(t){return t.age>0})),this.ticks++)},t.prototype.draw=function(){this.aliveParticles.forEach((function(t){t.draw()}))},t}()},"./src/ParticleSystem/Particle.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>o});const o=function(){function t(t,e,n,o,r,i,s,a,c,l){void 0===r&&(r="circle"),this.position=t,this.velocity=e,this.size=n,this.speed=o,this.shape=r,this.color=i,this.canvasCtx=s,this.fadeColor=c,this.fadeSize=l,this.age=a,this.colorFadeAmount=this.color.a/this.age,this.sizeFadeAmount=this.size/this.age}return t.prototype.tick=function(t){this.position.add(this.velocity.clone().multiplyByScalar(t*this.speed)),this.fadeColor&&(this.color.a-=this.colorFadeAmount),this.fadeSize&&(this.size-=this.sizeFadeAmount),this.age--},t.prototype.draw=function(){switch(this.canvasCtx.moveTo(this.position.x,this.position.y),this.canvasCtx.fillStyle="rgba(".concat(this.color.r,",").concat(this.color.g,", ").concat(this.color.b,", ").concat(this.color.a,")"),this.canvasCtx.beginPath(),this.shape){case"circle":this.canvasCtx.arc(this.position.x,this.position.y,this.size,0,2*Math.PI),this.canvasCtx.fill();break;case"square":this.canvasCtx.fillRect(this.position.x-this.size,this.position.y-this.size,2*this.size,2*this.size)}this.canvasCtx.closePath()},t}()},"./src/ParticleSystem/ParticleSystemUtils.ts":(t,e,n)=>{n.r(e),n.d(e,{getRandomDirection:()=>r,hexToRgb:()=>i});var o=n("./node_modules/vector2d/src/Vec2D.js");function r(){return new o.Vector(2*Math.random()-1,2*Math.random()-1)}function i(t){var e=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(t);return e?{r:parseInt(e[1],16),g:parseInt(e[2],16),b:parseInt(e[3],16)}:null}},"./src/Segment.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>o});const o=function(){}},"./src/Snake.ts":(t,e,n)=>{n.r(e),n.d(e,{default:()=>s});var o=n("./src/ParticleSystem/Emitter.ts"),r=n("./src/ParticleSystem/ParticleSystemUtils.ts"),i=function(){return i=Object.assign||function(t){for(var e,n=1,o=arguments.length;n<o;n++)for(var r in e=arguments[n])Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t},i.apply(this,arguments)};const s=function(){function t(t,e,n){this.segments=[],this.isAlive=!0,this.turnRadius=60,this.emitter=null,this.addSegment(t),this.color=e,this.canvasCtx=n}return t.prototype.addSegment=function(t){this.segments.push(t)},Object.defineProperty(t.prototype,"head",{get:function(){return this.segments.slice(-1).pop()},enumerable:!1,configurable:!0}),t.prototype.draw=function(){var t=this,e=this.canvasCtx.canvas.width/2e3,n=this.canvasCtx.canvas.height/2e3;this.canvasCtx.lineWidth=12*Math.min(e,n),this.segments.forEach((function(o,r){o.draw(t.canvasCtx,t.color),t.head==o&&(t.canvasCtx.beginPath(),t.canvasCtx.arc(o.endPoint.x*e,o.endPoint.y*n,.5*Math.min(e,n),0,2*Math.PI),t.canvasCtx.stroke(),t.canvasCtx.closePath())}))},t.prototype.kill=function(){console.log("SNAKE DEAD"),this.isAlive=!1,this.emitter=new o.default(this.head.endPoint,1,7,4,"circle",i(i({},(0,r.hexToRgb)(this.color)),{a:1}),this.canvasCtx,!0,!0,70,4)},t.prototype.updateEmitter=function(t){this.emitter&&(this.emitter.tick(t),this.emitter.draw())},t}()},"./src/ViewModels/Player.ts":(t,e,n)=>{n.r(e),n.d(e,{Player:()=>o});var o=function(){function t(t,e){void 0===e&&(e=!1),this.username=t,this.isReady=e,this.color="#000000".replace(/0/g,(function(){return(~~(16*Math.random())).toString(16)}))}return t.prototype.toJSON=function(){return{username:this.username,isReady:this.isReady,color:this.color}},t}()},"./src/ViewModels/Room.ts":(t,e,n)=>{n.r(e),n.d(e,{Room:()=>o});var o=function(){function t(t,e,n,o){void 0===o&&(o=5),this.players={},this.code=t,this.host=e,this.maxSize=o,null!=n?this.players=n:this.addPlayer(e)}return t.prototype.addPlayer=function(t){return!(Object.keys(this.players).length>=this.maxSize||(this.players[t.username]=t,0))},t.prototype.getCode=function(){return this.code},t.prototype.getPlayers=function(){return this.players},t.prototype.getHost=function(){return this.host},t.prototype.setHost=function(t){this.host=t},t.prototype.setPlayers=function(t){this.players=t},t.prototype.setMaxSize=function(t){this.maxSize=t},t.prototype.getMaxSize=function(){return this.maxSize},t.prototype.setGameState=function(t){this.gameState=t},t.prototype.getGameState=function(){return this.gameState},t}()},"./src/WebSocketClient/websocket.ts":(t,e,n)=>{n.r(e),n.d(e,{createRoom:()=>s,joinRoom:()=>a,sendKeyEventToServer:()=>l,sendStartCommand:()=>u,setPlayerData:()=>c});var o,r=n("./src/index.ts"),i=n("./src/MenuManager/login.ts");function s(t){o&&o.readyState===WebSocket.OPEN?o.send(JSON.stringify({type:"CREATE_ROOM",username:t})):console.error("WebSocket connection is not open")}function a(t,e){o&&o.readyState===WebSocket.OPEN?o.send(JSON.stringify({type:"JOIN_ROOM",roomCode:t,username:e})):console.error("WebSocket connection is not open")}function c(t,e){o&&o.readyState===WebSocket.OPEN?o.send(JSON.stringify({type:"PLAYER_DATA",player:t,roomCode:e})):console.error("WebSocket connection is not open")}function l(t,e){o&&o.readyState===WebSocket.OPEN?o.send(JSON.stringify({type:"KEY_EVENT",roomCode:i.currentRoom.getCode(),username:i.currentPlayer.username,key:t,pressed:e})):console.error("WebSocket connection is not open")}function u(t){o&&o.readyState===WebSocket.OPEN?o.send(JSON.stringify({type:"BEGIN_GAME",roomCode:t})):console.error("WebSocket connection is not open")}(o=new WebSocket("ws://".concat(window.location.hostname,":8080"))).onopen=function(){console.log("WebSocket connection established")},o.onmessage=function(t){var e=JSON.parse(t.data);switch(e.type){case"JOINED_ROOM":(0,i.showRoomView)(t.data);break;case"ROOM_DOES_NOT_EXIST":(0,i.showErrorAnimation)();break;case"ROOM_DATA":(0,i.updateRoomList)(t.data);break;case"GAME_STATE":(0,i.switchGameView)(e);break;case"GAMEPLAY_DATA":(0,r.updateGameState)(e);break;case"ERROR":alert("Error: ".concat(e.message))}},o.onclose=function(){console.log("WebSocket connection closed")},o.onerror=function(t){console.error("WebSocket error:",t)}},"./src/index.ts":(t,e,n)=>{n.r(e),n.d(e,{backgroundCanvas:()=>p,backgroundCanvasCtx:()=>f,fps:()=>d,gameCanvas:()=>h,gameCanvasCtx:()=>y,gridSize:()=>g,updateCanvasSize:()=>m,updateGameState:()=>C});var o=n("./node_modules/vector2d/src/Vec2D.js"),r=n("./src/ArcSegment.ts"),i=n("./src/Drawer.ts"),s=n("./src/InputManager.ts"),a=n("./src/LineSegment.ts"),c=n("./src/Snake.ts"),l=n("./src/MenuManager/login.ts"),u=document.createElement("div");u.style.position="absolute",u.style.top="10px",u.style.left="10px",u.style.color="black",document.body.appendChild(u);var d=60,h=document.getElementById("game-canvas"),y=h.getContext("2d"),p=document.getElementById("background-canvas"),f=p.getContext("2d");p.width=p.getBoundingClientRect().width,p.height=p.getBoundingClientRect().height,h.width=h.getBoundingClientRect().width,h.height=h.getBoundingClientRect().height;var g=60;function m(){h.width=h.getBoundingClientRect().width,h.height=h.getBoundingClientRect().height,p.width=p.getBoundingClientRect().width,p.height=p.getBoundingClientRect().height,(0,i.drawGrid)()}var v=0,b=performance.now()/10;window.addEventListener("resize",m),(0,i.drawGrid)();var x=!1;function C(t){x?t.snakeHeads.forEach((function(t){var e=t.lastSegment,n=t.username,i=e.endPoint,s=l.currentRoom.getPlayers()[n].snake;if(e.isNewThisTick){if("LineSegment"==t.segmentType){var c=e.startPoint;s.addSegment(new a.default(new o.Vector(c.x,c.y),new o.Vector(i.x,i.y),e.isCollidable,e.endAngle))}else if("ArcSegment"==t.segmentType){var u=e.center;s.addSegment(new r.default(new o.Vector(u.x,u.y),e.radius,e.startAngle,e.endAngle,e.counterClockwise,e.isCollidable))}}else"LineSegment"==t.segmentType?(c=e.startPoint,s.segments[s.segments.length-1]=new a.default(new o.Vector(c.x,c.y),new o.Vector(i.x,i.y),e.isCollidable,e.endAngle)):"ArcSegment"==t.segmentType&&(u=e.center,s.segments[s.segments.length-1]=new r.default(new o.Vector(u.x,u.y),e.radius,e.startAngle,e.endAngle,e.counterClockwise,e.isCollidable))})):(t.snakeHeads.forEach((function(t){var e=t.lastSegment,n=t.username,r=e.endPoint;l.currentRoom.getPlayers()[n].snake=new c.default(new a.default(new o.Vector(r.x,r.y),new o.Vector(r.x,r.y),e.isCollidable,e.endAngle),l.currentRoom.getPlayers()[n].color,y)})),new s.default(l.currentRoom.getPlayers()[l.currentPlayer.username].snake,"A","D"),x=!0),++v%10==0&&(d=function(){var t=performance.now()/10,e=t-b,n=Math.round(1e3/e);return b=t,n}(),u.innerText="FPS: ".concat(d)),y.clearRect(0,0,h.width,h.height),Object.values(l.currentRoom.getPlayers()).forEach((function(t){t.snake.draw(),t.snake.updateEmitter((performance.now()/10-b)/10)}))}},"./node_modules/vector2d/src/AbstractVector.js":(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=[1,10,100,1e3,1e4,1e5,1e6,1e7,1e8,1e9,1e10],o=function(){function t(t){this.ctor=t}return t.prototype.setAxes=function(t,e){return this.x=t,this.y=e,this},t.prototype.getX=function(){return this.x},t.prototype.setX=function(t){return this.x=t,this},t.prototype.getY=function(){return this.y},t.prototype.setY=function(t){return this.y=t,this},t.prototype.toString=function(t){return void 0===t&&(t=!1),t?"("+Math.round(this.x)+", "+Math.round(this.y)+")":"("+this.x+", "+this.y+")"},t.prototype.toArray=function(){return[this.x,this.y]},t.prototype.toObject=function(){return{x:this.x,y:this.y}},t.prototype.add=function(t){return this.x+=t.x,this.y+=t.y,this},t.prototype.subtract=function(t){return this.x-=t.x,this.y-=t.y,this},t.prototype.equals=function(t){return t.x===this.x&&t.y===this.y},t.prototype.multiplyByVector=function(t){return this.x*=t.x,this.y*=t.y,this},t.prototype.mulV=function(t){return this.multiplyByVector(t)},t.prototype.divideByVector=function(t){return this.x/=t.x,this.y/=t.y,this},t.prototype.divV=function(t){return this.divideByVector(t)},t.prototype.multiplyByScalar=function(t){return this.x*=t,this.y*=t,this},t.prototype.mulS=function(t){return this.multiplyByScalar(t)},t.prototype.divideByScalar=function(t){return this.x/=t,this.y/=t,this},t.prototype.divS=function(t){return this.divideByScalar(t)},t.prototype.normalise=function(){return this.divideByScalar(this.magnitude())},t.prototype.normalize=function(){return this.normalise()},t.prototype.unit=function(){return this.normalise()},t.prototype.magnitude=function(){var t=this.x,e=this.y;return Math.sqrt(t*t+e*e)},t.prototype.length=function(){return this.magnitude()},t.prototype.lengthSq=function(){var t=this.x,e=this.y;return t*t+e*e},t.prototype.dot=function(t){return t.x*this.x+t.y*this.y},t.prototype.cross=function(t){return this.x*t.y-this.y*t.x},t.prototype.reverse=function(){return this.x=-this.x,this.y=-this.y,this},t.prototype.abs=function(){return this.x=Math.abs(this.x),this.y=Math.abs(this.y),this},t.prototype.zero=function(){return this.x=this.y=0,this},t.prototype.distance=function(t){var e=this.x-t.x,n=this.y-t.y;return Math.sqrt(e*e+n*n)},t.prototype.rotate=function(t){var e=Math.cos(t),n=Math.sin(t),o=this.x,r=this.y;return this.x=o*e-r*n,this.y=o*n+r*e,this},t.prototype.round=function(t){void 0===t&&(t=2);var e=n[t];return this.x=(.5+this.x*e<<0)/e,this.y=(.5+this.y*e<<0)/e,this},t.prototype.clone=function(){return new this.ctor(this.x,this.y)},t}();e.AbstractVector=o},"./node_modules/vector2d/src/ArrayVector.js":function(t,e,n){var o,r=this&&this.__extends||(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=function(t){function e(n,o){var r=t.call(this,e)||this;return r.axes=[n,o],r.ctor=e,r}return r(e,t),Object.defineProperty(e.prototype,"x",{get:function(){return this.axes[0]},set:function(t){this.axes[0]=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"y",{get:function(){return this.axes[1]},set:function(t){this.axes[1]=t},enumerable:!0,configurable:!0}),e}(n("./node_modules/vector2d/src/AbstractVector.js").AbstractVector);e.ArrayVector=i},"./node_modules/vector2d/src/Float32Vector.js":function(t,e,n){var o,r=this&&this.__extends||(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=function(t){function e(n,o){var r=t.call(this,e)||this;return r.axes=new Float32Array(2),r.axes[0]=n,r.axes[1]=o,r}return r(e,t),Object.defineProperty(e.prototype,"x",{get:function(){return this.axes[0]},set:function(t){this.axes[0]=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"y",{get:function(){return this.axes[1]},set:function(t){this.axes[1]=t},enumerable:!0,configurable:!0}),e}(n("./node_modules/vector2d/src/AbstractVector.js").AbstractVector);e.Float32Vector=i},"./node_modules/vector2d/src/Vec2D.js":(t,e,n)=>{function o(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}Object.defineProperty(e,"__esModule",{value:!0}),o(n("./node_modules/vector2d/src/AbstractVector.js")),o(n("./node_modules/vector2d/src/ArrayVector.js")),o(n("./node_modules/vector2d/src/Float32Vector.js")),o(n("./node_modules/vector2d/src/Vector.js"))},"./node_modules/vector2d/src/Vector.js":function(t,e,n){var o,r=this&&this.__extends||(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=function(t){function e(n,o){var r=t.call(this,e)||this;return r._x=n,r._y=o,r}return r(e,t),Object.defineProperty(e.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t},enumerable:!0,configurable:!0}),e}(n("./node_modules/vector2d/src/AbstractVector.js").AbstractVector);e.Vector=i}},e={};function n(o){var r=e[o];if(void 0!==r)return r.exports;var i=e[o]={exports:{}};return t[o].call(i.exports,i,i.exports,n),i.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var o in e)n.o(e,o)&&!n.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n("./src/index.ts")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,